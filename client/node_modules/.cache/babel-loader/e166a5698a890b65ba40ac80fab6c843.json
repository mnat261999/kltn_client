{"ast":null,"code":"import axios from \"axios\";\nimport { USER_SERVER } from \"../components/ultils/mise\";\nimport { SEARCH_RESULT, LOAD_MORE_TAG, LOAD_MORE_USER } from \"./types\";\nexport function search(keyword, skip, limit, prevState = []) {\n  console.log(keyword, skip, limit, prevState);\n\n  if (keyword == \"\") {\n    return {\n      type: SEARCH_RESULT,\n      payload: {\n        users: [],\n        tags: []\n      }\n    };\n  } else {\n    console.log(prevState);\n    let data = {\n      keyword,\n      skip,\n      limit\n    };\n    const request = axios.post(`${USER_SERVER}/search`, data).then(response => {\n      let newUsers = [...prevState.users, ...response.data.users];\n      let newTags = [...prevState.tags, ...response.data.tags];\n      return {\n        users: newUsers,\n        tags: newTags,\n        userSize: response.data.users.length,\n        tagSize: response.data.tags.length\n      };\n    });\n    return {\n      type: SEARCH_RESULT,\n      payload: request\n    };\n  }\n}\nexport function searchmess(keyword, skip, limit, prevState = []) {\n  console.log(keyword, skip, limit, prevState);\n\n  if (keyword == \"\") {\n    return {\n      type: SEARCH_RESULT,\n      payload: {\n        users: [],\n        tags: []\n      }\n    };\n  } else {\n    console.log(prevState);\n    let data = {\n      keyword,\n      skip,\n      limit\n    };\n    const request = axios.post(`${USER_SERVER}/searchmess`, data).then(response => {\n      let newUsers = [...prevState.users, ...response.data.users];\n      let newGroups = [...prevState.groups, ...response.data.groups];\n      return {\n        users: newUsers,\n        groups: newGroups,\n        userSize: response.data.users.length,\n        tagSize: response.data.groups.length\n      };\n    });\n    return {\n      type: SEARCH_RESULT,\n      payload: request\n    };\n  }\n}\nexport function loadmoreUser(keyword, skip, limit, prevState = []) {\n  console.log(keyword, skip, limit, prevState);\n\n  if (keyword == \"\") {\n    return {\n      type: LOAD_MORE_USER,\n      payload: {\n        users: [],\n        userSize: 0,\n        tagSize: 0,\n        tags: []\n      }\n    };\n  } else {\n    console.log(prevState);\n    let data = {\n      keyword,\n      skip,\n      limit\n    };\n    const request = axios.post(`${USER_SERVER}/searchUser`, data).then(response => {\n      let newUsers = [...prevState.users, ...response.data.users];\n      return {\n        users: newUsers,\n        userSize: response.data.users.length\n      };\n    });\n    return {\n      type: LOAD_MORE_USER,\n      payload: request\n    };\n  }\n}\nexport function loadmoreTag(keyword, skip, limit, prevState = []) {\n  console.log(keyword, skip, limit, prevState);\n\n  if (keyword == \"\") {\n    return {\n      type: LOAD_MORE_TAG,\n      payload: {\n        users: [],\n        userSize: 0,\n        tagSize: 0,\n        tags: []\n      }\n    };\n  } else {\n    console.log(prevState);\n    let data = {\n      keyword,\n      skip,\n      limit\n    };\n    const request = axios.post(`${USER_SERVER}/searchTag`, data).then(response => {\n      console.log(response.data.tags);\n      let newTags = [...prevState.tags, ...response.data.tags];\n      return {\n        tags: newTags,\n        tagSize: response.data.tags.length\n      };\n    });\n    return {\n      type: LOAD_MORE_TAG,\n      payload: request\n    };\n  }\n}","map":{"version":3,"sources":["D:/Kltn/test/social-media/client/src/actions/search_action.js"],"names":["axios","USER_SERVER","SEARCH_RESULT","LOAD_MORE_TAG","LOAD_MORE_USER","search","keyword","skip","limit","prevState","console","log","type","payload","users","tags","data","request","post","then","response","newUsers","newTags","userSize","length","tagSize","searchmess","newGroups","groups","loadmoreUser","loadmoreTag"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { USER_SERVER } from \"../components/ultils/mise\";\nimport { SEARCH_RESULT, LOAD_MORE_TAG, LOAD_MORE_USER } from \"./types\";\n\nexport function search(keyword, skip, limit, prevState = []) {\n  console.log(keyword, skip, limit, prevState);\n  if (keyword == \"\") {\n    return {\n      type: SEARCH_RESULT,\n      payload: {\n        users: [],\n        tags: [],\n      },\n    };\n  } else {\n    console.log(prevState);\n    let data = { keyword, skip, limit };\n    const request = axios\n      .post(`${USER_SERVER}/search`, data)\n      .then((response) => {\n        let newUsers = [...prevState.users, ...response.data.users];\n        let newTags = [...prevState.tags, ...response.data.tags];\n        return {\n          users: newUsers,\n          tags: newTags,\n          userSize: response.data.users.length,\n          tagSize: response.data.tags.length,\n        };\n      });\n\n    return {\n      type: SEARCH_RESULT,\n      payload: request,\n    };\n  }\n}\n\nexport function searchmess(keyword, skip, limit, prevState = []) {\n  console.log(keyword, skip, limit, prevState);\n  if (keyword == \"\") {\n    return {\n      type: SEARCH_RESULT,\n      payload: {\n        users: [],\n        tags: [],\n      },\n    };\n  } else {\n    console.log(prevState);\n    let data = { keyword, skip, limit };\n    const request = axios\n      .post(`${USER_SERVER}/searchmess`, data)\n      .then((response) => {\n        let newUsers = [...prevState.users, ...response.data.users];\n        let newGroups = [...prevState.groups, ...response.data.groups];\n        return {\n          users: newUsers,\n          groups: newGroups,\n          userSize: response.data.users.length,\n          tagSize: response.data.groups.length,\n        };\n      });\n\n    return {\n      type: SEARCH_RESULT,\n      payload: request,\n    };\n  }\n}\n\nexport function loadmoreUser(keyword, skip, limit, prevState = []) {\n  console.log(keyword, skip, limit, prevState);\n  if (keyword == \"\") {\n    return {\n      type: LOAD_MORE_USER,\n      payload: {\n        users: [],\n        userSize: 0,\n        tagSize: 0,\n        tags: [],\n      },\n    };\n  } else {\n    console.log(prevState);\n    let data = { keyword, skip, limit };\n    const request = axios\n      .post(`${USER_SERVER}/searchUser`, data)\n      .then((response) => {\n        let newUsers = [...prevState.users, ...response.data.users];\n        return {\n          users: newUsers,\n          userSize: response.data.users.length,\n        };\n      });\n\n    return {\n      type: LOAD_MORE_USER,\n      payload: request,\n    };\n  }\n}\n\nexport function loadmoreTag(keyword, skip, limit, prevState = []) {\n  console.log(keyword, skip, limit, prevState);\n  if (keyword == \"\") {\n    return {\n      type: LOAD_MORE_TAG,\n      payload: {\n        users: [],\n        userSize: 0,\n        tagSize: 0,\n        tags: [],\n      },\n    };\n  } else {\n    console.log(prevState);\n    let data = { keyword, skip, limit };\n    const request = axios\n      .post(`${USER_SERVER}/searchTag`, data)\n      .then((response) => {\n        console.log(response.data.tags);\n        let newTags = [...prevState.tags, ...response.data.tags];\n        return {\n          tags: newTags,\n          tagSize: response.data.tags.length,\n        };\n      });\n    return {\n      type: LOAD_MORE_TAG,\n      payload: request,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}