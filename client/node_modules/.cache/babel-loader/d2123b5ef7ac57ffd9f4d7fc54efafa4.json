{"ast":null,"code":"import React, { useMemo, memo, useCallback, Fragment, useRef, useEffect } from 'react';\nimport { useTheme, guessQuantizeColorScale, quantizeColorScalePropType, withContainer, useDimensions, SvgWrapper, ResponsiveWrapper, getRelativeCursor } from '@nivo/core';\nimport { BasicTooltip, useTooltip } from '@nivo/tooltip';\nimport PropTypes from 'prop-types';\nimport { useInheritedColor, inheritedColorPropType } from '@nivo/colors';\nimport _get from 'lodash/get';\nimport _isFunction from 'lodash/isFunction';\nimport { format } from 'd3-format';\nimport { geoAzimuthalEqualArea, geoAzimuthalEquidistant, geoGnomonic, geoOrthographic, geoStereographic, geoEqualEarth, geoEquirectangular, geoMercator, geoTransverseMercator, geoNaturalEarth1, geoPath, geoGraticule, geoContains } from 'd3-geo';\nimport { useQuantizeColorScaleLegendData, BoxLegendSvg, renderLegendToCanvas } from '@nivo/legends';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar projectionById = {\n  azimuthalEqualArea: geoAzimuthalEqualArea,\n  azimuthalEquidistant: geoAzimuthalEquidistant,\n  gnomonic: geoGnomonic,\n  orthographic: geoOrthographic,\n  stereographic: geoStereographic,\n  equalEarth: geoEqualEarth,\n  equirectangular: geoEquirectangular,\n  mercator: geoMercator,\n  transverseMercator: geoTransverseMercator,\n  naturalEarth1: geoNaturalEarth1\n};\n\nvar useGeoMap = function useGeoMap(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      projectionType = _ref.projectionType,\n      projectionScale = _ref.projectionScale,\n      projectionTranslation = _ref.projectionTranslation,\n      projectionRotation = _ref.projectionRotation,\n      fillColor = _ref.fillColor,\n      borderWidth = _ref.borderWidth,\n      borderColor = _ref.borderColor;\n  var projection = useMemo(function () {\n    return projectionById[projectionType]().scale(projectionScale).translate([width * projectionTranslation[0], height * projectionTranslation[1]]).rotate(projectionRotation);\n  }, [width, height, projectionType, projectionScale, projectionTranslation[0], projectionTranslation[1], projectionRotation[0], projectionRotation[1], projectionRotation[2]]);\n  var path = useMemo(function () {\n    return geoPath(projection);\n  }, [projection]);\n  var graticule = useMemo(function () {\n    return geoGraticule();\n  });\n  var theme = useTheme();\n  var getBorderWidth = useMemo(function () {\n    return typeof borderWidth === 'function' ? borderWidth : function () {\n      return borderWidth;\n    };\n  }, [borderWidth]);\n  var getBorderColor = useInheritedColor(borderColor, theme);\n  var getFillColor = useMemo(function () {\n    return typeof fillColor === 'function' ? fillColor : function () {\n      return fillColor;\n    };\n  }, [fillColor]);\n  return {\n    projection: projection,\n    path: path,\n    graticule: graticule,\n    getBorderWidth: getBorderWidth,\n    getBorderColor: getBorderColor,\n    getFillColor: getFillColor\n  };\n};\n\nvar useChoropleth = function useChoropleth(_ref2) {\n  var features = _ref2.features,\n      data = _ref2.data,\n      match = _ref2.match,\n      label = _ref2.label,\n      value = _ref2.value,\n      valueFormat = _ref2.valueFormat,\n      colors = _ref2.colors,\n      unknownColor = _ref2.unknownColor,\n      domain = _ref2.domain;\n  var findMatchingDatum = useMemo(function () {\n    if (_isFunction(match)) return match;\n    return function (feature, datum) {\n      var featureKey = _get(feature, match);\n\n      var datumKey = _get(datum, match);\n\n      return featureKey && featureKey === datumKey;\n    };\n  }, [match]);\n  var getLabel = useMemo(function () {\n    return _isFunction(label) ? label : function (datum) {\n      return _get(datum, label);\n    };\n  }, [label]);\n  var getValue = useMemo(function () {\n    return _isFunction(value) ? value : function (datum) {\n      return _get(datum, value);\n    };\n  }, [value]);\n  var valueFormatter = useMemo(function () {\n    if (valueFormat === undefined) return function (d) {\n      return d;\n    };\n    if (_isFunction(valueFormat)) return valueFormat;\n    return format(valueFormat);\n  }, [valueFormat]);\n  var colorScale = useMemo(function () {\n    return guessQuantizeColorScale(colors).domain(domain);\n  }, [colors, domain]);\n  var getFillColor = useMemo(function () {\n    return function (feature) {\n      if (feature.value === undefined) return unknownColor;\n      return colorScale(feature.value);\n    };\n  }, [colorScale, unknownColor]);\n  var boundFeatures = useMemo(function () {\n    return features.map(function (feature) {\n      var datum = data.find(function (datum) {\n        return findMatchingDatum(feature, datum);\n      });\n      var datumValue = getValue(datum);\n\n      if (datum) {\n        var featureWithData = _objectSpread2(_objectSpread2({}, feature), {}, {\n          data: datum,\n          value: datumValue,\n          formattedValue: valueFormatter(datumValue)\n        });\n\n        featureWithData.color = getFillColor(featureWithData);\n        featureWithData.label = getLabel(featureWithData);\n        return featureWithData;\n      }\n\n      return feature;\n    });\n  }, [features, data, findMatchingDatum, getValue, valueFormatter, getFillColor]);\n  var legendData = useQuantizeColorScaleLegendData({\n    scale: colorScale,\n    valueFormat: valueFormatter\n  });\n  return {\n    colorScale: colorScale,\n    getFillColor: getFillColor,\n    boundFeatures: boundFeatures,\n    valueFormatter: valueFormatter,\n    legendData: legendData\n  };\n};\n\nvar ChoroplethTooltip = memo(function (_ref) {\n  var feature = _ref.feature;\n  if (feature.data === undefined) return null;\n  return React.createElement(BasicTooltip, {\n    id: feature.label,\n    color: feature.color,\n    enableChip: true,\n    value: feature.formattedValue\n  });\n});\nChoroplethTooltip.displayName = 'ChoroplethTooltip';\nvar commonPropTypes = {\n  features: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    type: PropTypes.oneOf(['Feature']).isRequired,\n    properties: PropTypes.object,\n    geometry: PropTypes.object.isRequired\n  })).isRequired,\n  projectionType: PropTypes.oneOf(Object.keys(projectionById)).isRequired,\n  projectionScale: PropTypes.number.isRequired,\n  projectionTranslation: PropTypes.arrayOf(PropTypes.number).isRequired,\n  projectionRotation: PropTypes.arrayOf(PropTypes.number).isRequired,\n  fillColor: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n  borderWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n  borderColor: inheritedColorPropType.isRequired,\n  enableGraticule: PropTypes.bool.isRequired,\n  graticuleLineWidth: PropTypes.number.isRequired,\n  graticuleLineColor: PropTypes.string.isRequired,\n  isInteractive: PropTypes.bool.isRequired,\n  onMouseEnter: PropTypes.func.isRequired,\n  onMouseMove: PropTypes.func.isRequired,\n  onMouseLeave: PropTypes.func.isRequired,\n  onClick: PropTypes.func.isRequired,\n  tooltip: PropTypes.any,\n  layers: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.oneOf(['graticule', 'features']), PropTypes.func])).isRequired\n};\n\nvar GeoMapPropTypes = _objectSpread2(_objectSpread2({}, commonPropTypes), {}, {\n  role: PropTypes.string.isRequired\n});\n\nvar GeoMapCanvasPropTypes = _objectSpread2({\n  pixelRatio: PropTypes.number.isRequired\n}, commonPropTypes);\n\nvar commonChoroplethPropTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  match: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n  valueFormat: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  colors: quantizeColorScalePropType.isRequired,\n  domain: PropTypes.arrayOf(PropTypes.number).isRequired,\n  unknownColor: PropTypes.string.isRequired,\n  layers: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.oneOf(['graticule', 'features', 'legends']), PropTypes.func])).isRequired\n};\n\nvar ChoroplethPropTypes = _objectSpread2(_objectSpread2(_objectSpread2({}, GeoMapPropTypes), commonChoroplethPropTypes), {}, {\n  role: PropTypes.string.isRequired\n});\n\nvar ChoroplethCanvasPropTypes = _objectSpread2(_objectSpread2({}, GeoMapCanvasPropTypes), commonChoroplethPropTypes);\n\nvar commonDefaultProps = {\n  projectionType: 'mercator',\n  projectionScale: 100,\n  projectionTranslation: [0.5, 0.5],\n  projectionRotation: [0, 0, 0],\n  enableGraticule: false,\n  graticuleLineWidth: 0.5,\n  graticuleLineColor: '#999999',\n  fillColor: '#dddddd',\n  borderWidth: 0,\n  borderColor: '#000000',\n  isInteractive: true,\n  onMouseEnter: function onMouseEnter() {},\n  onMouseLeave: function onMouseLeave() {},\n  onMouseMove: function onMouseMove() {},\n  onClick: function onClick() {},\n  layers: ['graticule', 'features'],\n  legends: []\n};\n\nvar GeoMapDefaultProps = _objectSpread2(_objectSpread2({}, commonDefaultProps), {}, {\n  role: 'img'\n});\n\nvar GeoMapCanvasDefaultProps = _objectSpread2(_objectSpread2({}, commonDefaultProps), {}, {\n  pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1\n});\n\nvar commonChoroplethDefaultProps = {\n  match: 'id',\n  label: 'id',\n  value: 'value',\n  colors: 'PuBuGn',\n  unknownColor: '#999',\n  tooltip: ChoroplethTooltip,\n  layers: ['graticule', 'features', 'legends']\n};\n\nvar ChoroplethDefaultProps = _objectSpread2(_objectSpread2(_objectSpread2({}, GeoMapDefaultProps), commonChoroplethDefaultProps), {}, {\n  role: 'img'\n});\n\nvar ChoroplethCanvasDefaultProps = _objectSpread2(_objectSpread2({}, GeoMapCanvasDefaultProps), commonChoroplethDefaultProps);\n\nvar GeoGraticule = memo(function (_ref) {\n  var path = _ref.path,\n      graticule = _ref.graticule,\n      lineWidth = _ref.lineWidth,\n      lineColor = _ref.lineColor;\n  return React.createElement(\"path\", {\n    fill: \"none\",\n    strokeWidth: lineWidth,\n    stroke: lineColor,\n    d: path(graticule())\n  });\n});\nGeoGraticule.displayName = 'GeoGraticule';\nvar GeoMapFeature = memo(function (_ref) {\n  var feature = _ref.feature,\n      path = _ref.path,\n      fillColor = _ref.fillColor,\n      borderWidth = _ref.borderWidth,\n      borderColor = _ref.borderColor,\n      _onClick = _ref.onClick,\n      _onMouseEnter = _ref.onMouseEnter,\n      _onMouseMove = _ref.onMouseMove,\n      _onMouseLeave = _ref.onMouseLeave;\n  return React.createElement(\"path\", {\n    key: feature.id,\n    fill: fillColor,\n    strokeWidth: borderWidth,\n    stroke: borderColor,\n    strokeLinejoin: \"bevel\",\n    d: path(feature),\n    onMouseEnter: function onMouseEnter(event) {\n      return _onMouseEnter(feature, event);\n    },\n    onMouseMove: function onMouseMove(event) {\n      return _onMouseMove(feature, event);\n    },\n    onMouseLeave: function onMouseLeave(event) {\n      return _onMouseLeave(feature, event);\n    },\n    onClick: function onClick(event) {\n      return _onClick(feature, event);\n    }\n  });\n});\nGeoMapFeature.displayName = 'GeoMapFeature';\nvar GeoMap = memo(function (props) {\n  var width = props.width,\n      height = props.height,\n      partialMargin = props.margin,\n      features = props.features,\n      layers = props.layers,\n      projectionType = props.projectionType,\n      projectionScale = props.projectionScale,\n      projectionTranslation = props.projectionTranslation,\n      projectionRotation = props.projectionRotation,\n      fillColor = props.fillColor,\n      borderWidth = props.borderWidth,\n      borderColor = props.borderColor,\n      enableGraticule = props.enableGraticule,\n      graticuleLineWidth = props.graticuleLineWidth,\n      graticuleLineColor = props.graticuleLineColor,\n      isInteractive = props.isInteractive,\n      onClick = props.onClick,\n      Tooltip = props.tooltip,\n      role = props.role;\n\n  var _useDimensions = useDimensions(width, height, partialMargin),\n      margin = _useDimensions.margin,\n      outerWidth = _useDimensions.outerWidth,\n      outerHeight = _useDimensions.outerHeight;\n\n  var _useGeoMap = useGeoMap({\n    width: width,\n    height: height,\n    projectionType: projectionType,\n    projectionScale: projectionScale,\n    projectionTranslation: projectionTranslation,\n    projectionRotation: projectionRotation,\n    fillColor: fillColor,\n    borderWidth: borderWidth,\n    borderColor: borderColor\n  }),\n      graticule = _useGeoMap.graticule,\n      path = _useGeoMap.path,\n      getFillColor = _useGeoMap.getFillColor,\n      getBorderWidth = _useGeoMap.getBorderWidth,\n      getBorderColor = _useGeoMap.getBorderColor;\n\n  var theme = useTheme();\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var handleClick = useCallback(function (feature, event) {\n    return isInteractive && onClick && onClick(feature, event);\n  }, [isInteractive, onClick]);\n  var handleMouseEnter = useCallback(function (feature, event) {\n    return isInteractive && Tooltip && showTooltipFromEvent(React.createElement(Tooltip, {\n      feature: feature\n    }), event);\n  }, [isInteractive, showTooltipFromEvent, Tooltip]);\n  var handleMouseMove = useCallback(function (feature, event) {\n    return isInteractive && Tooltip && showTooltipFromEvent(React.createElement(Tooltip, {\n      feature: feature\n    }), event);\n  }, [isInteractive, showTooltipFromEvent, Tooltip]);\n  var handleMouseLeave = useCallback(function () {\n    return isInteractive && hideTooltip();\n  }, [isInteractive, hideTooltip]);\n  return React.createElement(SvgWrapper, {\n    width: outerWidth,\n    height: outerHeight,\n    margin: margin,\n    theme: theme,\n    role: role\n  }, layers.map(function (layer, i) {\n    if (layer === 'graticule') {\n      if (enableGraticule !== true) return null;\n      return React.createElement(GeoGraticule, {\n        key: \"graticule\",\n        path: path,\n        graticule: graticule,\n        lineWidth: graticuleLineWidth,\n        lineColor: graticuleLineColor\n      });\n    }\n\n    if (layer === 'features') {\n      return React.createElement(Fragment, {\n        key: \"features\"\n      }, features.map(function (feature) {\n        return React.createElement(GeoMapFeature, {\n          key: feature.id,\n          feature: feature,\n          path: path,\n          fillColor: getFillColor(feature),\n          borderWidth: getBorderWidth(feature),\n          borderColor: getBorderColor(feature),\n          onMouseEnter: handleMouseEnter,\n          onMouseMove: handleMouseMove,\n          onMouseLeave: handleMouseLeave,\n          onClick: handleClick\n        });\n      }));\n    }\n\n    return React.createElement(Fragment, {\n      key: i\n    }, layer(props));\n  }));\n});\nGeoMap.displayName = 'GeoMap';\nGeoMap.defaultProps = GeoMapDefaultProps;\nvar GeoMap$1 = withContainer(GeoMap);\n\nvar ResponsiveGeoMap = function ResponsiveGeoMap(props) {\n  return React.createElement(ResponsiveWrapper, null, function (_ref) {\n    var width = _ref.width,\n        height = _ref.height;\n    return React.createElement(GeoMap$1, Object.assign({\n      width: width,\n      height: height\n    }, props));\n  });\n};\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nvar getFeatureFromMouseEvent = function getFeatureFromMouseEvent(event, el, features, projection) {\n  var _getRelativeCursor = getRelativeCursor(el, event),\n      _getRelativeCursor2 = _slicedToArray(_getRelativeCursor, 2),\n      x = _getRelativeCursor2[0],\n      y = _getRelativeCursor2[1];\n\n  return features.find(function (f) {\n    return geoContains(f, projection.invert([x, y]));\n  });\n};\n\nvar GeoMapCanvas = memo(function (props) {\n  var width = props.width,\n      height = props.height,\n      partialMargin = props.margin,\n      pixelRatio = props.pixelRatio,\n      features = props.features,\n      layers = props.layers,\n      projectionType = props.projectionType,\n      projectionScale = props.projectionScale,\n      projectionTranslation = props.projectionTranslation,\n      projectionRotation = props.projectionRotation,\n      fillColor = props.fillColor,\n      borderWidth = props.borderWidth,\n      borderColor = props.borderColor,\n      enableGraticule = props.enableGraticule,\n      graticuleLineWidth = props.graticuleLineWidth,\n      graticuleLineColor = props.graticuleLineColor,\n      isInteractive = props.isInteractive,\n      onClick = props.onClick,\n      onMouseMove = props.onMouseMove,\n      Tooltip = props.tooltip;\n  var canvasEl = useRef(null);\n  var theme = useTheme();\n\n  var _useDimensions = useDimensions(width, height, partialMargin),\n      margin = _useDimensions.margin,\n      outerWidth = _useDimensions.outerWidth,\n      outerHeight = _useDimensions.outerHeight;\n\n  var _useGeoMap = useGeoMap({\n    width: width,\n    height: height,\n    projectionType: projectionType,\n    projectionScale: projectionScale,\n    projectionTranslation: projectionTranslation,\n    projectionRotation: projectionRotation,\n    fillColor: fillColor,\n    borderWidth: borderWidth,\n    borderColor: borderColor\n  }),\n      projection = _useGeoMap.projection,\n      graticule = _useGeoMap.graticule,\n      path = _useGeoMap.path,\n      getFillColor = _useGeoMap.getFillColor,\n      getBorderWidth = _useGeoMap.getBorderWidth,\n      getBorderColor = _useGeoMap.getBorderColor;\n\n  useEffect(function () {\n    if (!canvasEl) return;\n    canvasEl.current.width = outerWidth * pixelRatio;\n    canvasEl.current.height = outerHeight * pixelRatio;\n    var ctx = canvasEl.current.getContext('2d');\n    ctx.scale(pixelRatio, pixelRatio);\n    ctx.fillStyle = theme.background;\n    ctx.fillRect(0, 0, outerWidth, outerHeight);\n    ctx.translate(margin.left, margin.top);\n    path.context(ctx);\n    layers.forEach(function (layer) {\n      if (layer === 'graticule') {\n        if (enableGraticule === true) {\n          ctx.lineWidth = graticuleLineWidth;\n          ctx.strokeStyle = graticuleLineColor;\n          ctx.beginPath();\n          path(graticule());\n          ctx.stroke();\n        }\n      } else if (layer === 'features') {\n        features.forEach(function (feature) {\n          ctx.beginPath();\n          path(feature);\n          ctx.fillStyle = getFillColor(feature);\n          ctx.fill();\n          var borderWidth = getBorderWidth(feature);\n\n          if (borderWidth > 0) {\n            ctx.strokeStyle = getBorderColor(feature);\n            ctx.lineWidth = borderWidth;\n            ctx.stroke();\n          }\n        });\n      } else {\n        layer(ctx, props);\n      }\n    });\n  }, [canvasEl, outerWidth, outerHeight, margin, pixelRatio, theme, path, graticule, getFillColor, getBorderWidth, getBorderColor, features, layers]);\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var handleMouseMove = useCallback(function (event) {\n    if (!isInteractive || !Tooltip) return;\n    var feature = getFeatureFromMouseEvent(event, canvasEl.current, features, projection);\n\n    if (feature) {\n      showTooltipFromEvent(React.createElement(Tooltip, {\n        feature: feature\n      }), event);\n    } else {\n      hideTooltip();\n    }\n\n    onMouseMove && onMouseMove(feature || null, event);\n  }, [showTooltipFromEvent, hideTooltip, isInteractive, Tooltip, canvasEl, features, projection]);\n  var handleMouseLeave = useCallback(function () {\n    return isInteractive && hideTooltip();\n  }, [isInteractive, hideTooltip]);\n  var handleClick = useCallback(function (event) {\n    if (!isInteractive || !onClick) return;\n    var feature = getFeatureFromMouseEvent(event, canvasEl.current, features, projection);\n\n    if (feature) {\n      onClick(feature, event);\n    }\n  }, [isInteractive, canvasEl, features, projection, onClick]);\n  return React.createElement(\"canvas\", {\n    ref: canvasEl,\n    width: outerWidth * pixelRatio,\n    height: outerHeight * pixelRatio,\n    style: {\n      width: outerWidth,\n      height: outerHeight,\n      cursor: isInteractive ? 'auto' : 'normal'\n    },\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    onClick: handleClick\n  });\n});\nGeoMapCanvas.displatName = 'GeoMapCanvas';\nGeoMapCanvas.defaultProps = GeoMapCanvasDefaultProps;\nvar GeoMapCanvas$1 = withContainer(GeoMapCanvas);\n\nvar ResponsiveGeoMapCanvas = function ResponsiveGeoMapCanvas(props) {\n  return React.createElement(ResponsiveWrapper, null, function (_ref) {\n    var width = _ref.width,\n        height = _ref.height;\n    return React.createElement(GeoMapCanvas$1, Object.assign({\n      width: width,\n      height: height\n    }, props));\n  });\n};\n\nvar Choropleth = memo(function (_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      partialMargin = _ref.margin,\n      features = _ref.features,\n      data = _ref.data,\n      match = _ref.match,\n      label = _ref.label,\n      value = _ref.value,\n      valueFormat = _ref.valueFormat,\n      projectionType = _ref.projectionType,\n      projectionScale = _ref.projectionScale,\n      projectionTranslation = _ref.projectionTranslation,\n      projectionRotation = _ref.projectionRotation,\n      colors = _ref.colors,\n      domain = _ref.domain,\n      unknownColor = _ref.unknownColor,\n      borderWidth = _ref.borderWidth,\n      borderColor = _ref.borderColor,\n      enableGraticule = _ref.enableGraticule,\n      graticuleLineWidth = _ref.graticuleLineWidth,\n      graticuleLineColor = _ref.graticuleLineColor,\n      layers = _ref.layers,\n      legends = _ref.legends,\n      isInteractive = _ref.isInteractive,\n      onClick = _ref.onClick,\n      Tooltip = _ref.tooltip,\n      role = _ref.role;\n\n  var _useDimensions = useDimensions(width, height, partialMargin),\n      margin = _useDimensions.margin,\n      outerWidth = _useDimensions.outerWidth,\n      outerHeight = _useDimensions.outerHeight;\n\n  var _useGeoMap = useGeoMap({\n    width: width,\n    height: height,\n    projectionType: projectionType,\n    projectionScale: projectionScale,\n    projectionTranslation: projectionTranslation,\n    projectionRotation: projectionRotation,\n    fillColor: function fillColor() {},\n    borderWidth: borderWidth,\n    borderColor: borderColor\n  }),\n      graticule = _useGeoMap.graticule,\n      path = _useGeoMap.path,\n      getBorderWidth = _useGeoMap.getBorderWidth,\n      getBorderColor = _useGeoMap.getBorderColor;\n\n  var _useChoropleth = useChoropleth({\n    features: features,\n    data: data,\n    match: match,\n    label: label,\n    value: value,\n    valueFormat: valueFormat,\n    colors: colors,\n    unknownColor: unknownColor,\n    domain: domain\n  }),\n      getFillColor = _useChoropleth.getFillColor,\n      boundFeatures = _useChoropleth.boundFeatures,\n      legendData = _useChoropleth.legendData;\n\n  var theme = useTheme();\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var handleClick = useCallback(function (feature, event) {\n    return isInteractive && onClick && onClick(feature, event);\n  }, [isInteractive, onClick]);\n  var handleMouseEnter = useCallback(function (feature, event) {\n    return isInteractive && Tooltip && showTooltipFromEvent(React.createElement(Tooltip, {\n      feature: feature\n    }), event);\n  }, [isInteractive, showTooltipFromEvent, Tooltip]);\n  var handleMouseMove = useCallback(function (feature, event) {\n    return isInteractive && Tooltip && showTooltipFromEvent(React.createElement(Tooltip, {\n      feature: feature\n    }), event);\n  }, [isInteractive, showTooltipFromEvent, Tooltip]);\n  var handleMouseLeave = useCallback(function () {\n    return isInteractive && hideTooltip();\n  }, [isInteractive, hideTooltip]);\n  return React.createElement(SvgWrapper, {\n    width: outerWidth,\n    height: outerHeight,\n    margin: margin,\n    theme: theme,\n    role: role\n  }, layers.map(function (layer, i) {\n    if (layer === 'graticule') {\n      if (enableGraticule !== true) return null;\n      return React.createElement(GeoGraticule, {\n        key: \"graticule\",\n        path: path,\n        graticule: graticule,\n        lineWidth: graticuleLineWidth,\n        lineColor: graticuleLineColor\n      });\n    }\n\n    if (layer === 'features') {\n      return React.createElement(Fragment, {\n        key: \"features\"\n      }, boundFeatures.map(function (feature) {\n        return React.createElement(GeoMapFeature, {\n          key: feature.id,\n          feature: feature,\n          path: path,\n          fillColor: getFillColor(feature),\n          borderWidth: getBorderWidth(feature),\n          borderColor: getBorderColor(feature),\n          onMouseEnter: handleMouseEnter,\n          onMouseMove: handleMouseMove,\n          onMouseLeave: handleMouseLeave,\n          onClick: handleClick\n        });\n      }));\n    }\n\n    if (layer === 'legends') {\n      return legends.map(function (legend, i) {\n        return React.createElement(BoxLegendSvg, Object.assign({\n          key: i,\n          containerWidth: width,\n          containerHeight: height,\n          data: legendData\n        }, legend));\n      });\n    }\n\n    return React.createElement(Fragment, {\n      key: i\n    }, layer({}));\n  }));\n});\nChoropleth.displayName = 'Choropleth';\nChoropleth.defaultProps = ChoroplethDefaultProps;\nvar Choropleth$1 = withContainer(Choropleth);\n\nvar ResponsiveChoropleth = function ResponsiveChoropleth(props) {\n  return React.createElement(ResponsiveWrapper, null, function (_ref) {\n    var width = _ref.width,\n        height = _ref.height;\n    return React.createElement(Choropleth$1, Object.assign({\n      width: width,\n      height: height\n    }, props));\n  });\n};\n\nvar getFeatureFromMouseEvent$1 = function getFeatureFromMouseEvent(event, el, features, projection) {\n  var _getRelativeCursor = getRelativeCursor(el, event),\n      _getRelativeCursor2 = _slicedToArray(_getRelativeCursor, 2),\n      x = _getRelativeCursor2[0],\n      y = _getRelativeCursor2[1];\n\n  return features.find(function (f) {\n    return geoContains(f, projection.invert([x, y]));\n  });\n};\n\nvar ChoroplethCanvas = memo(function (_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      partialMargin = _ref.margin,\n      pixelRatio = _ref.pixelRatio,\n      features = _ref.features,\n      data = _ref.data,\n      match = _ref.match,\n      label = _ref.label,\n      value = _ref.value,\n      valueFormat = _ref.valueFormat,\n      projectionType = _ref.projectionType,\n      projectionScale = _ref.projectionScale,\n      projectionTranslation = _ref.projectionTranslation,\n      projectionRotation = _ref.projectionRotation,\n      colors = _ref.colors,\n      domain = _ref.domain,\n      unknownColor = _ref.unknownColor,\n      borderWidth = _ref.borderWidth,\n      borderColor = _ref.borderColor,\n      enableGraticule = _ref.enableGraticule,\n      graticuleLineWidth = _ref.graticuleLineWidth,\n      graticuleLineColor = _ref.graticuleLineColor,\n      layers = _ref.layers,\n      legends = _ref.legends,\n      isInteractive = _ref.isInteractive,\n      onClick = _ref.onClick,\n      onMouseMove = _ref.onMouseMove,\n      Tooltip = _ref.tooltip;\n  var canvasEl = useRef(null);\n  var theme = useTheme();\n\n  var _useDimensions = useDimensions(width, height, partialMargin),\n      margin = _useDimensions.margin,\n      outerWidth = _useDimensions.outerWidth,\n      outerHeight = _useDimensions.outerHeight;\n\n  var _useGeoMap = useGeoMap({\n    width: width,\n    height: height,\n    projectionType: projectionType,\n    projectionScale: projectionScale,\n    projectionTranslation: projectionTranslation,\n    projectionRotation: projectionRotation,\n    fillColor: function fillColor() {},\n    borderWidth: borderWidth,\n    borderColor: borderColor\n  }),\n      projection = _useGeoMap.projection,\n      graticule = _useGeoMap.graticule,\n      path = _useGeoMap.path,\n      getBorderWidth = _useGeoMap.getBorderWidth,\n      getBorderColor = _useGeoMap.getBorderColor;\n\n  var _useChoropleth = useChoropleth({\n    features: features,\n    data: data,\n    match: match,\n    label: label,\n    value: value,\n    valueFormat: valueFormat,\n    colors: colors,\n    unknownColor: unknownColor,\n    domain: domain\n  }),\n      getFillColor = _useChoropleth.getFillColor,\n      boundFeatures = _useChoropleth.boundFeatures,\n      legendData = _useChoropleth.legendData;\n\n  useEffect(function () {\n    if (!canvasEl) return;\n    canvasEl.current.width = outerWidth * pixelRatio;\n    canvasEl.current.height = outerHeight * pixelRatio;\n    var ctx = canvasEl.current.getContext('2d');\n    ctx.scale(pixelRatio, pixelRatio);\n    ctx.fillStyle = theme.background;\n    ctx.fillRect(0, 0, outerWidth, outerHeight);\n    ctx.translate(margin.left, margin.top);\n    path.context(ctx);\n    layers.forEach(function (layer) {\n      if (layer === 'graticule') {\n        if (enableGraticule === true) {\n          ctx.lineWidth = graticuleLineWidth;\n          ctx.strokeStyle = graticuleLineColor;\n          ctx.beginPath();\n          path(graticule());\n          ctx.stroke();\n        }\n      } else if (layer === 'features') {\n        boundFeatures.forEach(function (feature) {\n          ctx.beginPath();\n          path(feature);\n          ctx.fillStyle = getFillColor(feature);\n          ctx.fill();\n          var borderWidth = getBorderWidth(feature);\n\n          if (borderWidth > 0) {\n            ctx.strokeStyle = getBorderColor(feature);\n            ctx.lineWidth = borderWidth;\n            ctx.stroke();\n          }\n        });\n      } else if (layer === 'legends') {\n        legends.forEach(function (legend) {\n          renderLegendToCanvas(ctx, _objectSpread2(_objectSpread2({}, legend), {}, {\n            data: legendData,\n            containerWidth: width,\n            containerHeight: height,\n            theme: theme\n          }));\n        });\n      }\n    });\n  }, [canvasEl, outerWidth, outerHeight, margin, pixelRatio, theme, path, graticule, getFillColor, getBorderWidth, getBorderColor, boundFeatures, legends, layers]);\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var handleMouseMove = useCallback(function (event) {\n    if (!isInteractive || !Tooltip) return;\n    var feature = getFeatureFromMouseEvent$1(event, canvasEl.current, boundFeatures, projection);\n\n    if (feature) {\n      showTooltipFromEvent(React.createElement(Tooltip, {\n        feature: feature\n      }), event);\n    } else {\n      hideTooltip();\n    }\n\n    onMouseMove && onMouseMove(feature || null, event);\n  }, [showTooltipFromEvent, hideTooltip, isInteractive, Tooltip, canvasEl, boundFeatures, projection]);\n  var handleMouseLeave = useCallback(function () {\n    return isInteractive && hideTooltip();\n  }, [isInteractive, hideTooltip]);\n  var handleClick = useCallback(function (event) {\n    if (!isInteractive || !onClick) return;\n    var feature = getFeatureFromMouseEvent$1(event, canvasEl.current, boundFeatures, projection);\n\n    if (feature) {\n      onClick(feature, event);\n    }\n  }, [isInteractive, canvasEl, boundFeatures, projection, onClick]);\n  return React.createElement(\"canvas\", {\n    ref: canvasEl,\n    width: outerWidth * pixelRatio,\n    height: outerHeight * pixelRatio,\n    style: {\n      width: outerWidth,\n      height: outerHeight,\n      cursor: isInteractive ? 'auto' : 'normal'\n    },\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    onClick: handleClick\n  });\n});\nChoroplethCanvas.displayName = 'ChoroplethCanvas';\nChoroplethCanvas.defaultProps = ChoroplethCanvasDefaultProps;\nvar ChoroplethCanvas$1 = withContainer(ChoroplethCanvas);\n\nvar ResponsiveChoroplethCanvas = function ResponsiveChoroplethCanvas(props) {\n  return React.createElement(ResponsiveWrapper, null, function (_ref) {\n    var width = _ref.width,\n        height = _ref.height;\n    return React.createElement(ChoroplethCanvas$1, Object.assign({\n      width: width,\n      height: height\n    }, props));\n  });\n};\n\nexport { Choropleth$1 as Choropleth, ChoroplethCanvas$1 as ChoroplethCanvas, ChoroplethCanvasDefaultProps, ChoroplethCanvasPropTypes, ChoroplethDefaultProps, ChoroplethPropTypes, GeoMap$1 as GeoMap, GeoMapCanvas$1 as GeoMapCanvas, GeoMapCanvasDefaultProps, GeoMapCanvasPropTypes, GeoMapDefaultProps, GeoMapPropTypes, ResponsiveChoropleth, ResponsiveChoroplethCanvas, ResponsiveGeoMap, ResponsiveGeoMapCanvas, projectionById, useChoropleth, useGeoMap };","map":{"version":3,"sources":["../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../src/hooks.js","../src/ChoroplethTooltip.js","../src/props.js","../src/GeoGraticule.js","../src/GeoMapFeature.js","../src/GeoMap.js","../src/ResponsiveGeoMap.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../src/GeoMapCanvas.js","../src/ResponsiveGeoMapCanvas.js","../src/Choropleth.js","../src/ResponsiveChoropleth.js","../src/ChoroplethCanvas.js","../src/ResponsiveChoroplethCanvas.js"],"names":["defineProperty","projectionById","azimuthalEqualArea","azimuthalEquidistant","gnomonic","orthographic","stereographic","equalEarth","equirectangular","mercator","transverseMercator","naturalEarth1","geoNaturalEarth1","useGeoMap","width","height","projectionType","projectionScale","projectionTranslation","projectionRotation","fillColor","borderWidth","borderColor","projection","useMemo","path","geoPath","graticule","geoGraticule","theme","useTheme","getBorderWidth","getBorderColor","useInheritedColor","getFillColor","useChoropleth","features","data","match","label","value","valueFormat","colors","unknownColor","domain","findMatchingDatum","featureKey","datumKey","getLabel","getValue","valueFormatter","format","colorScale","guessQuantizeColorScale","feature","boundFeatures","datum","datumValue","featureWithData","formattedValue","legendData","useQuantizeColorScaleLegendData","scale","ChoroplethTooltip","memo","commonPropTypes","id","PropTypes","type","properties","geometry","isRequired","Object","inheritedColorPropType","enableGraticule","graticuleLineWidth","graticuleLineColor","isInteractive","onMouseEnter","onMouseMove","onMouseLeave","onClick","tooltip","layers","GeoMapPropTypes","role","GeoMapCanvasPropTypes","pixelRatio","commonChoroplethPropTypes","quantizeColorScalePropType","ChoroplethPropTypes","ChoroplethCanvasPropTypes","commonDefaultProps","legends","GeoMapDefaultProps","GeoMapCanvasDefaultProps","window","commonChoroplethDefaultProps","ChoroplethDefaultProps","ChoroplethCanvasDefaultProps","GeoGraticule","lineWidth","lineColor","GeoMapFeature","GeoMap","partialMargin","Tooltip","props","margin","outerWidth","outerHeight","useDimensions","showTooltipFromEvent","hideTooltip","useTooltip","handleClick","useCallback","handleMouseEnter","handleMouseMove","handleMouseLeave","layer","i","withContainer","ResponsiveGeoMap","arrayLikeToArray","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","getFeatureFromMouseEvent","x","y","getRelativeCursor","geoContains","GeoMapCanvas","canvasEl","useRef","useEffect","ctx","cursor","ResponsiveGeoMapCanvas","Choropleth","ResponsiveChoropleth","ChoroplethCanvas","renderLegendToCanvas","containerWidth","containerHeight","ResponsiveChoroplethCanvas"],"mappings":"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","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useMemo } from 'react'\nimport { isFunction, get } from 'lodash'\nimport { format } from 'd3-format'\nimport {\n    geoPath,\n    geoAzimuthalEqualArea,\n    geoAzimuthalEquidistant,\n    geoGnomonic,\n    geoOrthographic,\n    geoStereographic,\n    geoEqualEarth,\n    geoEquirectangular,\n    geoMercator,\n    geoTransverseMercator,\n    geoNaturalEarth1,\n    geoGraticule,\n} from 'd3-geo'\nimport { guessQuantizeColorScale, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useQuantizeColorScaleLegendData } from '@nivo/legends'\n\nexport const projectionById = {\n    azimuthalEqualArea: geoAzimuthalEqualArea,\n    azimuthalEquidistant: geoAzimuthalEquidistant,\n    gnomonic: geoGnomonic,\n    orthographic: geoOrthographic,\n    stereographic: geoStereographic,\n    equalEarth: geoEqualEarth,\n    equirectangular: geoEquirectangular,\n    mercator: geoMercator,\n    transverseMercator: geoTransverseMercator,\n    naturalEarth1: geoNaturalEarth1,\n}\n\nexport const useGeoMap = ({\n    width,\n    height,\n    projectionType,\n    projectionScale,\n    projectionTranslation,\n    projectionRotation,\n    fillColor,\n    borderWidth,\n    borderColor,\n}) => {\n    const projection = useMemo(() => {\n        return projectionById[projectionType]()\n            .scale(projectionScale)\n            .translate([width * projectionTranslation[0], height * projectionTranslation[1]])\n            .rotate(projectionRotation)\n    }, [\n        width,\n        height,\n        projectionType,\n        projectionScale,\n        projectionTranslation[0],\n        projectionTranslation[1],\n        projectionRotation[0],\n        projectionRotation[1],\n        projectionRotation[2],\n    ])\n    const path = useMemo(() => geoPath(projection), [projection])\n    const graticule = useMemo(() => geoGraticule())\n\n    const theme = useTheme()\n    const getBorderWidth = useMemo(\n        () => (typeof borderWidth === 'function' ? borderWidth : () => borderWidth),\n        [borderWidth]\n    )\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getFillColor = useMemo(\n        () => (typeof fillColor === 'function' ? fillColor : () => fillColor),\n        [fillColor]\n    )\n\n    return {\n        projection,\n        path,\n        graticule,\n        getBorderWidth,\n        getBorderColor,\n        getFillColor,\n    }\n}\n\nexport const useChoropleth = ({\n    features,\n    data,\n    match,\n    label,\n    value,\n    valueFormat,\n    colors,\n    unknownColor,\n    domain,\n}) => {\n    const findMatchingDatum = useMemo(() => {\n        if (isFunction(match)) return match\n        return (feature, datum) => {\n            const featureKey = get(feature, match)\n            const datumKey = get(datum, match)\n\n            return featureKey && featureKey === datumKey\n        }\n    }, [match])\n    const getLabel = useMemo(() => (isFunction(label) ? label : datum => get(datum, label)), [\n        label,\n    ])\n    const getValue = useMemo(() => (isFunction(value) ? value : datum => get(datum, value)), [\n        value,\n    ])\n    const valueFormatter = useMemo(() => {\n        if (valueFormat === undefined) return d => d\n        if (isFunction(valueFormat)) return valueFormat\n        return format(valueFormat)\n    }, [valueFormat])\n\n    const colorScale = useMemo(() => guessQuantizeColorScale(colors).domain(domain), [\n        colors,\n        domain,\n    ])\n    const getFillColor = useMemo(() => {\n        return feature => {\n            if (feature.value === undefined) return unknownColor\n            return colorScale(feature.value)\n        }\n    }, [colorScale, unknownColor])\n\n    const boundFeatures = useMemo(\n        () =>\n            features.map(feature => {\n                const datum = data.find(datum => findMatchingDatum(feature, datum))\n                const datumValue = getValue(datum)\n\n                if (datum) {\n                    const featureWithData = {\n                        ...feature,\n                        data: datum,\n                        value: datumValue,\n                        formattedValue: valueFormatter(datumValue),\n                    }\n                    featureWithData.color = getFillColor(featureWithData)\n                    featureWithData.label = getLabel(featureWithData)\n\n                    return featureWithData\n                }\n\n                return feature\n            }),\n        [features, data, findMatchingDatum, getValue, valueFormatter, getFillColor]\n    )\n\n    const legendData = useQuantizeColorScaleLegendData({\n        scale: colorScale,\n        valueFormat: valueFormatter,\n    })\n\n    return {\n        colorScale,\n        getFillColor,\n        boundFeatures,\n        valueFormatter,\n        legendData,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst ChoroplethTooltip = memo(({ feature }) => {\n    if (feature.data === undefined) return null\n\n    return (\n        <BasicTooltip\n            id={feature.label}\n            color={feature.color}\n            enableChip={true}\n            value={feature.formattedValue}\n        />\n    )\n})\n\nChoroplethTooltip.propTypes = {\n    feature: PropTypes.object.isRequired,\n}\n\nChoroplethTooltip.displayName = 'ChoroplethTooltip'\n\nexport default ChoroplethTooltip\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { quantizeColorScalePropType } from '@nivo/core'\nimport { inheritedColorPropType } from '@nivo/colors'\nimport { projectionById } from './hooks'\nimport ChoroplethTooltip from './ChoroplethTooltip'\n\nconst commonPropTypes = {\n    features: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            type: PropTypes.oneOf(['Feature']).isRequired,\n            properties: PropTypes.object,\n            geometry: PropTypes.object.isRequired,\n        })\n    ).isRequired,\n\n    projectionType: PropTypes.oneOf(Object.keys(projectionById)).isRequired,\n    projectionScale: PropTypes.number.isRequired,\n    projectionTranslation: PropTypes.arrayOf(PropTypes.number).isRequired,\n    projectionRotation: PropTypes.arrayOf(PropTypes.number).isRequired,\n\n    fillColor: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    borderWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n    borderColor: inheritedColorPropType.isRequired,\n\n    enableGraticule: PropTypes.bool.isRequired,\n    graticuleLineWidth: PropTypes.number.isRequired,\n    graticuleLineColor: PropTypes.string.isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func.isRequired,\n    onMouseMove: PropTypes.func.isRequired,\n    onMouseLeave: PropTypes.func.isRequired,\n    onClick: PropTypes.func.isRequired,\n    tooltip: PropTypes.any,\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.oneOf(['graticule', 'features']), PropTypes.func])\n    ).isRequired,\n}\n\nexport const GeoMapPropTypes = {\n    ...commonPropTypes,\n    role: PropTypes.string.isRequired,\n}\n\nexport const GeoMapCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonChoroplethPropTypes = {\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    match: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    valueFormat: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    colors: quantizeColorScalePropType.isRequired,\n    domain: PropTypes.arrayOf(PropTypes.number).isRequired,\n    unknownColor: PropTypes.string.isRequired,\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.oneOf(['graticule', 'features', 'legends']), PropTypes.func])\n    ).isRequired,\n}\n\nexport const ChoroplethPropTypes = {\n    ...GeoMapPropTypes,\n    ...commonChoroplethPropTypes,\n    role: PropTypes.string.isRequired,\n}\n\nexport const ChoroplethCanvasPropTypes = {\n    ...GeoMapCanvasPropTypes,\n    ...commonChoroplethPropTypes,\n}\n\nconst commonDefaultProps = {\n    projectionType: 'mercator',\n    projectionScale: 100,\n    projectionTranslation: [0.5, 0.5],\n    projectionRotation: [0, 0, 0],\n\n    enableGraticule: false,\n    graticuleLineWidth: 0.5,\n    graticuleLineColor: '#999999',\n\n    fillColor: '#dddddd',\n    borderWidth: 0,\n    borderColor: '#000000',\n\n    isInteractive: true,\n    onMouseEnter: () => {},\n    onMouseLeave: () => {},\n    onMouseMove: () => {},\n    onClick: () => {},\n\n    layers: ['graticule', 'features'],\n    legends: [],\n}\n\nexport const GeoMapDefaultProps = {\n    ...commonDefaultProps,\n    role: 'img',\n}\n\nexport const GeoMapCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n\nconst commonChoroplethDefaultProps = {\n    match: 'id',\n    label: 'id',\n    value: 'value',\n    colors: 'PuBuGn',\n    unknownColor: '#999',\n    tooltip: ChoroplethTooltip,\n    layers: ['graticule', 'features', 'legends'],\n}\n\nexport const ChoroplethDefaultProps = {\n    ...GeoMapDefaultProps,\n    ...commonChoroplethDefaultProps,\n    role: 'img',\n}\n\nexport const ChoroplethCanvasDefaultProps = {\n    ...GeoMapCanvasDefaultProps,\n    ...commonChoroplethDefaultProps,\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst GeoGraticule = memo(({ path, graticule, lineWidth, lineColor }) => {\n    return <path fill=\"none\" strokeWidth={lineWidth} stroke={lineColor} d={path(graticule())} />\n})\n\nGeoGraticule.propTypes = {\n    path: PropTypes.func.isRequired,\n    graticule: PropTypes.func.isRequired,\n    lineWidth: PropTypes.number.isRequired,\n    lineColor: PropTypes.string.isRequired,\n}\n\nGeoGraticule.displayName = 'GeoGraticule'\n\nexport default GeoGraticule\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst GeoMapFeature = memo(\n    ({\n        feature,\n        path,\n        fillColor,\n        borderWidth,\n        borderColor,\n        onClick,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n    }) => {\n        return (\n            <path\n                key={feature.id}\n                fill={fillColor}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                strokeLinejoin=\"bevel\"\n                d={path(feature)}\n                onMouseEnter={event => onMouseEnter(feature, event)}\n                onMouseMove={event => onMouseMove(feature, event)}\n                onMouseLeave={event => onMouseLeave(feature, event)}\n                onClick={event => onClick(feature, event)}\n            />\n        )\n    }\n)\n\nGeoMapFeature.propTypes = {\n    feature: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        type: PropTypes.oneOf(['Feature']).isRequired,\n        properties: PropTypes.object,\n        geometry: PropTypes.object.isRequired,\n    }).isRequired,\n    path: PropTypes.func.isRequired,\n\n    fillColor: PropTypes.string.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.string.isRequired,\n\n    onMouseEnter: PropTypes.func.isRequired,\n    onMouseMove: PropTypes.func.isRequired,\n    onMouseLeave: PropTypes.func.isRequired,\n    onClick: PropTypes.func.isRequired,\n}\n\nGeoMapFeature.displayName = 'GeoMapFeature'\n\nexport default GeoMapFeature\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { Fragment, useCallback, memo } from 'react'\nimport { SvgWrapper, withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { GeoMapPropTypes, GeoMapDefaultProps } from './props'\nimport GeoGraticule from './GeoGraticule'\nimport GeoMapFeature from './GeoMapFeature'\nimport { useGeoMap } from './hooks'\n\nconst GeoMap = memo(props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        features,\n        layers,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        fillColor,\n        borderWidth,\n        borderColor,\n        enableGraticule,\n        graticuleLineWidth,\n        graticuleLineColor,\n        isInteractive,\n        onClick,\n        tooltip: Tooltip,\n        role,\n    } = props\n    const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n    const { graticule, path, getFillColor, getBorderWidth, getBorderColor } = useGeoMap({\n        width,\n        height,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        fillColor,\n        borderWidth,\n        borderColor,\n    })\n\n    const theme = useTheme()\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleClick = useCallback(\n        (feature, event) => isInteractive && onClick && onClick(feature, event),\n        [isInteractive, onClick]\n    )\n    const handleMouseEnter = useCallback(\n        (feature, event) =>\n            isInteractive && Tooltip && showTooltipFromEvent(<Tooltip feature={feature} />, event),\n        [isInteractive, showTooltipFromEvent, Tooltip]\n    )\n    const handleMouseMove = useCallback(\n        (feature, event) =>\n            isInteractive && Tooltip && showTooltipFromEvent(<Tooltip feature={feature} />, event),\n        [isInteractive, showTooltipFromEvent, Tooltip]\n    )\n    const handleMouseLeave = useCallback(() => isInteractive && hideTooltip(), [\n        isInteractive,\n        hideTooltip,\n    ])\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            theme={theme}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layer === 'graticule') {\n                    if (enableGraticule !== true) return null\n\n                    return (\n                        <GeoGraticule\n                            key=\"graticule\"\n                            path={path}\n                            graticule={graticule}\n                            lineWidth={graticuleLineWidth}\n                            lineColor={graticuleLineColor}\n                        />\n                    )\n                }\n                if (layer === 'features') {\n                    return (\n                        <Fragment key=\"features\">\n                            {features.map(feature => (\n                                <GeoMapFeature\n                                    key={feature.id}\n                                    feature={feature}\n                                    path={path}\n                                    fillColor={getFillColor(feature)}\n                                    borderWidth={getBorderWidth(feature)}\n                                    borderColor={getBorderColor(feature)}\n                                    onMouseEnter={handleMouseEnter}\n                                    onMouseMove={handleMouseMove}\n                                    onMouseLeave={handleMouseLeave}\n                                    onClick={handleClick}\n                                />\n                            ))}\n                        </Fragment>\n                    )\n                }\n\n                return <Fragment key={i}>{layer(props)}</Fragment>\n            })}\n        </SvgWrapper>\n    )\n})\n\nGeoMap.displayName = 'GeoMap'\nGeoMap.propTypes = GeoMapPropTypes\nGeoMap.defaultProps = GeoMapDefaultProps\n\nexport default withContainer(GeoMap)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport GeoMap from './GeoMap'\n\nconst ResponsiveGeoMap = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <GeoMap width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveGeoMap\n","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo, useRef, useEffect, useCallback } from 'react'\nimport { geoContains } from 'd3-geo'\nimport { getRelativeCursor, withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { GeoMapCanvasDefaultProps, GeoMapCanvasPropTypes } from './props'\nimport { useGeoMap } from './hooks'\n\nconst getFeatureFromMouseEvent = (event, el, features, projection) => {\n    const [x, y] = getRelativeCursor(el, event)\n\n    return features.find(f => geoContains(f, projection.invert([x, y])))\n}\n\nconst GeoMapCanvas = memo(props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio,\n        features,\n        layers,\n\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n\n        fillColor,\n        borderWidth,\n        borderColor,\n\n        enableGraticule,\n        graticuleLineWidth,\n        graticuleLineColor,\n\n        isInteractive,\n        onClick,\n        onMouseMove,\n        tooltip: Tooltip,\n    } = props\n\n    const canvasEl = useRef(null)\n    const theme = useTheme()\n    const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n    const { projection, graticule, path, getFillColor, getBorderWidth, getBorderColor } = useGeoMap(\n        {\n            width,\n            height,\n            projectionType,\n            projectionScale,\n            projectionTranslation,\n            projectionRotation,\n            fillColor,\n            borderWidth,\n            borderColor,\n        }\n    )\n\n    useEffect(() => {\n        if (!canvasEl) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        path.context(ctx)\n\n        layers.forEach(layer => {\n            if (layer === 'graticule') {\n                if (enableGraticule === true) {\n                    ctx.lineWidth = graticuleLineWidth\n                    ctx.strokeStyle = graticuleLineColor\n                    ctx.beginPath()\n                    path(graticule())\n                    ctx.stroke()\n                }\n            } else if (layer === 'features') {\n                features.forEach(feature => {\n                    ctx.beginPath()\n                    path(feature)\n                    ctx.fillStyle = getFillColor(feature)\n                    ctx.fill()\n\n                    const borderWidth = getBorderWidth(feature)\n                    if (borderWidth > 0) {\n                        ctx.strokeStyle = getBorderColor(feature)\n                        ctx.lineWidth = borderWidth\n                        ctx.stroke()\n                    }\n                })\n            } else {\n                layer(ctx, props)\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        margin,\n        pixelRatio,\n        theme,\n        path,\n        graticule,\n        getFillColor,\n        getBorderWidth,\n        getBorderColor,\n        features,\n        layers,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseMove = useCallback(\n        event => {\n            if (!isInteractive || !Tooltip) return\n\n            const feature = getFeatureFromMouseEvent(event, canvasEl.current, features, projection)\n            if (feature) {\n                showTooltipFromEvent(<Tooltip feature={feature} />, event)\n            } else {\n                hideTooltip()\n            }\n            onMouseMove && onMouseMove(feature || null, event)\n        },\n        [showTooltipFromEvent, hideTooltip, isInteractive, Tooltip, canvasEl, features, projection]\n    )\n    const handleMouseLeave = useCallback(() => isInteractive && hideTooltip(), [\n        isInteractive,\n        hideTooltip,\n    ])\n    const handleClick = useCallback(\n        event => {\n            if (!isInteractive || !onClick) return\n\n            const feature = getFeatureFromMouseEvent(event, canvasEl.current, features, projection)\n            if (feature) {\n                onClick(feature, event)\n            }\n        },\n        [isInteractive, canvasEl, features, projection, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n        />\n    )\n})\n\nGeoMapCanvas.displatName = 'GeoMapCanvas'\nGeoMapCanvas.propTypes = GeoMapCanvasPropTypes\nGeoMapCanvas.defaultProps = GeoMapCanvasDefaultProps\n\nexport default withContainer(GeoMapCanvas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport GeoMapCanvas from './GeoMapCanvas'\n\nconst ResponsiveGeoMapCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <GeoMapCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveGeoMapCanvas\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo, Fragment, useCallback } from 'react'\nimport { SvgWrapper, withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ChoroplethPropTypes, ChoroplethDefaultProps } from './props'\nimport GeoGraticule from './GeoGraticule'\nimport GeoMapFeature from './GeoMapFeature'\nimport { useGeoMap, useChoropleth } from './hooks'\n\nconst Choropleth = memo(\n    ({\n        width,\n        height,\n        margin: partialMargin,\n        features,\n        data,\n        match,\n        label,\n        value,\n        valueFormat,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        colors,\n        domain,\n        unknownColor,\n        borderWidth,\n        borderColor,\n        enableGraticule,\n        graticuleLineWidth,\n        graticuleLineColor,\n        layers,\n        legends,\n        isInteractive,\n        onClick,\n        tooltip: Tooltip,\n        role,\n    }) => {\n        const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n        const { graticule, path, getBorderWidth, getBorderColor } = useGeoMap({\n            width,\n            height,\n            projectionType,\n            projectionScale,\n            projectionTranslation,\n            projectionRotation,\n            fillColor: () => {},\n            borderWidth,\n            borderColor,\n        })\n        const { getFillColor, boundFeatures, legendData } = useChoropleth({\n            features,\n            data,\n            match,\n            label,\n            value,\n            valueFormat,\n            colors,\n            unknownColor,\n            domain,\n        })\n\n        const theme = useTheme()\n\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n        const handleClick = useCallback(\n            (feature, event) => isInteractive && onClick && onClick(feature, event),\n            [isInteractive, onClick]\n        )\n        const handleMouseEnter = useCallback(\n            (feature, event) =>\n                isInteractive &&\n                Tooltip &&\n                showTooltipFromEvent(<Tooltip feature={feature} />, event),\n            [isInteractive, showTooltipFromEvent, Tooltip]\n        )\n        const handleMouseMove = useCallback(\n            (feature, event) =>\n                isInteractive &&\n                Tooltip &&\n                showTooltipFromEvent(<Tooltip feature={feature} />, event),\n            [isInteractive, showTooltipFromEvent, Tooltip]\n        )\n        const handleMouseLeave = useCallback(() => isInteractive && hideTooltip(), [\n            isInteractive,\n            hideTooltip,\n        ])\n\n        return (\n            <SvgWrapper\n                width={outerWidth}\n                height={outerHeight}\n                margin={margin}\n                theme={theme}\n                role={role}\n            >\n                {layers.map((layer, i) => {\n                    if (layer === 'graticule') {\n                        if (enableGraticule !== true) return null\n\n                        return (\n                            <GeoGraticule\n                                key=\"graticule\"\n                                path={path}\n                                graticule={graticule}\n                                lineWidth={graticuleLineWidth}\n                                lineColor={graticuleLineColor}\n                            />\n                        )\n                    }\n                    if (layer === 'features') {\n                        return (\n                            <Fragment key=\"features\">\n                                {boundFeatures.map(feature => (\n                                    <GeoMapFeature\n                                        key={feature.id}\n                                        feature={feature}\n                                        path={path}\n                                        fillColor={getFillColor(feature)}\n                                        borderWidth={getBorderWidth(feature)}\n                                        borderColor={getBorderColor(feature)}\n                                        onMouseEnter={handleMouseEnter}\n                                        onMouseMove={handleMouseMove}\n                                        onMouseLeave={handleMouseLeave}\n                                        onClick={handleClick}\n                                    />\n                                ))}\n                            </Fragment>\n                        )\n                    }\n                    if (layer === 'legends') {\n                        return legends.map((legend, i) => {\n                            return (\n                                <BoxLegendSvg\n                                    key={i}\n                                    containerWidth={width}\n                                    containerHeight={height}\n                                    data={legendData}\n                                    {...legend}\n                                />\n                            )\n                        })\n                    }\n\n                    return <Fragment key={i}>{layer({})}</Fragment>\n                })}\n            </SvgWrapper>\n        )\n    }\n)\n\nChoropleth.displayName = 'Choropleth'\nChoropleth.propTypes = ChoroplethPropTypes\nChoropleth.defaultProps = ChoroplethDefaultProps\n\nexport default withContainer(Choropleth)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Choropleth from './Choropleth'\n\nconst ResponsiveChoropleth = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Choropleth width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveChoropleth\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo, useRef, useEffect, useCallback } from 'react'\nimport { geoContains } from 'd3-geo'\nimport { getRelativeCursor, withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ChoroplethCanvasDefaultProps, ChoroplethCanvasPropTypes } from './props'\nimport { useGeoMap, useChoropleth } from './hooks'\n\nconst getFeatureFromMouseEvent = (event, el, features, projection) => {\n    const [x, y] = getRelativeCursor(el, event)\n\n    return features.find(f => geoContains(f, projection.invert([x, y])))\n}\n\nconst ChoroplethCanvas = memo(\n    ({\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio,\n        features,\n        data,\n        match,\n        label,\n        value,\n        valueFormat,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        colors,\n        domain,\n        unknownColor,\n        borderWidth,\n        borderColor,\n        enableGraticule,\n        graticuleLineWidth,\n        graticuleLineColor,\n        layers,\n        legends,\n        isInteractive,\n        onClick,\n        onMouseMove,\n        tooltip: Tooltip,\n    }) => {\n        const canvasEl = useRef(null)\n        const theme = useTheme()\n        const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n        const { projection, graticule, path, getBorderWidth, getBorderColor } = useGeoMap({\n            width,\n            height,\n            projectionType,\n            projectionScale,\n            projectionTranslation,\n            projectionRotation,\n            fillColor: () => {},\n            borderWidth,\n            borderColor,\n        })\n        const { getFillColor, boundFeatures, legendData } = useChoropleth({\n            features,\n            data,\n            match,\n            label,\n            value,\n            valueFormat,\n            colors,\n            unknownColor,\n            domain,\n        })\n\n        useEffect(() => {\n            if (!canvasEl) return\n\n            canvasEl.current.width = outerWidth * pixelRatio\n            canvasEl.current.height = outerHeight * pixelRatio\n\n            const ctx = canvasEl.current.getContext('2d')\n\n            ctx.scale(pixelRatio, pixelRatio)\n\n            ctx.fillStyle = theme.background\n            ctx.fillRect(0, 0, outerWidth, outerHeight)\n            ctx.translate(margin.left, margin.top)\n\n            path.context(ctx)\n\n            layers.forEach(layer => {\n                if (layer === 'graticule') {\n                    if (enableGraticule === true) {\n                        ctx.lineWidth = graticuleLineWidth\n                        ctx.strokeStyle = graticuleLineColor\n                        ctx.beginPath()\n                        path(graticule())\n                        ctx.stroke()\n                    }\n                } else if (layer === 'features') {\n                    boundFeatures.forEach(feature => {\n                        ctx.beginPath()\n                        path(feature)\n                        ctx.fillStyle = getFillColor(feature)\n                        ctx.fill()\n\n                        const borderWidth = getBorderWidth(feature)\n                        if (borderWidth > 0) {\n                            ctx.strokeStyle = getBorderColor(feature)\n                            ctx.lineWidth = borderWidth\n                            ctx.stroke()\n                        }\n                    })\n                } else if (layer === 'legends') {\n                    legends.forEach(legend => {\n                        renderLegendToCanvas(ctx, {\n                            ...legend,\n                            data: legendData,\n                            containerWidth: width,\n                            containerHeight: height,\n                            theme,\n                        })\n                    })\n                } else {\n                    // layer(ctx, {})\n                }\n            })\n        }, [\n            canvasEl,\n            outerWidth,\n            outerHeight,\n            margin,\n            pixelRatio,\n            theme,\n            path,\n            graticule,\n            getFillColor,\n            getBorderWidth,\n            getBorderColor,\n            boundFeatures,\n            legends,\n            layers,\n        ])\n\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n        const handleMouseMove = useCallback(\n            event => {\n                if (!isInteractive || !Tooltip) return\n\n                const feature = getFeatureFromMouseEvent(\n                    event,\n                    canvasEl.current,\n                    boundFeatures,\n                    projection\n                )\n                if (feature) {\n                    showTooltipFromEvent(<Tooltip feature={feature} />, event)\n                } else {\n                    hideTooltip()\n                }\n                onMouseMove && onMouseMove(feature || null, event)\n            },\n            [\n                showTooltipFromEvent,\n                hideTooltip,\n                isInteractive,\n                Tooltip,\n                canvasEl,\n                boundFeatures,\n                projection,\n            ]\n        )\n        const handleMouseLeave = useCallback(() => isInteractive && hideTooltip(), [\n            isInteractive,\n            hideTooltip,\n        ])\n        const handleClick = useCallback(\n            event => {\n                if (!isInteractive || !onClick) return\n\n                const feature = getFeatureFromMouseEvent(\n                    event,\n                    canvasEl.current,\n                    boundFeatures,\n                    projection\n                )\n                if (feature) {\n                    onClick(feature, event)\n                }\n            },\n            [isInteractive, canvasEl, boundFeatures, projection, onClick]\n        )\n\n        return (\n            <canvas\n                ref={canvasEl}\n                width={outerWidth * pixelRatio}\n                height={outerHeight * pixelRatio}\n                style={{\n                    width: outerWidth,\n                    height: outerHeight,\n                    cursor: isInteractive ? 'auto' : 'normal',\n                }}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        )\n    }\n)\n\nChoroplethCanvas.displayName = 'ChoroplethCanvas'\nChoroplethCanvas.propTypes = ChoroplethCanvasPropTypes\nChoroplethCanvas.defaultProps = ChoroplethCanvasDefaultProps\n\nexport default withContainer(ChoroplethCanvas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport ChoroplethCanvas from './ChoroplethCanvas'\n\nconst ResponsiveChoroplethCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ChoroplethCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveChoroplethCanvas\n"]},"metadata":{},"sourceType":"module"}