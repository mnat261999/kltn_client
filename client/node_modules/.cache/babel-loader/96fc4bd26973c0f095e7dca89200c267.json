{"ast":null,"code":"var _jsxFileName = \"D:\\\\Kltn\\\\test\\\\social-media\\\\client\\\\src\\\\components\\\\ultils\\\\Form\\\\FormField.js\";\nimport React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport faExclamation from '@fortawesome/fontawesome-free-solid/faExclamation';\nimport faSmile from '@fortawesome/fontawesome-free-solid/faSmile';\nimport TextInput from 'react-autocomplete-input';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\n\nclass FormField extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      emojiToggle: false,\n      selectedEmoji: ''\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        emojiToggle: !this.state.emojiToggle\n      });\n    };\n\n    this.addEmoji = e => {\n      const input = document.getElementById('description_textarea');\n      console.log(input.selectionStart);\n      const {\n        formData,\n        change,\n        id\n      } = this.props;\n      let event = e.native; //Copy icon \n\n      var textfield = document.createElement(\"input\");\n      textfield.type = \"text\";\n      textfield.value = event;\n      document.body.appendChild(textfield);\n      textfield.select();\n      textfield.setSelectionRange(0, 99999);\n      document.execCommand(\"copy\");\n      document.body.removeChild(textfield);\n    };\n\n    this.showError = () => {\n      const {\n        formData\n      } = this.props;\n\n      if (formData.validation && !formData.valid) {\n        if (formData.validationMessage) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n            icon: faExclamation,\n            style: {\n              marginRight: '10px'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 25\n            }\n          }), formData.validationMessage);\n        }\n      }\n    };\n\n    this.renderTemplate = () => {\n      const {\n        formData,\n        change,\n        id\n      } = this.props;\n      let formTemplate = null;\n\n      switch (formData.element) {\n        case 'input':\n          formTemplate = /*#__PURE__*/React.createElement(\"div\", {\n            className: \"formBlock\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 21\n            }\n          }, formData.showlabel ? /*#__PURE__*/React.createElement(\"div\", {\n            className: \"label_input\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }\n          }, formData.config.label) : null, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, formData.config, {\n            value: formData.value //sự kiện onBlur được dùng để validate required\n            ,\n            onBlur: event => change({\n              event,\n              id,\n              blur: true\n            }) //sự kiện change được dùng để validate email/password có pass đc Regex không\n            ,\n            onChange: event => change({\n              event,\n              id,\n              blur: true\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 25\n            }\n          })), /*#__PURE__*/React.createElement(\"div\", {\n            className: \"error_label\",\n            style: {\n              height: '20px',\n              fontSize: '15px',\n              marginTop: '5px',\n              marginBottom: '5px',\n              color: 'red',\n              textTransform: 'capitalize'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 25\n            }\n          }, this.showError()));\n          break;\n\n        case 'datetime':\n          formTemplate = /*#__PURE__*/React.createElement(\"div\", {\n            className: \"formBlock\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 21\n            }\n          }, formData.showlabel ? /*#__PURE__*/React.createElement(\"div\", {\n            className: \"label_input\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 29\n            }\n          }, formData.config.label) : null, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, formData.config, {\n            value: formData.value //sự kiện onBlur được dùng để validate required\n            ,\n            onBlur: event => change({\n              event,\n              id,\n              blur: true\n            }) //sự kiện change được dùng để validate email/password có pass đc Regex không\n            ,\n            onChange: event => change({\n              event,\n              id,\n              blur: true\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 25\n            }\n          })), /*#__PURE__*/React.createElement(\"div\", {\n            className: \"error_label\",\n            style: {\n              height: '20px',\n              fontSize: '15px',\n              marginTop: '5px',\n              marginBottom: '5px',\n              color: 'red',\n              textTransform: 'capitalize'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 25\n            }\n          }, this.showError()));\n          break;\n\n        case 'password':\n          formTemplate = /*#__PURE__*/React.createElement(\"div\", {\n            className: \"formBlock\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, formData.config, {\n            value: formData.value,\n            onBlur: event => change({\n              event,\n              id,\n              blur: true\n            }),\n            onChange: event => change({\n              event,\n              id,\n              blur: true\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 25\n            }\n          })), /*#__PURE__*/React.createElement(\"div\", {\n            className: \"error_label\",\n            style: {\n              height: '20px',\n              fontSize: '15px',\n              marginTop: '5px',\n              marginBottom: '5px',\n              color: 'red',\n              textTransform: 'capitalize'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 25\n            }\n          }, this.showError()));\n          break;\n        // case('select'):\n        //     formTemplate = (\n        //         <div className=\"formBlock\" >\n        //             {  \n        //                 formData.showlabel ?\n        //                 <div className=\"label_input\">{formData.config.label}</div>\n        //                 : null\n        //             }\n        //             <select\n        //                 value={formData.value}\n        //                 onBlur={(event) => change({ event, id, blur: true })}\n        //                 onChange={(event) => change({ event, id })}\n        //             >\n        //                 <option value=\"\">\n        //                     {\n        //                         id == \"nationality\"? \"Quốc tịch\":\n        //                         \"Select one\"\n        //                     }\n        //                 </option>\n        //                 {\n        //                     formData.config.options.map(item => (\n        //                             <option \n        //                                 key={item.key}\n        //                                 value={item.key}\n        //                             >\n        //                                 {item.value}\n        //                             </option>\n        //                        ))\n        //                 }\n        //             </select>\n        //              <div className=\"error_label\" style={{ height: '20px', fontSize: '15px', marginTop: '5px', marginBottom: '5px', color: 'red', textTransform: 'capitalize' }}>\n        //                 {this.showError()}\n        //             </div> \n        //         </div>\n        //     )\n        // break;\n\n        case 'textarea':\n          formTemplate = /*#__PURE__*/React.createElement(\"div\", {\n            className: \"formBlock\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 21\n            }\n          }, formData.showlabel ? /*#__PURE__*/React.createElement(\"div\", {\n            className: \"label_input\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 29\n            }\n          }, formData.config.label) : null, /*#__PURE__*/React.createElement(\"textarea\", Object.assign({}, formData.config, {\n            value: formData.value,\n            onBlur: event => change({\n              event,\n              id,\n              blur: true\n            }),\n            onChange: event => change({\n              event,\n              id\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 25\n            }\n          })), this.showError());\n          break;\n\n        case 'description':\n          formTemplate = /*#__PURE__*/React.createElement(\"div\", {\n            className: \"formBlock\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            className: \"description_input\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(TextInput, {\n            id: \"description_textarea\",\n            className: \"description_textarea\",\n            placeholder: formData.config.placeholder,\n            options: formData.config.options,\n            defaultValue: formData.value,\n            trigger: \"#\",\n            onChange: event => {\n              console.log(event);\n              change({\n                event,\n                emojiInfo: {\n                  emoji: false\n                },\n                id\n              });\n            },\n            maxOptions: 7,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 29\n            }\n          }), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n            icon: faSmile,\n            class: \"emoji_button\",\n            onClick: this.handleChange,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 29\n            }\n          }), this.state.emojiToggle ? /*#__PURE__*/React.createElement(Picker, {\n            style: {\n              position: \"absolute\",\n              right: 0,\n              top: \"100%\"\n            },\n            onSelect: this.addEmoji,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 37\n            }\n          }) : null));\n          break;\n\n        case 'userTag':\n          formTemplate = /*#__PURE__*/React.createElement(\"div\", {\n            className: \"formBlock\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 21\n            }\n          }, formData.showlabel ? /*#__PURE__*/React.createElement(\"div\", {\n            className: \"label_input\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 33\n            }\n          }, formData.config.label) : null, /*#__PURE__*/React.createElement(TextInput, {\n            Component: \"input\",\n            placeholder: formData.config.placeholder,\n            options: formData.config.options,\n            trigger: \"@\",\n            defaultValue: formData.value // onChange={this.handleChange}\n            ,\n            onChange: event => {\n              console.log(event);\n              change({\n                event,\n                id\n              });\n            },\n            maxOptions: 7,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 25\n            }\n          }));\n          break;\n\n        case 'locationInput':\n          formTemplate = /*#__PURE__*/React.createElement(\"div\", {\n            className: \"formBlock\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 21\n            }\n          }, formData.showlabel ? /*#__PURE__*/React.createElement(\"div\", {\n            className: \"label_input\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 33\n            }\n          }, formData.config.label) : null, /*#__PURE__*/React.createElement(TextInput, {\n            Component: \"input\",\n            placeholder: formData.config.placeholder,\n            options: formData.config.options,\n            trigger: \"#\",\n            onChange: event => {\n              console.log(event);\n              change({\n                event,\n                id\n              });\n            },\n            maxOptions: 3,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 25\n            }\n          }));\n          break;\n\n        default:\n          formTemplate = null;\n      }\n\n      return formTemplate;\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"formField_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 13\n      }\n    }, this.renderTemplate());\n  }\n\n}\n\n;\nexport default FormField;","map":{"version":3,"sources":["D:/Kltn/test/social-media/client/src/components/ultils/Form/FormField.js"],"names":["React","Component","FontAwesomeIcon","faExclamation","faSmile","TextInput","Picker","FormField","state","emojiToggle","selectedEmoji","handleChange","e","setState","addEmoji","input","document","getElementById","console","log","selectionStart","formData","change","id","props","event","native","textfield","createElement","type","value","body","appendChild","select","setSelectionRange","execCommand","removeChild","showError","validation","valid","validationMessage","marginRight","renderTemplate","formTemplate","element","showlabel","config","label","blur","height","fontSize","marginTop","marginBottom","color","textTransform","placeholder","options","emojiInfo","emoji","position","right","top","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,aAAP,MAA0B,mDAA1B;AACA,OAAOC,OAAP,MAAoB,6CAApB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAO,+BAAP;AACA,SAASC,MAAT,QAAuB,YAAvB;;AAEA,MAAMC,SAAN,SAAwBN,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAE9BO,KAF8B,GAEtB;AACJC,MAAAA,WAAW,EAAE,KADT;AAEJC,MAAAA,aAAa,EAAE;AAFX,KAFsB;;AAAA,SAM9BC,YAN8B,GAMdC,CAAD,IAAO;AAClB,WAAKC,QAAL,CAAc;AAAEJ,QAAAA,WAAW,EAAE,CAAC,KAAKD,KAAL,CAAWC;AAA3B,OAAd;AACH,KAR6B;;AAAA,SAS9BK,QAT8B,GASnBF,CAAC,IAAI;AACZ,YAAMG,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,sBAAxB,CAAd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACK,cAAlB;AACA,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA,MAAZ;AAAoBC,QAAAA;AAApB,UAA2B,KAAKC,KAAtC;AACA,UAAIC,KAAK,GAAGb,CAAC,CAACc,MAAd,CAJY,CAKZ;;AACA,UAAIC,SAAS,GAAGX,QAAQ,CAACY,aAAT,CAAuB,OAAvB,CAAhB;AACAD,MAAAA,SAAS,CAACE,IAAV,GAAiB,MAAjB;AACAF,MAAAA,SAAS,CAACG,KAAV,GAAkBL,KAAlB;AACAT,MAAAA,QAAQ,CAACe,IAAT,CAAcC,WAAd,CAA0BL,SAA1B;AACAA,MAAAA,SAAS,CAACM,MAAV;AACAN,MAAAA,SAAS,CAACO,iBAAV,CAA4B,CAA5B,EAA+B,KAA/B;AACAlB,MAAAA,QAAQ,CAACmB,WAAT,CAAqB,MAArB;AACAnB,MAAAA,QAAQ,CAACe,IAAT,CAAcK,WAAd,CAA0BT,SAA1B;AACH,KAvB6B;;AAAA,SAyB9BU,SAzB8B,GAyBlB,MAAM;AACd,YAAM;AAAEhB,QAAAA;AAAF,UAAe,KAAKG,KAA1B;;AACA,UAAIH,QAAQ,CAACiB,UAAT,IAAuB,CAACjB,QAAQ,CAACkB,KAArC,EAA4C;AACxC,YAAIlB,QAAQ,CAACmB,iBAAb,EAAgC;AAC5B,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI,oBAAC,eAAD;AAAiB,YAAA,IAAI,EAAErC,aAAvB;AAAsC,YAAA,KAAK,EAAE;AAAEsC,cAAAA,WAAW,EAAE;AAAf,aAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKpB,QAAQ,CAACmB,iBAFd,CADJ;AAMH;AACJ;AACJ,KArC6B;;AAAA,SAuC9BE,cAvC8B,GAuCb,MAAM;AACnB,YAAM;AAAErB,QAAAA,QAAF;AAAYC,QAAAA,MAAZ;AAAoBC,QAAAA;AAApB,UAA2B,KAAKC,KAAtC;AACA,UAAImB,YAAY,GAAG,IAAnB;;AACA,cAAQtB,QAAQ,CAACuB,OAAjB;AACI,aAAM,OAAN;AACID,UAAAA,YAAY,gBACR;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACKtB,QAAQ,CAACwB,SAAT,gBACG;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA8BxB,QAAQ,CAACyB,MAAT,CAAgBC,KAA9C,CADH,GAEK,IAHV,eAKI,+CAAW1B,QAAQ,CAACyB,MAApB;AACI,YAAA,KAAK,EAAEzB,QAAQ,CAACS,KADpB,CAEI;AAFJ;AAGI,YAAA,MAAM,EAAGL,KAAD,IAAWH,MAAM,CAAC;AAAEG,cAAAA,KAAF;AAASF,cAAAA,EAAT;AAAayB,cAAAA,IAAI,EAAE;AAAnB,aAAD,CAH7B,CAII;AAJJ;AAKI,YAAA,QAAQ,EAAGvB,KAAD,IAAWH,MAAM,CAAC;AAAEG,cAAAA,KAAF;AAASF,cAAAA,EAAT;AAAayB,cAAAA,IAAI,EAAE;AAAnB,aAAD,CAL/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALJ,eAYI;AAAK,YAAA,SAAS,EAAC,aAAf;AAA6B,YAAA,KAAK,EAAE;AAAEC,cAAAA,MAAM,EAAE,MAAV;AAAkBC,cAAAA,QAAQ,EAAE,MAA5B;AAAoCC,cAAAA,SAAS,EAAE,KAA/C;AAAsDC,cAAAA,YAAY,EAAE,KAApE;AAA2EC,cAAAA,KAAK,EAAE,KAAlF;AAAyFC,cAAAA,aAAa,EAAE;AAAxG,aAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACK,KAAKjB,SAAL,EADL,CAZJ,CADJ;AAmBA;;AACJ,aAAM,UAAN;AACIM,UAAAA,YAAY,gBACR;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACKtB,QAAQ,CAACwB,SAAT,gBACG;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA8BxB,QAAQ,CAACyB,MAAT,CAAgBC,KAA9C,CADH,GAEK,IAHV,eAMI,+CAAW1B,QAAQ,CAACyB,MAApB;AACI,YAAA,KAAK,EAAEzB,QAAQ,CAACS,KADpB,CAEI;AAFJ;AAGI,YAAA,MAAM,EAAGL,KAAD,IAAWH,MAAM,CAAC;AAAEG,cAAAA,KAAF;AAASF,cAAAA,EAAT;AAAayB,cAAAA,IAAI,EAAE;AAAnB,aAAD,CAH7B,CAII;AAJJ;AAKI,YAAA,QAAQ,EAAGvB,KAAD,IAAWH,MAAM,CAAC;AAAEG,cAAAA,KAAF;AAASF,cAAAA,EAAT;AAAayB,cAAAA,IAAI,EAAE;AAAnB,aAAD,CAL/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aANJ,eAcI;AAAK,YAAA,SAAS,EAAC,aAAf;AAA6B,YAAA,KAAK,EAAE;AAAEC,cAAAA,MAAM,EAAE,MAAV;AAAkBC,cAAAA,QAAQ,EAAE,MAA5B;AAAoCC,cAAAA,SAAS,EAAE,KAA/C;AAAsDC,cAAAA,YAAY,EAAE,KAApE;AAA2EC,cAAAA,KAAK,EAAE,KAAlF;AAAyFC,cAAAA,aAAa,EAAE;AAAxG,aAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACK,KAAKjB,SAAL,EADL,CAdJ,CADJ;AAqBA;;AACJ,aAAM,UAAN;AACIM,UAAAA,YAAY,gBACR;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI,+CAAWtB,QAAQ,CAACyB,MAApB;AACI,YAAA,KAAK,EAAEzB,QAAQ,CAACS,KADpB;AAEI,YAAA,MAAM,EAAGL,KAAD,IAAWH,MAAM,CAAC;AAAEG,cAAAA,KAAF;AAASF,cAAAA,EAAT;AAAayB,cAAAA,IAAI,EAAE;AAAnB,aAAD,CAF7B;AAGI,YAAA,QAAQ,EAAGvB,KAAD,IAAWH,MAAM,CAAC;AAAEG,cAAAA,KAAF;AAASF,cAAAA,EAAT;AAAayB,cAAAA,IAAI,EAAE;AAAnB,aAAD,CAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,eAMI;AAAK,YAAA,SAAS,EAAC,aAAf;AAA6B,YAAA,KAAK,EAAE;AAAEC,cAAAA,MAAM,EAAE,MAAV;AAAkBC,cAAAA,QAAQ,EAAE,MAA5B;AAAoCC,cAAAA,SAAS,EAAE,KAA/C;AAAsDC,cAAAA,YAAY,EAAE,KAApE;AAA2EC,cAAAA,KAAK,EAAE,KAAlF;AAAyFC,cAAAA,aAAa,EAAE;AAAxG,aAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACK,KAAKjB,SAAL,EADL,CANJ,CADJ;AAaA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,aAAM,UAAN;AACIM,UAAAA,YAAY,gBACR;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACKtB,QAAQ,CAACwB,SAAT,gBACG;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA8BxB,QAAQ,CAACyB,MAAT,CAAgBC,KAA9C,CADH,GAEK,IAHV,eAKI,kDAAc1B,QAAQ,CAACyB,MAAvB;AACI,YAAA,KAAK,EAAEzB,QAAQ,CAACS,KADpB;AAEI,YAAA,MAAM,EAAGL,KAAD,IAAWH,MAAM,CAAC;AAAEG,cAAAA,KAAF;AAASF,cAAAA,EAAT;AAAayB,cAAAA,IAAI,EAAE;AAAnB,aAAD,CAF7B;AAGI,YAAA,QAAQ,EAAGvB,KAAD,IAAWH,MAAM,CAAC;AAAEG,cAAAA,KAAF;AAASF,cAAAA;AAAT,aAAD,CAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALJ,EAUK,KAAKc,SAAL,EAVL,CADJ;AAcA;;AACJ,aAAM,aAAN;AACIM,UAAAA,YAAY,gBACR;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI;AAAK,YAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI,oBAAC,SAAD;AACI,YAAA,EAAE,EAAC,sBADP;AAEI,YAAA,SAAS,EAAC,sBAFd;AAGI,YAAA,WAAW,EAAEtB,QAAQ,CAACyB,MAAT,CAAgBS,WAHjC;AAII,YAAA,OAAO,EAAElC,QAAQ,CAACyB,MAAT,CAAgBU,OAJ7B;AAKI,YAAA,YAAY,EAAEnC,QAAQ,CAACS,KAL3B;AAMI,YAAA,OAAO,EAAC,GANZ;AAOI,YAAA,QAAQ,EAAGL,KAAD,IAAW;AACjBP,cAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACAH,cAAAA,MAAM,CAAC;AAAEG,gBAAAA,KAAF;AAASgC,gBAAAA,SAAS,EAAE;AAAEC,kBAAAA,KAAK,EAAE;AAAT,iBAApB;AAAsCnC,gBAAAA;AAAtC,eAAD,CAAN;AACH,aAVL;AAWI,YAAA,UAAU,EAAE,CAXhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAcI,oBAAC,eAAD;AAAiB,YAAA,IAAI,EAAEnB,OAAvB;AAAgC,YAAA,KAAK,EAAC,cAAtC;AAAqD,YAAA,OAAO,EAAE,KAAKO,YAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdJ,EAgBQ,KAAKH,KAAL,CAAWC,WAAX,gBACI,oBAAC,MAAD;AAAQ,YAAA,KAAK,EAAE;AAAEkD,cAAAA,QAAQ,EAAE,UAAZ;AAAwBC,cAAAA,KAAK,EAAE,CAA/B;AAAkCC,cAAAA,GAAG,EAAE;AAAvC,aAAf;AAAiE,YAAA,QAAQ,EAAE,KAAK/C,QAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,GAEM,IAlBd,CADJ,CADJ;AAwBA;;AACJ,aAAM,SAAN;AACI6B,UAAAA,YAAY,gBACR;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAEQtB,QAAQ,CAACwB,SAAT,gBACI;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA8BxB,QAAQ,CAACyB,MAAT,CAAgBC,KAA9C,CADJ,GAEM,IAJd,eAMI,oBAAC,SAAD;AACI,YAAA,SAAS,EAAC,OADd;AAEI,YAAA,WAAW,EAAE1B,QAAQ,CAACyB,MAAT,CAAgBS,WAFjC;AAGI,YAAA,OAAO,EAAElC,QAAQ,CAACyB,MAAT,CAAgBU,OAH7B;AAII,YAAA,OAAO,EAAC,GAJZ;AAKI,YAAA,YAAY,EAAEnC,QAAQ,CAACS,KAL3B,CAMI;AANJ;AAOI,YAAA,QAAQ,EAAGL,KAAD,IAAW;AACjBP,cAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACAH,cAAAA,MAAM,CAAC;AAAEG,gBAAAA,KAAF;AAASF,gBAAAA;AAAT,eAAD,CAAN;AACH,aAVL;AAWI,YAAA,UAAU,EAAE,CAXhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,CADJ;AAqBA;;AACJ,aAAM,eAAN;AACIoB,UAAAA,YAAY,gBACR;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAEQtB,QAAQ,CAACwB,SAAT,gBACI;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA8BxB,QAAQ,CAACyB,MAAT,CAAgBC,KAA9C,CADJ,GAEM,IAJd,eAMI,oBAAC,SAAD;AACI,YAAA,SAAS,EAAC,OADd;AAEI,YAAA,WAAW,EAAE1B,QAAQ,CAACyB,MAAT,CAAgBS,WAFjC;AAGI,YAAA,OAAO,EAAElC,QAAQ,CAACyB,MAAT,CAAgBU,OAH7B;AAII,YAAA,OAAO,EAAC,GAJZ;AAKI,YAAA,QAAQ,EAAG/B,KAAD,IAAW;AACjBP,cAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACAH,cAAAA,MAAM,CAAC;AAAEG,gBAAAA,KAAF;AAASF,gBAAAA;AAAT,eAAD,CAAN;AACH,aARL;AASI,YAAA,UAAU,EAAE,CAThB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,CADJ;AAmBA;;AACJ;AACIoB,UAAAA,YAAY,GAAG,IAAf;AAvLR;;AA0LA,aAAOA,YAAP;AACH,KArO6B;AAAA;;AAuO9BmB,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,KAAK,EAAC,qBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKpB,cAAL,EADL,CADJ;AAKH;;AA7O6B;;AA8OjC;AAED,eAAenC,SAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport faExclamation from '@fortawesome/fontawesome-free-solid/faExclamation';\r\nimport faSmile from '@fortawesome/fontawesome-free-solid/faSmile';\r\nimport TextInput from 'react-autocomplete-input';\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart'\r\n\r\nclass FormField extends Component {\r\n\r\n    state = {\r\n        emojiToggle: false,\r\n        selectedEmoji: '',\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({ emojiToggle: !this.state.emojiToggle })\r\n    }\r\n    addEmoji = e => {\r\n        const input = document.getElementById('description_textarea');\r\n        console.log(input.selectionStart);\r\n        const { formData, change, id } = this.props;\r\n        let event = e.native;\r\n        //Copy icon \r\n        var textfield = document.createElement(\"input\");\r\n        textfield.type = \"text\"\r\n        textfield.value = event;\r\n        document.body.appendChild(textfield);\r\n        textfield.select();\r\n        textfield.setSelectionRange(0, 99999)\r\n        document.execCommand(\"copy\");\r\n        document.body.removeChild(textfield);\r\n    };\r\n\r\n    showError = () => {\r\n        const { formData } = this.props;\r\n        if (formData.validation && !formData.valid) {\r\n            if (formData.validationMessage) {\r\n                return (\r\n                    <div>\r\n                        <FontAwesomeIcon icon={faExclamation} style={{ marginRight: '10px' }} />\r\n                        {formData.validationMessage}\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    renderTemplate = () => {\r\n        const { formData, change, id } = this.props;\r\n        let formTemplate = null;\r\n        switch (formData.element) {\r\n            case ('input'):\r\n                formTemplate = (\r\n                    <div className=\"formBlock\" >\r\n                        {formData.showlabel ?\r\n                            <div className=\"label_input\">{formData.config.label}</div>\r\n                            : null\r\n                        }\r\n                        <input {...formData.config}\r\n                            value={formData.value}\r\n                            //sự kiện onBlur được dùng để validate required\r\n                            onBlur={(event) => change({ event, id, blur: true })}\r\n                            //sự kiện change được dùng để validate email/password có pass đc Regex không\r\n                            onChange={(event) => change({ event, id, blur: true })}\r\n                        />\r\n                        <div className=\"error_label\" style={{ height: '20px', fontSize: '15px', marginTop: '5px', marginBottom: '5px', color: 'red', textTransform: 'capitalize' }}>\r\n                            {this.showError()}\r\n                        </div>\r\n\r\n                    </div>\r\n                )\r\n                break;\r\n            case ('datetime'):\r\n                formTemplate = (\r\n                    <div className=\"formBlock\" >\r\n                        {formData.showlabel ?\r\n                            <div className=\"label_input\">{formData.config.label}</div>\r\n                            : null\r\n                        }\r\n\r\n                        <input {...formData.config}\r\n                            value={formData.value}\r\n                            //sự kiện onBlur được dùng để validate required\r\n                            onBlur={(event) => change({ event, id, blur: true })}\r\n                            //sự kiện change được dùng để validate email/password có pass đc Regex không\r\n                            onChange={(event) => change({ event, id, blur: true })}\r\n                        />\r\n\r\n                        <div className=\"error_label\" style={{ height: '20px', fontSize: '15px', marginTop: '5px', marginBottom: '5px', color: 'red', textTransform: 'capitalize' }}>\r\n                            {this.showError()}\r\n                        </div>\r\n\r\n                    </div>\r\n                )\r\n                break;\r\n            case ('password'):\r\n                formTemplate = (\r\n                    <div className=\"formBlock\" >\r\n                        <input {...formData.config}\r\n                            value={formData.value}\r\n                            onBlur={(event) => change({ event, id, blur: true })}\r\n                            onChange={(event) => change({ event, id, blur: true })}\r\n                        />\r\n                        <div className=\"error_label\" style={{ height: '20px', fontSize: '15px', marginTop: '5px', marginBottom: '5px', color: 'red', textTransform: 'capitalize' }}>\r\n                            {this.showError()}\r\n                        </div>\r\n                    </div>\r\n\r\n                )\r\n                break;\r\n            // case('select'):\r\n            //     formTemplate = (\r\n            //         <div className=\"formBlock\" >\r\n            //             {  \r\n            //                 formData.showlabel ?\r\n            //                 <div className=\"label_input\">{formData.config.label}</div>\r\n            //                 : null\r\n            //             }\r\n            //             <select\r\n            //                 value={formData.value}\r\n            //                 onBlur={(event) => change({ event, id, blur: true })}\r\n            //                 onChange={(event) => change({ event, id })}\r\n            //             >\r\n            //                 <option value=\"\">\r\n            //                     {\r\n            //                         id == \"nationality\"? \"Quốc tịch\":\r\n            //                         \"Select one\"\r\n            //                     }\r\n            //                 </option>\r\n            //                 {\r\n            //                     formData.config.options.map(item => (\r\n            //                             <option \r\n            //                                 key={item.key}\r\n            //                                 value={item.key}\r\n            //                             >\r\n            //                                 {item.value}\r\n            //                             </option>\r\n            //                        ))\r\n            //                 }\r\n            //             </select>\r\n            //              <div className=\"error_label\" style={{ height: '20px', fontSize: '15px', marginTop: '5px', marginBottom: '5px', color: 'red', textTransform: 'capitalize' }}>\r\n            //                 {this.showError()}\r\n            //             </div> \r\n            //         </div>\r\n            //     )\r\n            // break;\r\n            case ('textarea'):\r\n                formTemplate = (\r\n                    <div className=\"formBlock\" >\r\n                        {formData.showlabel ?\r\n                            <div className=\"label_input\">{formData.config.label}</div>\r\n                            : null\r\n                        }\r\n                        <textarea {...formData.config}\r\n                            value={formData.value}\r\n                            onBlur={(event) => change({ event, id, blur: true })}\r\n                            onChange={(event) => change({ event, id })}\r\n                        />\r\n                        {this.showError()}\r\n                    </div>\r\n                )\r\n                break;\r\n            case ('description'):\r\n                formTemplate = (\r\n                    <div className=\"formBlock\" >\r\n                        <div className=\"description_input\">\r\n                            <TextInput\r\n                                id=\"description_textarea\"\r\n                                className=\"description_textarea\"\r\n                                placeholder={formData.config.placeholder}\r\n                                options={formData.config.options}\r\n                                defaultValue={formData.value}\r\n                                trigger=\"#\"\r\n                                onChange={(event) => {\r\n                                    console.log(event);\r\n                                    change({ event, emojiInfo: { emoji: false }, id })\r\n                                }}\r\n                                maxOptions={7}\r\n                            />\r\n                            <FontAwesomeIcon icon={faSmile} class=\"emoji_button\" onClick={this.handleChange}></FontAwesomeIcon>\r\n                            {\r\n                                this.state.emojiToggle ?\r\n                                    <Picker style={{ position: \"absolute\", right: 0, top: \"100%\", }} onSelect={this.addEmoji} />\r\n                                    : null\r\n                            }\r\n                        </div>\r\n                    </div>);\r\n                break;\r\n            case ('userTag'):\r\n                formTemplate = (\r\n                    <div className=\"formBlock\" >\r\n                        {\r\n                            formData.showlabel ?\r\n                                <div className=\"label_input\">{formData.config.label}</div>\r\n                                : null\r\n                        }\r\n                        <TextInput\r\n                            Component=\"input\"\r\n                            placeholder={formData.config.placeholder}\r\n                            options={formData.config.options}\r\n                            trigger=\"@\"\r\n                            defaultValue={formData.value}\r\n                            // onChange={this.handleChange}\r\n                            onChange={(event) => {\r\n                                console.log(event);\r\n                                change({ event, id })\r\n                            }}\r\n                            maxOptions={7}\r\n                        />\r\n                    </div>);\r\n                break;\r\n            case ('locationInput'):\r\n                formTemplate = (\r\n                    <div className=\"formBlock\" >\r\n                        {\r\n                            formData.showlabel ?\r\n                                <div className=\"label_input\">{formData.config.label}</div>\r\n                                : null\r\n                        }\r\n                        <TextInput\r\n                            Component=\"input\"\r\n                            placeholder={formData.config.placeholder}\r\n                            options={formData.config.options}\r\n                            trigger=\"#\"\r\n                            onChange={(event) => {\r\n                                console.log(event);\r\n                                change({ event, id })\r\n                            }}\r\n                            maxOptions={3}\r\n                        />\r\n                    </div>);\r\n                break;\r\n            default:\r\n                formTemplate = null;\r\n\r\n        }\r\n        return formTemplate;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"formField_container\">\r\n                {this.renderTemplate()}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default FormField;"]},"metadata":{},"sourceType":"module"}