{"ast":null,"code":"var _jsxFileName = \"D:\\\\Kltn\\\\test\\\\social-media\\\\client\\\\src\\\\components\\\\Message\\\\index.js\";\nimport React, { Component, useEffect, useState } from 'react';\nimport Layout from '../../hoc/layout';\nimport { connect } from 'react-redux';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport Portal from '@material-ui/core/Portal';\nimport { getMessage, getConversation, sendMessage, seenMessage, sendimg, getGroup, seenAll, getGroupMessage, sendGroupMessage, createGroup, findPersonal, editTitle, addMember, removeMember, changegroupimg, uploadgroupimg, seenGroupMess, disableGroupMess } from '../../../src/actions/message_action';\nimport { follow, unfollow, auth } from '../../../src/actions/user_action';\nimport GroupMess from './groupmess';\nimport './Message.scss';\nimport { update, generateData } from '../ultils/Form/FormActions';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Settings, Dots, Heart, Pencil, Search, Phone, Photo, Sticker, Send, Ghost, Edit, Circle, CircleCheck, User, Users } from 'tabler-icons-react';\nimport SearchBar from './SearchBar/index';\nimport Pusher, { Members } from 'pusher-js';\nimport { Button, Dialog, LinearProgress, Checkbox, Chip, Avatar, ClickAwayListener } from '@material-ui/core';\nimport { AvatarGroup } from '@material-ui/lab';\nimport EditMess from './editchat';\nimport ReactDOM from 'react-dom';\nimport { Picker } from 'emoji-mart';\nimport Picker2 from 'react-giphy-component';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport Group from './group';\nimport { default as SearchBox } from '.././SearchMess';\nconst GifPicker = styled(Picker2)`\n`;\nconst StyleLink = styled(Link)`\ncolor:black;\n`;\nconst StyleClip = styled(Chip)`\nborder-radius: 4px;\nbackground-color: #e1f5fe;\ncolor: #0095f6;\nmargin: 4px;\n`;\n\nclass Message extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      emojiToggle: false,\n      gifToggle: false,\n      heart: 'http://res.cloudinary.com/dlikyyfd1/image/upload/v1610161677/1610161676299.png',\n      userName: null,\n      sending: false,\n      _id: null,\n      avt: null,\n      content: '',\n      link: '',\n      mess: {\n        sentTo: '',\n        sentBy: '',\n        content: '',\n        type: ''\n      },\n      newmess: false,\n      sendinguserlist: [],\n      sendinguserlistid: [],\n      view: 'ls',\n      editmess: false\n    };\n\n    this.scrollToBottom = () => {\n      const messagesContainer = ReactDOM.findDOMNode(this.messagesContainer);\n      messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    };\n\n    this.emojiClick = () => {\n      this.setState({\n        emojiToggle: !this.state.emojiToggle\n      });\n    };\n\n    this.GifIconClick = () => {\n      this.setState({\n        gifToggle: !this.state.gifToggle\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        content: event.target.value\n      });\n    };\n\n    this.submitForm = event => {\n      event.preventDefault();\n\n      if (this.state.content.trim()) {\n        this.state.mess.content = this.state.content;\n        this.state.mess.type = 'text';\n        let dataToSubmit = this.state.mess;\n        console.log(dataToSubmit);\n        this.props.dispatch(sendGroupMessage(dataToSubmit));\n        this.setState({\n          content: '',\n          sending: true\n        });\n      }\n    };\n\n    this.onFileChange = async event => {\n      this.setState({\n        sending: true\n      });\n      await this.props.dispatch(sendimg(event.target.files[0]));\n      this.setState({\n        link: this.props.messages.sendimg ? this.props.messages.sendimg.url : 0\n      });\n      this.state.mess.content = this.state.link;\n      this.state.mess.type = 'img';\n      let dataToSubmit = this.state.mess;\n      this.props.dispatch(sendGroupMessage(dataToSubmit));\n      this.setState({\n        sending: true\n      });\n    };\n\n    this.sendGif = url => {\n      this.state.link = url;\n      this.state.mess.content = this.state.link;\n      this.state.mess.type = 'img';\n      let dataToSubmit = this.state.mess;\n      this.props.dispatch(sendGroupMessage(dataToSubmit));\n      this.setState({\n        sending: true\n      });\n    };\n\n    this.sendHeartIcon = () => {\n      this.setState({\n        sending: true\n      });\n      this.state.mess.content = this.state.heart;\n      this.state.mess.type = 'sticker';\n      let dataToSubmit = this.state.mess;\n      this.props.dispatch(sendGroupMessage(dataToSubmit));\n      this.setState({\n        content: '',\n        sending: true\n      });\n    };\n\n    this.addEmoji = e => {\n      const input = document.getElementById('description_textarea');\n      var starPros = document.getElementById('description_textarea').selectionStart;\n      var endPros = document.getElementById('description_textarea').selectionEnd;\n      let event = e.native;\n      var value = JSON.stringify(event);\n      var emote = value.replace(/['\"]+/g, ''); // var unquoted = emote.replace(/(\\{|,)\\s*(.+?)\\s*:/g, '$1 \"$2\":')\n\n      this.setState({\n        content: this.state.content.substr(0, starPros) + emote + this.state.content.substr(endPros, this.state.content.length)\n      });\n      input.focus();\n      document.execCommand(\"copy\");\n    };\n\n    this.removelist = (id, name) => {\n      const list = this.state.sendinguserlist;\n      list.splice(this.state.sendinguserlist.indexOf(name), 1);\n      this.setState({\n        sendinguserlist: list\n      });\n      const listid = this.state.sendinguserlistid;\n      listid.splice(this.state.sendinguserlistid.indexOf(id), 1);\n      this.setState({\n        sendinguserlistid: listid\n      });\n    };\n\n    this.createGroup = list => {\n      console.log('clicked');\n\n      if (list.length <= 1) {\n        this.props.dispatch(findPersonal(list[0])).then(data => this.props.history.push(`/message/inbox/${this.props.messages.conversationinfo._id}`));\n      } else {\n        list.push(this.props.user.userData._id);\n        this.props.dispatch(createGroup(list)).then(data => this.props.history.push(`/message/inbox/${this.props.messages.newgroup._id}`));\n      }\n\n      this.setState({\n        newmess: false\n      });\n    };\n\n    this.addList = (id, name) => {\n      const list = this.state.sendinguserlist;\n      list.push(name);\n      this.setState({\n        sendinguserlist: list\n      });\n      const listid = this.state.sendinguserlistid;\n      listid.push(id);\n      this.setState({\n        sendinguserlistid: listid\n      });\n    };\n\n    this.seenMessage = id => {\n      this.props.dispatch(seenMessage(id));\n    };\n\n    this.editTitle = (id, title) => {\n      this.props.dispatch(editTitle(id, title));\n      this.setState({\n        editmess: false\n      });\n    };\n\n    this.createGroupEvent = des => {\n      this.setState({\n        sending: true\n      });\n      this.state.mess.content = des;\n      this.state.mess.type = 'event';\n      let dataToSubmit = this.state.mess;\n      this.props.dispatch(sendGroupMessage(dataToSubmit));\n      this.setState({\n        content: '',\n        sending: true\n      });\n    };\n\n    this.addMember = (id, userlist, userlistid) => {\n      this.props.dispatch(addMember(id, userlist, userlistid));\n      this.setState({\n        editmess: false\n      });\n    };\n\n    this.removeMember = (id, uid) => {\n      this.props.dispatch(removeMember(id, uid));\n      this.setState({\n        editmess: false\n      });\n    };\n\n    this.onGroupImgChange = async event => {\n      this.setState({\n        sending: true\n      });\n      await this.props.dispatch(uploadgroupimg(event.target.files[0]));\n      await this.props.dispatch(changegroupimg(this.props.messages.groupmesslist._id, this.props.messages.img ? this.props.messages.img.url : '')).then(response => {\n        console.log(response);\n\n        if (response.payload.success == false) {\n          this.setState({\n            loading: false,\n            editmess: false\n          });\n        } else {\n          this.setState({\n            loading: false,\n            editmess: false\n          });\n        }\n      });\n    };\n\n    this.seenGroupMess = id => {\n      this.props.dispatch(seenGroupMess(id));\n    };\n\n    this.disableGroupMess = async id => {\n      await this.props.dispatch(disableGroupMess(id));\n      await this.props.dispatch(getGroupMessage(this.props.match.params.id));\n      this.setState({\n        editmess: false\n      });\n    };\n\n    this.outGroup = async (id, uid) => {\n      await this.props.dispatch(removeMember(id, uid));\n      await this.props.history.push('/message/inbox');\n      await this.props.dispatch(getGroupMessage(this.props.match.params.id));\n      await window.location.reload();\n      this.setState({\n        editmess: false\n      });\n    };\n\n    this.follow = async id => {\n      await this.props.dispatch(follow(id));\n      await this.props.dispatch(auth());\n    };\n\n    this.unfollow = async id => {\n      await this.props.dispatch(unfollow(id));\n      await this.props.dispatch(auth());\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispatch(getGroup()); /// Bind với pusher để làm realtime\n\n    const pusher = new Pusher('c0e96b0fff8d0edac17d', {\n      cluster: 'mt1',\n      encrypted: true,\n      authEndpoint: `http://localhost:3002/api/pusher/auth/${this.props.user.userData._id}`\n    });\n    const channel5 = pusher.subscribe('messages');\n    channel5.bind('newMessage', data => {\n      if (data.change.fullDocument.sentTo == this.props.user.userData._id || data.change.fullDocument.sentBy == this.props.user.userData._id) {\n        this.props.dispatch(getConversation());\n        this.setState({\n          sending: false\n        });\n      }\n    });\n    const groupchan = pusher.subscribe('groups');\n    groupchan.bind('newGroupmess', data => {\n      if (data.change.documentKey._id == this.props.match.params.id) {\n        this.props.dispatch(getGroupMessage(this.props.match.params.id));\n        this.setState({\n          sending: false\n        });\n      }\n\n      if (data.change.operationType == \"insert\") {\n        if (data.change.fullDocument.user.includes(this.props.user.userData._id)) {\n          this.props.dispatch(getGroup());\n        }\n      }\n\n      this.props.messages.grouplist.map(conver => {\n        if (conver._id == data.change.documentKey._id) {\n          this.props.dispatch(getGroup());\n        }\n      });\n\n      if (data.change.operationType == \"update\") {\n        if (data.change.updateDescription ? data.change.updateDescription.updatedFields ? data.change.updateDescription.updatedFields.user ? data.change.updateDescription.updatedFields.user.includes(this.props.user.userData._id) : '' : '' : '') {\n          this.props.dispatch(getGroup());\n        }\n      }\n    });\n    const conver = pusher.subscribe('conversations');\n    conver.bind('changeConver', data => {\n      if (data.change.documentKey._id == this.props.messages.messlist._id) {\n        this.props.dispatch(getMessage(this.props.match.params.id));\n      }\n    });\n    this.scrollToBottom();\n    this.props.dispatch(getGroupMessage(this.props.match.params.id)).then(data => {\n      this.setState({\n        userName: this.props.messages.groupmesslist.user,\n        _id: this.props.messages.groupmesslist._id\n      });\n      this.state.mess.sentTo = this.state._id;\n      this.state.mess.sentBy = this.props.user.userData._id;\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.location.key !== this.props.location.key) {\n      this.setState({\n        sending: true\n      });\n      this.props.dispatch(getGroupMessage(this.props.match.params.id)).then(data => {\n        this.setState({\n          userName: this.props.messages.groupmesslist.user,\n          _id: this.props.messages.groupmesslist._id\n        });\n        this.state.mess.sentTo = this.state._id;\n        this.state.mess.sentBy = this.props.user.userData._id;\n        this.setState({\n          sending: false\n        });\n      });\n    }\n\n    this.scrollToBottom();\n  }\n\n  render() {\n    console.log(this.props.messages);\n    console.log(this.props.messages.grouplist);\n    const mess = this.props.messages;\n    const yourProfile = this.props.user.userData;\n    return /*#__PURE__*/React.createElement(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message_wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 left_contain\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat_info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat_settings\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 41\n      }\n    }, \" Tr\\xF2 chuy\\u1EC7n\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat_icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Pencil, {\n      onClick: () => this.setState({\n        newmess: true\n      }),\n      size: 32,\n      strokeWidth: 1,\n      color: \"black\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(Settings, {\n      size: 32,\n      strokeWidth: 1,\n      color: \"black\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 45\n      }\n    }))), /*#__PURE__*/React.createElement(SearchBox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"seenall\",\n      onClick: () => this.props.dispatch(seenAll()),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 41\n      }\n    }, \"Read all\"))), /*#__PURE__*/React.createElement(Group, {\n      messages: this.props.messages,\n      yourProfile: yourProfile,\n      seenGroupMess: this.seenGroupMess,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 right_contain\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"top_info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"user_info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 37\n      }\n    }, this.props.messages.groupmesslist ? this.props.messages.groupmesslist.type == 'personal' ? this.props.messages.groupmesslist.user.map(users => {\n      return users._id == yourProfile._id ? '' : /*#__PURE__*/React.createElement(\"img\", {\n        src: users.avt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 93\n        }\n      });\n    }) : this.props.messages.groupmesslist ? this.props.messages.groupmesslist.groupimg ? /*#__PURE__*/React.createElement(\"img\", {\n      src: this.props.messages.groupmesslist.groupimg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(AvatarGroup, {\n      max: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 53\n      }\n    }, this.props.messages.groupmesslist ? this.props.messages.groupmesslist.user ? this.props.messages.groupmesslist.user.map(users => {\n      return /*#__PURE__*/React.createElement(Avatar, {\n        src: users ? users.avt : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 69\n        }\n      });\n    }) : '' : '') : '' : '', this.props.messages.groupmesslist ? this.props.messages.groupmesslist.type == 'personal' ? this.props.messages.groupmesslist.user.map(users => {\n      return users._id == yourProfile._id ? '' : /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 93\n        }\n      }, users.userName);\n    }) : this.props.messages.groupmesslist ? this.props.messages.groupmesslist.title ? /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 53\n      }\n    }, this.props.messages.groupmesslist.title) : this.props.messages.groupmesslist ? this.props.messages.groupmesslist.user ? this.props.messages.groupmesslist.user.map(users => {\n      return /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 61\n        }\n      }, users.userName, \",\");\n    }) : '' : '' : '' : ''), this.props.messages.groupmesslist ? this.props.messages.groupmesslist.messagelist ? /*#__PURE__*/React.createElement(Dots, {\n      size: 24,\n      strokeWidth: 0,\n      fill: \"black\",\n      onClick: () => this.setState({\n        editmess: true\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 126\n      }\n    }) : '' : ''), this.state.sending == true ? /*#__PURE__*/React.createElement(LinearProgress, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 66\n      }\n    }) : '', /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message\",\n      ref: el => {\n        this.messagesContainer = el;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 33\n      }\n    }, this.props.messages.groupmesslist ? this.props.messages.groupmesslist.messagelist ? this.props.messages.groupmesslist.messagelist.map(mess => {\n      return /*#__PURE__*/React.createElement(GroupMess, {\n        mess: mess,\n        yourProfile: yourProfile // seenMessage={this.props.seenMessage}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 49\n        }\n      });\n    }) : '' : '', /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row no-gutters sent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xl-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xl-6 sent_mess\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 41\n      }\n    }, this.props.messages.groupmesslist ? this.props.messages.groupmesslist.seenBy ? this.props.messages.groupmesslist.seenBy.map(seen => {\n      return /*#__PURE__*/React.createElement(\"img\", {\n        className: \"seen_avt\",\n        src: seen.avt ? seen.avt : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 57\n        }\n      });\n    }) : '' : '')), this.state.gifToggle ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"gif_picker\",\n      style: {\n        position: 'fixed',\n        zIndex: 100,\n        top: \"32%\",\n        left: \"50%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 45\n      }\n    }, \" \", /*#__PURE__*/React.createElement(GifPicker, {\n      apiKey: \"xRQzMksF1tPmqAvVPYlIGeJHZ2EBVXyh\",\n      onSelected: gif => this.sendGif(gif.downsized.url),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 142\n      }\n    })) : null), this.state.mess.sentTo ? /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: event => this.submitForm(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat_box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat_area\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"description_textarea\",\n      type: \"text\",\n      value: this.state.content,\n      placeholder: \"Nh\\u1EADp tin nh\\u1EAFn....\",\n      onChange: event => {\n        this.handleChange(event);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 53\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"action_icon\",\n      onClick: this.sendHeartIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Heart, {\n      size: 32,\n      strokeWidth: 1,\n      color: \"black\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"action_icon\",\n      onClick: this.GifIconClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Ghost, {\n      size: 32,\n      strokeWidth: 1,\n      color: \"black\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 57\n      }\n    }, \" \"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"img_upload\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"custom-file-upload\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      onChange: event => this.onFileChange(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 57\n      }\n    }), /*#__PURE__*/React.createElement(Photo, {\n      size: 32,\n      strokeWidth: 1,\n      color: \"black\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 57\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"emoji_icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Sticker, {\n      onClick: this.emojiClick,\n      size: 32,\n      strokeWidth: 1,\n      color: \"black\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 53\n      }\n    }), this.state.emojiToggle ? /*#__PURE__*/React.createElement(Picker, {\n      style: {\n        position: \"absolute\",\n        right: 0,\n        bottom: \"10vh\"\n      },\n      onSelect: this.addEmoji,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 61\n      }\n    }) : null), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"sent_btn\",\n      className: \"send_icon\",\n      onClick: event => {\n        this.submitForm(event);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Send, {\n      size: 32,\n      strokeWidth: 1,\n      color: \"white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 53\n      }\n    })))) : '')))), /*#__PURE__*/React.createElement(Dialog, {\n      open: this.state.newmess,\n      onClose: () => this.setState({\n        newmess: false\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"newmess_contain\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"newmess_header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 29\n      }\n    }, \"G\\u1EEDi tin nh\\u1EAFn m\\u1EDBi\"), /*#__PURE__*/React.createElement(\"h6\", {\n      className: this.state.sendinguserlist.length > 0 ? \"active\" : \"disable\",\n      onClick: () => this.createGroup(this.state.sendinguserlistid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 29\n      }\n    }, \"Ti\\u1EBFp\")), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 25\n      }\n    }, this.state.sendinguserlist.map(sendlist => {\n      return /*#__PURE__*/React.createElement(StyleClip, {\n        label: sendlist,\n        color: \"primary\",\n        onDelete: () => {\n          this.removelist(sendlist);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 41\n        }\n      });\n    }), /*#__PURE__*/React.createElement(SearchBar, {\n      yourProfile: yourProfile,\n      sendinguserlistid: this.state.sendinguserlistid,\n      removelist: this.removelist,\n      addList: this.addList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(Dialog, {\n      open: this.state.editmess,\n      onClose: () => this.setState({\n        editmess: false\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(EditMess, {\n      disableGroupMess: this.disableGroupMess,\n      history: this.props.history,\n      follow: this.follow,\n      unfollow: this.unfollow,\n      outGroup: this.outGroup,\n      onGroupImgChange: this.onGroupImgChange,\n      createGroupEvent: this.createGroupEvent,\n      editTitle: this.editTitle,\n      conversation: this.props.messages.groupmesslist,\n      yourProfile: yourProfile,\n      addMember: this.addMember,\n      removeMember: this.removeMember,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 25\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    messages: state.messages\n  };\n};\n\nexport default connect(mapStateToProps)(Message);","map":{"version":3,"sources":["D:/Kltn/test/social-media/client/src/components/Message/index.js"],"names":["React","Component","useEffect","useState","Layout","connect","Skeleton","Portal","getMessage","getConversation","sendMessage","seenMessage","sendimg","getGroup","seenAll","getGroupMessage","sendGroupMessage","createGroup","findPersonal","editTitle","addMember","removeMember","changegroupimg","uploadgroupimg","seenGroupMess","disableGroupMess","follow","unfollow","auth","GroupMess","update","generateData","Link","withRouter","Settings","Dots","Heart","Pencil","Search","Phone","Photo","Sticker","Send","Ghost","Edit","Circle","CircleCheck","User","Users","SearchBar","Pusher","Members","Button","Dialog","LinearProgress","Checkbox","Chip","Avatar","ClickAwayListener","AvatarGroup","EditMess","ReactDOM","Picker","Picker2","styled","moment","Group","default","SearchBox","GifPicker","StyleLink","StyleClip","Message","state","emojiToggle","gifToggle","heart","userName","sending","_id","avt","content","link","mess","sentTo","sentBy","type","newmess","sendinguserlist","sendinguserlistid","view","editmess","scrollToBottom","messagesContainer","findDOMNode","scrollTop","scrollHeight","emojiClick","setState","GifIconClick","handleChange","event","target","value","submitForm","preventDefault","trim","dataToSubmit","console","log","props","dispatch","onFileChange","files","messages","url","sendGif","sendHeartIcon","addEmoji","e","input","document","getElementById","starPros","selectionStart","endPros","selectionEnd","native","JSON","stringify","emote","replace","substr","length","focus","execCommand","removelist","id","name","list","splice","indexOf","listid","then","data","history","push","conversationinfo","user","userData","newgroup","addList","title","createGroupEvent","des","userlist","userlistid","uid","onGroupImgChange","groupmesslist","img","response","payload","success","loading","match","params","outGroup","window","location","reload","componentDidMount","pusher","cluster","encrypted","authEndpoint","channel5","subscribe","bind","change","fullDocument","groupchan","documentKey","operationType","includes","grouplist","map","conver","updateDescription","updatedFields","messlist","componentDidUpdate","prevProps","key","render","yourProfile","users","groupimg","messagelist","el","seenBy","seen","position","zIndex","top","left","gif","downsized","right","bottom","sendlist","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\nimport Layout from '../../hoc/layout';\r\nimport { connect } from 'react-redux';\r\nimport Skeleton from '@material-ui/lab/Skeleton'\r\nimport Portal from '@material-ui/core/Portal';\r\nimport { getMessage, getConversation, sendMessage, seenMessage, sendimg, getGroup, seenAll, getGroupMessage, sendGroupMessage, createGroup, findPersonal, editTitle, addMember, removeMember, changegroupimg, uploadgroupimg, seenGroupMess, disableGroupMess } from '../../../src/actions/message_action'\r\nimport { follow, unfollow, auth } from '../../../src/actions/user_action'\r\nimport GroupMess from './groupmess';\r\nimport './Message.scss';\r\nimport { update, generateData } from '../ultils/Form/FormActions';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { Settings, Dots, Heart, Pencil, Search, Phone, Photo, Sticker, Send, Ghost, Edit, Circle, CircleCheck, User, Users } from 'tabler-icons-react';\r\nimport SearchBar from './SearchBar/index'\r\nimport Pusher, { Members } from 'pusher-js'\r\nimport { Button, Dialog, LinearProgress, Checkbox, Chip, Avatar, ClickAwayListener } from '@material-ui/core';\r\nimport { AvatarGroup } from '@material-ui/lab';\r\nimport EditMess from './editchat'\r\nimport ReactDOM from 'react-dom'\r\nimport { Picker } from 'emoji-mart'\r\nimport Picker2 from 'react-giphy-component'\r\nimport styled from 'styled-components'\r\nimport moment from 'moment';\r\nimport Group from './group';\r\nimport { default as SearchBox} from '.././SearchMess';\r\nconst GifPicker = styled(Picker2)`\r\n`;\r\nconst StyleLink = styled(Link)`\r\ncolor:black;\r\n`;\r\n\r\nconst StyleClip = styled(Chip)`\r\nborder-radius: 4px;\r\nbackground-color: #e1f5fe;\r\ncolor: #0095f6;\r\nmargin: 4px;\r\n`;\r\n\r\nclass Message extends Component {\r\n    state = {\r\n        emojiToggle: false,\r\n        gifToggle: false,\r\n        heart: 'http://res.cloudinary.com/dlikyyfd1/image/upload/v1610161677/1610161676299.png',\r\n        userName: null,\r\n        sending: false,\r\n        _id: null,\r\n        avt: null,\r\n        content: '',\r\n        link: '',\r\n        mess: {\r\n            sentTo: '',\r\n            sentBy: '',\r\n            content: '',\r\n            type: '',\r\n        },\r\n        newmess: false,\r\n        sendinguserlist: [],\r\n        sendinguserlistid: [],\r\n        view: 'ls',\r\n        editmess: false,\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        this.props.dispatch(getGroup())\r\n        /// Bind với pusher để làm realtime\r\n        const pusher = new Pusher('c0e96b0fff8d0edac17d', {\r\n            cluster: 'mt1',\r\n            encrypted: true,\r\n            authEndpoint: `http://localhost:3002/api/pusher/auth/${this.props.user.userData._id}`,\r\n        });\r\n        \r\n        const channel5 = pusher.subscribe('messages');\r\n        channel5.bind('newMessage', data => {\r\n            if (data.change.fullDocument.sentTo == this.props.user.userData._id || data.change.fullDocument.sentBy == this.props.user.userData._id) {\r\n                this.props.dispatch(getConversation())\r\n                this.setState({ sending: false })\r\n            }\r\n        });\r\n\r\n        const groupchan = pusher.subscribe('groups');\r\n        groupchan.bind('newGroupmess', data => {\r\n            if (data.change.documentKey._id == this.props.match.params.id) {\r\n                this.props.dispatch(getGroupMessage(this.props.match.params.id))\r\n                this.setState({ sending: false })\r\n            }\r\n            if (data.change.operationType == \"insert\") {\r\n                if (data.change.fullDocument.user.includes(this.props.user.userData._id)) {\r\n                    this.props.dispatch(getGroup())\r\n                }\r\n            }\r\n            this.props.messages.grouplist.map(conver => {\r\n                if (conver._id == data.change.documentKey._id) {\r\n                    this.props.dispatch(getGroup())\r\n                }\r\n            })\r\n            if (data.change.operationType == \"update\") {\r\n                if (data.change.updateDescription ? data.change.updateDescription.updatedFields ? data.change.updateDescription.updatedFields.user ? data.change.updateDescription.updatedFields.user.includes(this.props.user.userData._id) : '' : '' : '') {\r\n                    this.props.dispatch(getGroup())\r\n                }\r\n            }\r\n        });\r\n        const conver = pusher.subscribe('conversations');\r\n        conver.bind('changeConver', data => {\r\n            if (data.change.documentKey._id == this.props.messages.messlist._id) {\r\n                this.props.dispatch(getMessage(this.props.match.params.id))\r\n            }\r\n        })\r\n        this.scrollToBottom();\r\n        this.props.dispatch(getGroupMessage(this.props.match.params.id)).then(data => {\r\n            this.setState({ userName: this.props.messages.groupmesslist.user, _id: this.props.messages.groupmesslist._id })\r\n            this.state.mess.sentTo = this.state._id;\r\n            this.state.mess.sentBy = this.props.user.userData._id;\r\n        })\r\n\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.location.key !== this.props.location.key) {\r\n            this.setState({ sending: true })\r\n            this.props.dispatch(getGroupMessage(this.props.match.params.id)).then(data => {\r\n                this.setState({ userName: this.props.messages.groupmesslist.user, _id: this.props.messages.groupmesslist._id })\r\n                this.state.mess.sentTo = this.state._id;\r\n                this.state.mess.sentBy = this.props.user.userData._id;\r\n                this.setState({ sending: false })\r\n            })\r\n        }\r\n        this.scrollToBottom();\r\n    }\r\n    scrollToBottom = () => {\r\n        const messagesContainer = ReactDOM.findDOMNode(this.messagesContainer);\r\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\r\n    };\r\n    emojiClick = () => {\r\n        this.setState({ emojiToggle: !this.state.emojiToggle })\r\n    }\r\n    GifIconClick = () => {\r\n        this.setState({ gifToggle: !this.state.gifToggle })\r\n    }\r\n    handleChange = (event) => {\r\n        this.setState({ content: event.target.value });\r\n    }\r\n\r\n    submitForm = (event) => {\r\n        event.preventDefault();\r\n        if (this.state.content.trim()) {\r\n            this.state.mess.content = this.state.content;\r\n            this.state.mess.type = 'text';\r\n            let dataToSubmit = this.state.mess\r\n            console.log(dataToSubmit)\r\n            this.props.dispatch(sendGroupMessage(dataToSubmit));\r\n            this.setState({ content: '', sending: true });\r\n        }\r\n    }\r\n    onFileChange = async (event) => {\r\n        this.setState({ sending: true });\r\n        await this.props.dispatch(sendimg(event.target.files[0]));\r\n        this.setState({ link: this.props.messages.sendimg ? this.props.messages.sendimg.url : 0 });\r\n        this.state.mess.content = this.state.link;\r\n        this.state.mess.type = 'img';\r\n        let dataToSubmit = this.state.mess\r\n        this.props.dispatch(sendGroupMessage(dataToSubmit));\r\n        this.setState({ sending: true });\r\n    }\r\n    sendGif = (url) => {\r\n        this.state.link = url;\r\n        this.state.mess.content = this.state.link;\r\n        this.state.mess.type = 'img';\r\n        let dataToSubmit = this.state.mess\r\n        this.props.dispatch(sendGroupMessage(dataToSubmit));\r\n        this.setState({ sending: true });\r\n    }\r\n    sendHeartIcon = () => {\r\n        this.setState({ sending: true });\r\n        this.state.mess.content = this.state.heart;\r\n        this.state.mess.type = 'sticker';\r\n        let dataToSubmit = this.state.mess\r\n        this.props.dispatch(sendGroupMessage(dataToSubmit));\r\n        this.setState({ content: '', sending: true });\r\n    }\r\n    addEmoji = e => {\r\n        const input = document.getElementById('description_textarea');\r\n        var starPros = document.getElementById('description_textarea').selectionStart;\r\n        var endPros = document.getElementById('description_textarea').selectionEnd;\r\n        let event = e.native;\r\n        var value = JSON.stringify(event);\r\n        var emote = value.replace(/['\"]+/g, '')\r\n        // var unquoted = emote.replace(/(\\{|,)\\s*(.+?)\\s*:/g, '$1 \"$2\":')\r\n        this.setState({ content: this.state.content.substr(0, starPros) + emote + this.state.content.substr(endPros, this.state.content.length) });\r\n        input.focus();\r\n        document.execCommand(\"copy\");\r\n    };\r\n    removelist = (id, name) => {\r\n        const list = this.state.sendinguserlist;\r\n        list.splice(this.state.sendinguserlist.indexOf(name), 1);\r\n        this.setState({ sendinguserlist: list });\r\n        const listid = this.state.sendinguserlistid;\r\n        listid.splice(this.state.sendinguserlistid.indexOf(id), 1);\r\n        this.setState({ sendinguserlistid: listid });\r\n    };\r\n    createGroup = (list) => {\r\n        console.log('clicked');\r\n        if (list.length <= 1) {\r\n            this.props.dispatch(findPersonal(list[0])).then(data => this.props.history.push(`/message/inbox/${this.props.messages.conversationinfo._id}`));\r\n        }\r\n        else {\r\n            list.push(this.props.user.userData._id);\r\n            this.props.dispatch(createGroup(list)).then(data => this.props.history.push(`/message/inbox/${this.props.messages.newgroup._id}`));\r\n        }\r\n        this.setState({ newmess: false });\r\n    };\r\n    addList = (id, name) => {\r\n        const list = this.state.sendinguserlist;\r\n        list.push(name);\r\n        this.setState({ sendinguserlist: list });\r\n        const listid = this.state.sendinguserlistid;\r\n        listid.push(id);\r\n        this.setState({ sendinguserlistid: listid });\r\n    }\r\n    seenMessage = (id) => {\r\n        this.props.dispatch(seenMessage(id))\r\n    }\r\n    editTitle = (id, title) => {\r\n        this.props.dispatch(editTitle(id, title))\r\n        this.setState({ editmess: false })\r\n    }\r\n    createGroupEvent = (des) => {\r\n        this.setState({ sending: true });\r\n        this.state.mess.content = des;\r\n        this.state.mess.type = 'event';\r\n        let dataToSubmit = this.state.mess\r\n        this.props.dispatch(sendGroupMessage(dataToSubmit));\r\n        this.setState({ content: '', sending: true });\r\n    }\r\n    addMember = (id, userlist, userlistid) => {\r\n        this.props.dispatch(addMember(id, userlist, userlistid))\r\n        this.setState({ editmess: false })\r\n    }\r\n    removeMember = (id, uid) => {\r\n        this.props.dispatch(removeMember(id, uid))\r\n        this.setState({ editmess: false })\r\n    }\r\n    onGroupImgChange = async (event) => {\r\n        this.setState({ sending: true })\r\n        await this.props.dispatch(uploadgroupimg(event.target.files[0]));\r\n        await this.props.dispatch(changegroupimg(this.props.messages.groupmesslist._id, this.props.messages.img ? this.props.messages.img.url : ''))\r\n            .then(response => {\r\n                console.log(response)\r\n                if (response.payload.success == false) {\r\n                    this.setState({ loading: false, editmess: false })\r\n                }\r\n                else {\r\n                    this.setState({ loading: false, editmess: false })\r\n                }\r\n            })\r\n    }\r\n    seenGroupMess = (id) => {\r\n        this.props.dispatch(seenGroupMess(id))\r\n    }\r\n    disableGroupMess = async (id) => {\r\n        await this.props.dispatch(disableGroupMess(id))\r\n        await this.props.dispatch(getGroupMessage(this.props.match.params.id))\r\n        this.setState({ editmess: false })\r\n    }\r\n    outGroup = async (id, uid) => {\r\n        await this.props.dispatch(removeMember(id, uid))\r\n        await this.props.history.push('/message/inbox')\r\n        await this.props.dispatch(getGroupMessage(this.props.match.params.id))\r\n        await window.location.reload();\r\n        this.setState({ editmess: false })\r\n    }\r\n    follow = async (id) => {\r\n        await this.props.dispatch(follow(id))\r\n        await this.props.dispatch(auth())\r\n    }\r\n    unfollow = async (id) => {\r\n        await this.props.dispatch(unfollow(id))\r\n        await this.props.dispatch(auth())\r\n    }\r\n    render() {\r\n\r\n        console.log(this.props.messages)\r\n        console.log(this.props.messages.grouplist)\r\n        const mess = this.props.messages\r\n        const yourProfile = this.props.user.userData\r\n        return (\r\n            <Layout>\r\n                {/* {\r\n                  this.props.messages ? this.props.messages.messlist ? this.props.messages.messlist.user1 ? this.props.messages.messlist.user1._id != this.props.user.userData._id ? \r\n                  this.setState({userName:this.props.messages.messlist.user1.userName,_id:this.props.messages.messlist.user1._id,avt:this.props.messages.messlist.user1.avt}) : '' :'':'':''\r\n             } */}\r\n                <div className=\"message_container\">\r\n                    <div className=\"message_wrapper\">\r\n                        <div className=\"row no-gutters\">\r\n\r\n                            <div className=\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 left_contain\">\r\n                                <div className=\"chat_info\">\r\n                                    <div className=\"chat_settings\">\r\n                                        <h2 > Trò chuyện</h2>\r\n                                        <div className=\"chat_icon\">\r\n                                            <Pencil onClick={() => this.setState({ newmess: true })} size={32} strokeWidth={1} color=\"black\"></Pencil>\r\n\r\n                                            <Settings size={32} strokeWidth={1} color=\"black\"></Settings>\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                  \r\n                                        <SearchBox></SearchBox>\r\n\r\n    \r\n                                    <div className=\"seenall\" onClick={() => this.props.dispatch(seenAll())}>\r\n                                        <h6>Read all</h6>\r\n\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                                {/* <Conversation\r\n                                            messages={this.props.messages}\r\n                                            yourProfile={yourProfile}\r\n                                            seenMessage={seenMessage}\r\n                                        >\r\n                                        </Conversation>  */}\r\n\r\n                                <Group\r\n\r\n                                    messages={this.props.messages}\r\n                                    yourProfile={yourProfile}\r\n                                    seenGroupMess={this.seenGroupMess}\r\n                                >\r\n                                </Group>\r\n                               \r\n\r\n                            </div>\r\n                            <div className=\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 right_contain\">\r\n                                <div className=\"top_info\">\r\n\r\n                                    <div className=\"user_info\">\r\n                                        {\r\n                                            this.props.messages.groupmesslist ? this.props.messages.groupmesslist.type == 'personal' ?\r\n                                                this.props.messages.groupmesslist.user.map(users => {\r\n                                                    return (\r\n                                                        users._id == yourProfile._id ? '' : <img src={users.avt}></img>\r\n                                                    )\r\n\r\n                                                }) :\r\n                                                this.props.messages.groupmesslist ? this.props.messages.groupmesslist.groupimg ?\r\n                                                    <img src={this.props.messages.groupmesslist.groupimg}></img>\r\n                                                    :\r\n                                                    <AvatarGroup max={3}>\r\n                                                        {\r\n                                                            this.props.messages.groupmesslist ? this.props.messages.groupmesslist.user ? this.props.messages.groupmesslist.user.map(users => {\r\n                                                                return (\r\n                                                                    <Avatar src={users ? users.avt : ''}></Avatar>\r\n                                                                )\r\n                                                            }) : '' : ''\r\n                                                        }\r\n                                                    </AvatarGroup>\r\n                                                    : '' : ''\r\n                                        }\r\n                                        {\r\n                                            this.props.messages.groupmesslist ? this.props.messages.groupmesslist.type == 'personal' ?\r\n                                                this.props.messages.groupmesslist.user.map(users => {\r\n                                                    return (\r\n                                                        users._id == yourProfile._id ? '' : <h2>{users.userName}</h2>\r\n                                                    )\r\n\r\n                                                }) :\r\n                                                this.props.messages.groupmesslist ? this.props.messages.groupmesslist.title ?\r\n                                                    <h2>{this.props.messages.groupmesslist.title}</h2>\r\n                                                    :\r\n                                                    this.props.messages.groupmesslist ? this.props.messages.groupmesslist.user ? this.props.messages.groupmesslist.user.map(users => {\r\n                                                        return (\r\n                                                            <h2>{users.userName},</h2>\r\n                                                        )\r\n                                                    }) : '' : '' : '' : ''\r\n\r\n                                        }\r\n\r\n                                    </div>\r\n                                    {\r\n                                        this.props.messages.groupmesslist?this.props.messages.groupmesslist.messagelist ?    <Dots size={24} strokeWidth={0} fill=\"black\" onClick={() => this.setState({ editmess: true })}></Dots>:'':''\r\n                                    }\r\n                                \r\n\r\n                                </div>\r\n                                {\r\n                                    this.state.sending == true ? <LinearProgress />\r\n                                        : ''\r\n                                }\r\n                                <div className=\"message\" ref={(el) => { this.messagesContainer = el; }} >\r\n\r\n                                    {\r\n                                        this.props.messages.groupmesslist ? this.props.messages.groupmesslist.messagelist ? this.props.messages.groupmesslist.messagelist.map(mess => {\r\n\r\n                                            return (\r\n                                                <GroupMess\r\n                                                    mess={mess}\r\n                                                    yourProfile={yourProfile}\r\n                                                // seenMessage={this.props.seenMessage}\r\n                                                />\r\n\r\n                                            )\r\n                                        }\r\n                                        ) : '' : ''\r\n                                    }\r\n\r\n                                    <div className=\"row no-gutters sent\">\r\n                                        <div className=\"col-xl-6\">\r\n                                        </div>\r\n                                        <div className=\"col-xl-6 sent_mess\">\r\n                                            {\r\n\r\n                                                this.props.messages.groupmesslist ? this.props.messages.groupmesslist.seenBy ? this.props.messages.groupmesslist.seenBy.map(seen => {\r\n                                                    return (\r\n                                                        <img className=\"seen_avt\" src={seen.avt ? seen.avt : ''}></img>\r\n                                                    )\r\n                                                }\r\n                                                ) : '' : ''\r\n\r\n                                            }\r\n                                        </div>\r\n\r\n                                    </div>\r\n\r\n                                    {\r\n                                        this.state.gifToggle ?\r\n                                            <div className=\"gif_picker\" style={{ position: 'fixed', zIndex: 100, top: \"32%\", left: \"50%\" }}> <GifPicker apiKey={\"xRQzMksF1tPmqAvVPYlIGeJHZ2EBVXyh\"} onSelected={(gif) => this.sendGif(gif.downsized.url)}></GifPicker></div>\r\n                                            : null\r\n                                    }\r\n                                </div>\r\n\r\n                                {\r\n\r\n                                    this.state.mess.sentTo ?\r\n                                        <form onSubmit={(event) => this.submitForm(event)}>\r\n\r\n                                            <div className=\"chat_box\">\r\n                                                <div className=\"chat_area\">\r\n\r\n                                                    {/* <input value={this.state.mess.sentTo} hidden=\"true\" type=\"text\" placeholder=\"Nhập tin nhắn....\"></input>\r\n                                          <input value={this.state.mess.sentBy} hidden=\"true\" type=\"text\" placeholder=\"Nhập tin nhắn....\"></input> */}\r\n                                                    <input id=\"description_textarea\" type=\"text\" value={this.state.content} placeholder=\"Nhập tin nhắn....\" onChange={(event) => { this.handleChange(event) }}></input>\r\n                                                    <div className=\"action_icon\" onClick={this.sendHeartIcon}>\r\n                                                        <Heart size={32} strokeWidth={1} color=\"black\"></Heart>\r\n                                                    </div>\r\n                                                    <div className=\"action_icon\" onClick={this.GifIconClick}>\r\n                                                        <Ghost size={32} strokeWidth={1} color=\"black\"> </Ghost>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"img_upload\">\r\n                                                    <label className=\"custom-file-upload\">\r\n                                                        <input type=\"file\" onChange={(event) => this.onFileChange(event)} />\r\n                                                        <Photo size={32} strokeWidth={1} color=\"black\"></Photo>\r\n\r\n                                                    </label>\r\n                                                </div>\r\n                                                <div className=\"emoji_icon\">\r\n                                                    <Sticker onClick={this.emojiClick} size={32} strokeWidth={1} color=\"black\"></Sticker>\r\n\r\n                                                    {\r\n                                                        this.state.emojiToggle ?\r\n                                                            <Picker style={{ position: \"absolute\", right: 0, bottom: \"10vh\" }} onSelect={this.addEmoji} />\r\n                                                            : null\r\n                                                    }\r\n\r\n\r\n                                                </div>\r\n                                                <div id=\"sent_btn\" className=\"send_icon\" onClick={(event) => { this.submitForm(event) }}>\r\n                                                    <Send size={32} strokeWidth={1} color=\"white\"></Send>\r\n                                                </div>\r\n                                            </div>\r\n                                        </form> : ''\r\n                                }\r\n\r\n                            </div>\r\n                            \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <Dialog open={this.state.newmess} onClose={() => this.setState({ newmess: false })}>\r\n                    <div className=\"newmess_contain\">\r\n                        <div className=\"newmess_header\">\r\n\r\n                            <h5>Gửi tin nhắn mới</h5>\r\n\r\n                            <h6 className={this.state.sendinguserlist.length > 0 ? \"active\" : \"disable\"} onClick={() => this.createGroup(this.state.sendinguserlistid)}>Tiếp</h6>\r\n                        </div>\r\n                        <hr></hr>\r\n                        <div className=\"searchbar\">\r\n\r\n                            {\r\n                                this.state.sendinguserlist.map(sendlist => {\r\n                                    return (\r\n                                        <StyleClip label={sendlist} color=\"primary\" onDelete={() => { this.removelist(sendlist) }}></StyleClip>\r\n                                    )\r\n                                })\r\n                            }\r\n                            <SearchBar yourProfile={yourProfile} sendinguserlistid={this.state.sendinguserlistid} removelist={this.removelist} addList={this.addList} />\r\n                        </div>\r\n                        <hr></hr>\r\n                        {/* <div className=\"suggest\">\r\n                            <h6>Gợi ý</h6>\r\n                            {\r\n                                this.props.messages ?\r\n                                    this.props.messages.grouplist ?\r\n                                        this.props.messages.grouplist.map(con => {\r\n                                            return (\r\n                                                <div>\r\n                                                    {\r\n\r\n                                                        <div className=\"user_contain\">\r\n                                                            <div className=\"uinfo\">\r\n                                                                <img src={con.user[0].avt}></img>\r\n                                                                <h2>{con.user[0].userName}</h2>\r\n                                                            </div>\r\n\r\n                                                            <Checkbox\r\n                                                                icon={<Circle size={24} strokeWidth={0.5} color=\"grey\"></Circle>}\r\n                                                                checkedIcon={<CircleCheck size={24} strokeWidth={0.5} color=\"white\" fill=\"#00abfb\"></CircleCheck>}\r\n\r\n                                                                checked={this.state.sendinguserlistid.includes(con.user[0]._id)}\r\n\r\n                                                                onChange={() =>\r\n                                                                    this.state.sendinguserlistid.includes(con.user[0]._id) ?\r\n                                                                        this.removelist(con.user[0]._id, con.user[0].userName) :\r\n                                                                        this.addList(con.user[0]._id, con.user[0].userName)\r\n                                                                }\r\n                                                            // checked={checked}\r\n                                                            // onChange={handleChange}\r\n                                                            // inputProps={{ 'aria-label': 'controlled' }}\r\n                                                            />\r\n                                                        </div>\r\n                                                        // :                                                        \r\n                                                        // <div className=\"user_contain\">\r\n                                                        //   <img src={con.user2.avt}></img>\r\n                                                        //     <h2>{con.user2.userName}</h2>\r\n\r\n                                                        // </div>\r\n\r\n                                                    }\r\n                                                </div>)\r\n                                        }) : '' : ''\r\n                            }\r\n                        </div> */}\r\n\r\n\r\n\r\n                    </div>\r\n\r\n                </Dialog>\r\n                {\r\n                    <Dialog open={this.state.editmess} onClose={() => this.setState({ editmess: false })}>\r\n                        <EditMess disableGroupMess={this.disableGroupMess} history={this.props.history} follow={this.follow} unfollow={this.unfollow} outGroup={this.outGroup} onGroupImgChange={this.onGroupImgChange} createGroupEvent={this.createGroupEvent} editTitle={this.editTitle} conversation={this.props.messages.groupmesslist} yourProfile={yourProfile} addMember={this.addMember} removeMember={this.removeMember}>\r\n                        </EditMess>\r\n                    </Dialog>\r\n                }\r\n\r\n\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user,\r\n        messages: state.messages\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Message);"]},"metadata":{},"sourceType":"module"}