{"ast":null,"code":"import { eachProp, is, toArray, isAnimatedString, Globals, getFluidValue, useLayoutEffect, each, raf, flush, FluidValue, deprecateInterpolate, callFluidObservers, frameLoop, hasFluidValue, flushCalls, isEqual, getFluidObservers, addFluidObserver, removeFluidObserver, noop, useMemoOne, deprecateDirectCall, useForceUpdate, usePrev, useOnce, createInterpolator, createStringInterpolator } from '@react-spring/shared';\nexport { Globals, createInterpolator } from '@react-spring/shared';\nimport { useContext, createElement, createContext, useMemo, useRef, useState, Fragment } from 'react';\nimport { getAnimated, AnimatedValue, getPayload, AnimatedString, getAnimatedType, setAnimated } from '@react-spring/animated';\nexport * from '@react-spring/types/animated';\nexport * from '@react-spring/types/interpolation';\n\nfunction callProp(value) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return is.fun(value) ? value(...args) : value;\n}\n\nconst matchProp = (value, key) => value === true || !!(key && value && (is.fun(value) ? value(key) : toArray(value).includes(key)));\n\nconst resolveProp = (prop, key) => is.obj(prop) ? key && prop[key] : prop;\n\nconst getDefaultProp = (props, key) => props.default === true ? props[key] : props.default ? props.default[key] : void 0;\n\nconst noopTransform = value => value;\n\nconst getDefaultProps = function (props) {\n  let transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noopTransform;\n  let keys = DEFAULT_PROPS;\n\n  if (props.default && props.default !== true) {\n    props = props.default;\n    keys = Object.keys(props);\n  }\n\n  const defaults = {};\n\n  for (const key of keys) {\n    const value = transform(props[key], key);\n\n    if (!is.und(value)) {\n      defaults[key] = value;\n    }\n  }\n\n  return defaults;\n};\n\nconst DEFAULT_PROPS = [\"config\", \"onProps\", \"onStart\", \"onChange\", \"onPause\", \"onResume\", \"onRest\"];\nconst RESERVED_PROPS = {\n  config: 1,\n  from: 1,\n  to: 1,\n  ref: 1,\n  loop: 1,\n  reset: 1,\n  pause: 1,\n  cancel: 1,\n  reverse: 1,\n  immediate: 1,\n  default: 1,\n  delay: 1,\n  onProps: 1,\n  onStart: 1,\n  onChange: 1,\n  onPause: 1,\n  onResume: 1,\n  onRest: 1,\n  onResolve: 1,\n  items: 1,\n  trail: 1,\n  sort: 1,\n  expires: 1,\n  initial: 1,\n  enter: 1,\n  update: 1,\n  leave: 1,\n  children: 1,\n  onDestroyed: 1,\n  keys: 1,\n  callId: 1,\n  parentId: 1\n};\n\nfunction getForwardProps(props) {\n  const forward = {};\n  let count = 0;\n  eachProp(props, (value, prop) => {\n    if (!RESERVED_PROPS[prop]) {\n      forward[prop] = value;\n      count++;\n    }\n  });\n\n  if (count) {\n    return forward;\n  }\n}\n\nfunction inferTo(props) {\n  const to = getForwardProps(props);\n\n  if (to) {\n    const out = {\n      to\n    };\n    eachProp(props, (val, key) => key in to || (out[key] = val));\n    return out;\n  }\n\n  return { ...props\n  };\n}\n\nfunction computeGoal(value) {\n  value = getFluidValue(value);\n  return is.arr(value) ? value.map(computeGoal) : isAnimatedString(value) ? Globals.createStringInterpolator({\n    range: [0, 1],\n    output: [value, value]\n  })(1) : value;\n}\n\nfunction hasProps(props) {\n  for (const _ in props) return true;\n\n  return false;\n}\n\nfunction isAsyncTo(to) {\n  return is.fun(to) || is.arr(to) && is.obj(to[0]);\n}\n\nfunction detachRefs(ctrl, ref) {\n  var _a;\n\n  (_a = ctrl.ref) == null ? void 0 : _a.delete(ctrl);\n  ref == null ? void 0 : ref.delete(ctrl);\n}\n\nfunction replaceRef(ctrl, ref) {\n  var _a;\n\n  if (ref && ctrl.ref !== ref) {\n    (_a = ctrl.ref) == null ? void 0 : _a.delete(ctrl);\n    ref.add(ctrl);\n    ctrl.ref = ref;\n  }\n}\n\nfunction useChain(refs, timeSteps) {\n  let timeFrame = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e3;\n  useLayoutEffect(() => {\n    if (timeSteps) {\n      let prevDelay = 0;\n      each(refs, (ref, i) => {\n        const controllers = ref.current;\n\n        if (controllers.length) {\n          let delay = timeFrame * timeSteps[i];\n          if (isNaN(delay)) delay = prevDelay;else prevDelay = delay;\n          each(controllers, ctrl => {\n            each(ctrl.queue, props => {\n              const memoizedDelayProp = props.delay;\n\n              props.delay = key => delay + callProp(memoizedDelayProp || 0, key);\n            });\n            ctrl.start();\n          });\n        }\n      });\n    } else {\n      let p = Promise.resolve();\n      each(refs, ref => {\n        const controllers = ref.current;\n\n        if (controllers.length) {\n          const queues = controllers.map(ctrl => {\n            const q = ctrl.queue;\n            ctrl.queue = [];\n            return q;\n          });\n          p = p.then(() => {\n            each(controllers, (ctrl, i) => each(queues[i] || [], update => ctrl.queue.push(update)));\n            return ref.start();\n          });\n        }\n      });\n    }\n  });\n}\n\nconst config = {\n  default: {\n    tension: 170,\n    friction: 26\n  },\n  gentle: {\n    tension: 120,\n    friction: 14\n  },\n  wobbly: {\n    tension: 180,\n    friction: 12\n  },\n  stiff: {\n    tension: 210,\n    friction: 20\n  },\n  slow: {\n    tension: 280,\n    friction: 60\n  },\n  molasses: {\n    tension: 280,\n    friction: 120\n  }\n};\n\nconst linear = t => t;\n\nconst defaults = { ...config.default,\n  mass: 1,\n  damping: 1,\n  easing: linear,\n  clamp: false\n};\n\nclass AnimationConfig {\n  constructor() {\n    this.velocity = 0;\n    Object.assign(this, defaults);\n  }\n\n}\n\nfunction mergeConfig(config, newConfig, defaultConfig) {\n  if (defaultConfig) {\n    defaultConfig = { ...defaultConfig\n    };\n    sanitizeConfig(defaultConfig, newConfig);\n    newConfig = { ...defaultConfig,\n      ...newConfig\n    };\n  }\n\n  sanitizeConfig(config, newConfig);\n  Object.assign(config, newConfig);\n\n  for (const key in defaults) {\n    if (config[key] == null) {\n      config[key] = defaults[key];\n    }\n  }\n\n  let {\n    mass,\n    frequency,\n    damping\n  } = config;\n\n  if (!is.und(frequency)) {\n    if (frequency < 0.01) frequency = 0.01;\n    if (damping < 0) damping = 0;\n    config.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;\n    config.friction = 4 * Math.PI * damping * mass / frequency;\n  }\n\n  return config;\n}\n\nfunction sanitizeConfig(config, props) {\n  if (!is.und(props.decay)) {\n    config.duration = void 0;\n  } else {\n    const isTensionConfig = !is.und(props.tension) || !is.und(props.friction);\n\n    if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {\n      config.duration = void 0;\n      config.decay = void 0;\n    }\n\n    if (isTensionConfig) {\n      config.frequency = void 0;\n    }\n  }\n}\n\nconst emptyArray = [];\n\nclass Animation {\n  constructor() {\n    this.changed = false;\n    this.values = emptyArray;\n    this.toValues = null;\n    this.fromValues = emptyArray;\n    this.config = new AnimationConfig();\n    this.immediate = false;\n  }\n\n}\n\nfunction scheduleProps(callId, _ref) {\n  let {\n    key,\n    props,\n    defaultProps,\n    state,\n    actions\n  } = _ref;\n  return new Promise((resolve, reject) => {\n    var _a;\n\n    let delay;\n    let timeout;\n    let cancel = matchProp((_a = props.cancel) != null ? _a : defaultProps == null ? void 0 : defaultProps.cancel, key);\n\n    if (cancel) {\n      onStart();\n    } else {\n      if (!is.und(props.pause)) {\n        state.paused = matchProp(props.pause, key);\n      }\n\n      let pause = defaultProps == null ? void 0 : defaultProps.pause;\n\n      if (pause !== true) {\n        pause = state.paused || matchProp(pause, key);\n      }\n\n      delay = callProp(props.delay || 0, key);\n\n      if (pause) {\n        state.resumeQueue.add(onResume);\n        actions.pause();\n      } else {\n        actions.resume();\n        onResume();\n      }\n    }\n\n    function onPause() {\n      state.resumeQueue.add(onResume);\n      state.timeouts.delete(timeout);\n      timeout.cancel();\n      delay = timeout.time - raf.now();\n    }\n\n    function onResume() {\n      if (delay > 0) {\n        timeout = raf.setTimeout(onStart, delay);\n        state.pauseQueue.add(onPause);\n        state.timeouts.add(timeout);\n      } else {\n        onStart();\n      }\n    }\n\n    function onStart() {\n      state.pauseQueue.delete(onPause);\n      state.timeouts.delete(timeout);\n\n      if (callId <= (state.cancelId || 0)) {\n        cancel = true;\n      }\n\n      try {\n        actions.start({ ...props,\n          callId,\n          cancel\n        }, resolve);\n      } catch (err) {\n        reject(err);\n      }\n    }\n  });\n}\n\nconst getCombinedResult = (target, results) => results.length == 1 ? results[0] : results.some(result => result.cancelled) ? getCancelledResult(target.get()) : results.every(result => result.noop) ? getNoopResult(target.get()) : getFinishedResult(target.get(), results.every(result => result.finished));\n\nconst getNoopResult = value => ({\n  value,\n  noop: true,\n  finished: true,\n  cancelled: false\n});\n\nconst getFinishedResult = function (value, finished) {\n  let cancelled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return {\n    value,\n    finished,\n    cancelled\n  };\n};\n\nconst getCancelledResult = value => ({\n  value,\n  cancelled: true,\n  finished: false\n});\n\nfunction runAsync(to, props, state, target) {\n  const {\n    callId,\n    parentId,\n    onRest\n  } = props;\n  const {\n    asyncTo: prevTo,\n    promise: prevPromise\n  } = state;\n\n  if (!parentId && to === prevTo && !props.reset) {\n    return prevPromise;\n  }\n\n  return state.promise = (async () => {\n    state.asyncId = callId;\n    state.asyncTo = to;\n    const defaultProps = getDefaultProps(props, (value, key) => key === \"onRest\" ? void 0 : value);\n    let preventBail;\n    let bail;\n    const bailPromise = new Promise((resolve, reject) => (preventBail = resolve, bail = reject));\n\n    const bailIfEnded = bailSignal => {\n      const bailResult = callId <= (state.cancelId || 0) && getCancelledResult(target) || callId !== state.asyncId && getFinishedResult(target, false);\n\n      if (bailResult) {\n        bailSignal.result = bailResult;\n        bail(bailSignal);\n        throw bailSignal;\n      }\n    };\n\n    const animate = (arg1, arg2) => {\n      const bailSignal = new BailSignal();\n      const skipAnimationSignal = new SkipAniamtionSignal();\n      return (async () => {\n        if (Globals.skipAnimation) {\n          stopAsync(state);\n          skipAnimationSignal.result = getFinishedResult(target, false);\n          bail(skipAnimationSignal);\n          throw skipAnimationSignal;\n        }\n\n        bailIfEnded(bailSignal);\n        const props2 = is.obj(arg1) ? { ...arg1\n        } : { ...arg2,\n          to: arg1\n        };\n        props2.parentId = callId;\n        eachProp(defaultProps, (value, key) => {\n          if (is.und(props2[key])) {\n            props2[key] = value;\n          }\n        });\n        const result2 = await target.start(props2);\n        bailIfEnded(bailSignal);\n\n        if (state.paused) {\n          await new Promise(resume => {\n            state.resumeQueue.add(resume);\n          });\n        }\n\n        return result2;\n      })();\n    };\n\n    let result;\n\n    if (Globals.skipAnimation) {\n      stopAsync(state);\n      return getFinishedResult(target, false);\n    }\n\n    try {\n      let animating;\n\n      if (is.arr(to)) {\n        animating = (async queue => {\n          for (const props2 of queue) {\n            await animate(props2);\n          }\n        })(to);\n      } else {\n        animating = Promise.resolve(to(animate, target.stop.bind(target)));\n      }\n\n      await Promise.all([animating.then(preventBail), bailPromise]);\n      result = getFinishedResult(target.get(), true, false);\n    } catch (err) {\n      if (err instanceof BailSignal) {\n        result = err.result;\n      } else if (err instanceof SkipAniamtionSignal) {\n        result = err.result;\n      } else {\n        throw err;\n      }\n    } finally {\n      if (callId == state.asyncId) {\n        state.asyncId = parentId;\n        state.asyncTo = parentId ? prevTo : void 0;\n        state.promise = parentId ? prevPromise : void 0;\n      }\n    }\n\n    if (is.fun(onRest)) {\n      raf.batchedUpdates(() => {\n        onRest(result, target, target.item);\n      });\n    }\n\n    return result;\n  })();\n}\n\nfunction stopAsync(state, cancelId) {\n  flush(state.timeouts, t => t.cancel());\n  state.pauseQueue.clear();\n  state.resumeQueue.clear();\n  state.asyncId = state.asyncTo = state.promise = void 0;\n  if (cancelId) state.cancelId = cancelId;\n}\n\nclass BailSignal extends Error {\n  constructor() {\n    super(\"An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.\");\n  }\n\n}\n\nclass SkipAniamtionSignal extends Error {\n  constructor() {\n    super(\"SkipAnimationSignal\");\n  }\n\n}\n\nconst isFrameValue = value => value instanceof FrameValue;\n\nlet nextId = 1;\n\nclass FrameValue extends FluidValue {\n  constructor() {\n    super(...arguments);\n    this.id = nextId++;\n    this._priority = 0;\n  }\n\n  get priority() {\n    return this._priority;\n  }\n\n  set priority(priority) {\n    if (this._priority != priority) {\n      this._priority = priority;\n\n      this._onPriorityChange(priority);\n    }\n  }\n\n  get() {\n    const node = getAnimated(this);\n    return node && node.getValue();\n  }\n\n  to() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return Globals.to(this, args);\n  }\n\n  interpolate() {\n    deprecateInterpolate();\n\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return Globals.to(this, args);\n  }\n\n  toJSON() {\n    return this.get();\n  }\n\n  observerAdded(count) {\n    if (count == 1) this._attach();\n  }\n\n  observerRemoved(count) {\n    if (count == 0) this._detach();\n  }\n\n  _attach() {}\n\n  _detach() {}\n\n  _onChange(value) {\n    let idle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    callFluidObservers(this, {\n      type: \"change\",\n      parent: this,\n      value,\n      idle\n    });\n  }\n\n  _onPriorityChange(priority) {\n    if (!this.idle) {\n      frameLoop.sort(this);\n    }\n\n    callFluidObservers(this, {\n      type: \"priority\",\n      parent: this,\n      priority\n    });\n  }\n\n}\n\nconst $P = Symbol.for(\"SpringPhase\");\nconst HAS_ANIMATED = 1;\nconst IS_ANIMATING = 2;\nconst IS_PAUSED = 4;\n\nconst hasAnimated = target => (target[$P] & HAS_ANIMATED) > 0;\n\nconst isAnimating = target => (target[$P] & IS_ANIMATING) > 0;\n\nconst isPaused = target => (target[$P] & IS_PAUSED) > 0;\n\nconst setActiveBit = (target, active) => active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;\n\nconst setPausedBit = (target, paused) => paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;\n\nclass SpringValue extends FrameValue {\n  constructor(arg1, arg2) {\n    super();\n    this.animation = new Animation();\n    this.defaultProps = {};\n    this._state = {\n      paused: false,\n      pauseQueue: new Set(),\n      resumeQueue: new Set(),\n      timeouts: new Set()\n    };\n    this._pendingCalls = new Set();\n    this._lastCallId = 0;\n    this._lastToId = 0;\n    this._memoizedDuration = 0;\n\n    if (!is.und(arg1) || !is.und(arg2)) {\n      const props = is.obj(arg1) ? { ...arg1\n      } : { ...arg2,\n        from: arg1\n      };\n\n      if (is.und(props.default)) {\n        props.default = true;\n      }\n\n      this.start(props);\n    }\n  }\n\n  get idle() {\n    return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);\n  }\n\n  get goal() {\n    return getFluidValue(this.animation.to);\n  }\n\n  get velocity() {\n    const node = getAnimated(this);\n    return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map(node2 => node2.lastVelocity || 0);\n  }\n\n  get hasAnimated() {\n    return hasAnimated(this);\n  }\n\n  get isAnimating() {\n    return isAnimating(this);\n  }\n\n  get isPaused() {\n    return isPaused(this);\n  }\n\n  advance(dt) {\n    let idle = true;\n    let changed = false;\n    const anim = this.animation;\n    let {\n      config,\n      toValues\n    } = anim;\n    const payload = getPayload(anim.to);\n\n    if (!payload && hasFluidValue(anim.to)) {\n      toValues = toArray(getFluidValue(anim.to));\n    }\n\n    anim.values.forEach((node2, i) => {\n      if (node2.done) return;\n      const to = node2.constructor == AnimatedString ? 1 : payload ? payload[i].lastPosition : toValues[i];\n      let finished = anim.immediate;\n      let position = to;\n\n      if (!finished) {\n        position = node2.lastPosition;\n\n        if (config.tension <= 0) {\n          node2.done = true;\n          return;\n        }\n\n        let elapsed = node2.elapsedTime += dt;\n        const from = anim.fromValues[i];\n        const v0 = node2.v0 != null ? node2.v0 : node2.v0 = is.arr(config.velocity) ? config.velocity[i] : config.velocity;\n        let velocity;\n\n        if (!is.und(config.duration)) {\n          let p = 1;\n\n          if (config.duration > 0) {\n            if (this._memoizedDuration !== config.duration) {\n              this._memoizedDuration = config.duration;\n\n              if (node2.durationProgress > 0) {\n                node2.elapsedTime = config.duration * node2.durationProgress;\n                elapsed = node2.elapsedTime += dt;\n              }\n            }\n\n            p = (config.progress || 0) + elapsed / this._memoizedDuration;\n            p = p > 1 ? 1 : p < 0 ? 0 : p;\n            node2.durationProgress = p;\n          }\n\n          position = from + config.easing(p) * (to - from);\n          velocity = (position - node2.lastPosition) / dt;\n          finished = p == 1;\n        } else if (config.decay) {\n          const decay = config.decay === true ? 0.998 : config.decay;\n          const e = Math.exp(-(1 - decay) * elapsed);\n          position = from + v0 / (1 - decay) * (1 - e);\n          finished = Math.abs(node2.lastPosition - position) < 0.1;\n          velocity = v0 * e;\n        } else {\n          velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;\n          const precision = config.precision || (from == to ? 5e-3 : Math.min(1, Math.abs(to - from) * 1e-3));\n          const restVelocity = config.restVelocity || precision / 10;\n          const bounceFactor = config.clamp ? 0 : config.bounce;\n          const canBounce = !is.und(bounceFactor);\n          const isGrowing = from == to ? node2.v0 > 0 : from < to;\n          let isMoving;\n          let isBouncing = false;\n          const step = 1;\n          const numSteps = Math.ceil(dt / step);\n\n          for (let n = 0; n < numSteps; ++n) {\n            isMoving = Math.abs(velocity) > restVelocity;\n\n            if (!isMoving) {\n              finished = Math.abs(to - position) <= precision;\n\n              if (finished) {\n                break;\n              }\n            }\n\n            if (canBounce) {\n              isBouncing = position == to || position > to == isGrowing;\n\n              if (isBouncing) {\n                velocity = -velocity * bounceFactor;\n                position = to;\n              }\n            }\n\n            const springForce = -config.tension * 1e-6 * (position - to);\n            const dampingForce = -config.friction * 1e-3 * velocity;\n            const acceleration = (springForce + dampingForce) / config.mass;\n            velocity = velocity + acceleration * step;\n            position = position + velocity * step;\n          }\n        }\n\n        node2.lastVelocity = velocity;\n\n        if (Number.isNaN(position)) {\n          console.warn(`Got NaN while animating:`, this);\n          finished = true;\n        }\n      }\n\n      if (payload && !payload[i].done) {\n        finished = false;\n      }\n\n      if (finished) {\n        node2.done = true;\n      } else {\n        idle = false;\n      }\n\n      if (node2.setValue(position, config.round)) {\n        changed = true;\n      }\n    });\n    const node = getAnimated(this);\n\n    if (idle) {\n      const value = getFluidValue(anim.to);\n\n      if (node.setValue(value) || changed) {\n        this._onChange(value);\n      }\n\n      this._stop();\n    } else if (changed) {\n      this._onChange(node.getValue());\n    }\n  }\n\n  set(value) {\n    raf.batchedUpdates(() => {\n      this._stop();\n\n      this._focus(value);\n\n      this._set(value);\n    });\n    return this;\n  }\n\n  pause() {\n    this._update({\n      pause: true\n    });\n  }\n\n  resume() {\n    this._update({\n      pause: false\n    });\n  }\n\n  finish() {\n    if (isAnimating(this)) {\n      const {\n        to,\n        config\n      } = this.animation;\n      raf.batchedUpdates(() => {\n        this._onStart();\n\n        if (!config.decay) {\n          this._set(to, false);\n        }\n\n        this._stop();\n      });\n    }\n\n    return this;\n  }\n\n  update(props) {\n    const queue = this.queue || (this.queue = []);\n    queue.push(props);\n    return this;\n  }\n\n  start(to, arg2) {\n    let queue;\n\n    if (!is.und(to)) {\n      queue = [is.obj(to) ? to : { ...arg2,\n        to\n      }];\n    } else {\n      queue = this.queue || [];\n      this.queue = [];\n    }\n\n    return Promise.all(queue.map(props => this._update(props))).then(results => getCombinedResult(this, results));\n  }\n\n  stop(cancel) {\n    const {\n      to\n    } = this.animation;\n\n    this._focus(this.get());\n\n    stopAsync(this._state, cancel && this._lastCallId);\n    raf.batchedUpdates(() => this._stop(to, cancel));\n    return this;\n  }\n\n  reset() {\n    this._update({\n      reset: true\n    });\n  }\n\n  eventObserved(event) {\n    if (event.type == \"change\") {\n      this._start();\n    } else if (event.type == \"priority\") {\n      this.priority = event.priority + 1;\n    }\n  }\n\n  _prepareNode(props) {\n    const key = this.key || \"\";\n    let {\n      to,\n      from\n    } = props;\n    to = is.obj(to) ? to[key] : to;\n\n    if (to == null || isAsyncTo(to)) {\n      to = void 0;\n    }\n\n    from = is.obj(from) ? from[key] : from;\n\n    if (from == null) {\n      from = void 0;\n    }\n\n    const range = {\n      to,\n      from\n    };\n\n    if (!hasAnimated(this)) {\n      if (props.reverse) [to, from] = [from, to];\n      from = getFluidValue(from);\n\n      if (!is.und(from)) {\n        this._set(from);\n      } else if (!getAnimated(this)) {\n        this._set(to);\n      }\n    }\n\n    return range;\n  }\n\n  _update(_ref2, isLoop) {\n    let { ...props\n    } = _ref2;\n    const {\n      key,\n      defaultProps\n    } = this;\n    if (props.default) Object.assign(defaultProps, getDefaultProps(props, (value, prop) => /^on/.test(prop) ? resolveProp(value, key) : value));\n    mergeActiveFn(this, props, \"onProps\");\n    sendEvent(this, \"onProps\", props, this);\n\n    const range = this._prepareNode(props);\n\n    if (Object.isFrozen(this)) {\n      throw Error(\"Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?\");\n    }\n\n    const state = this._state;\n    return scheduleProps(++this._lastCallId, {\n      key,\n      props,\n      defaultProps,\n      state,\n      actions: {\n        pause: () => {\n          if (!isPaused(this)) {\n            setPausedBit(this, true);\n            flushCalls(state.pauseQueue);\n            sendEvent(this, \"onPause\", getFinishedResult(this, checkFinished(this, this.animation.to)), this);\n          }\n        },\n        resume: () => {\n          if (isPaused(this)) {\n            setPausedBit(this, false);\n\n            if (isAnimating(this)) {\n              this._resume();\n            }\n\n            flushCalls(state.resumeQueue);\n            sendEvent(this, \"onResume\", getFinishedResult(this, checkFinished(this, this.animation.to)), this);\n          }\n        },\n        start: this._merge.bind(this, range)\n      }\n    }).then(result => {\n      if (props.loop && result.finished && !(isLoop && result.noop)) {\n        const nextProps = createLoopUpdate(props);\n\n        if (nextProps) {\n          return this._update(nextProps, true);\n        }\n      }\n\n      return result;\n    });\n  }\n\n  _merge(range, props, resolve) {\n    if (props.cancel) {\n      this.stop(true);\n      return resolve(getCancelledResult(this));\n    }\n\n    const hasToProp = !is.und(range.to);\n    const hasFromProp = !is.und(range.from);\n\n    if (hasToProp || hasFromProp) {\n      if (props.callId > this._lastToId) {\n        this._lastToId = props.callId;\n      } else {\n        return resolve(getCancelledResult(this));\n      }\n    }\n\n    const {\n      key,\n      defaultProps,\n      animation: anim\n    } = this;\n    const {\n      to: prevTo,\n      from: prevFrom\n    } = anim;\n    let {\n      to = prevTo,\n      from = prevFrom\n    } = range;\n\n    if (hasFromProp && !hasToProp && (!props.default || is.und(to))) {\n      to = from;\n    }\n\n    if (props.reverse) [to, from] = [from, to];\n    const hasFromChanged = !isEqual(from, prevFrom);\n\n    if (hasFromChanged) {\n      anim.from = from;\n    }\n\n    from = getFluidValue(from);\n    const hasToChanged = !isEqual(to, prevTo);\n\n    if (hasToChanged) {\n      this._focus(to);\n    }\n\n    const hasAsyncTo = isAsyncTo(props.to);\n    const {\n      config\n    } = anim;\n    const {\n      decay,\n      velocity\n    } = config;\n\n    if (hasToProp || hasFromProp) {\n      config.velocity = 0;\n    }\n\n    if (props.config && !hasAsyncTo) {\n      mergeConfig(config, callProp(props.config, key), props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0);\n    }\n\n    let node = getAnimated(this);\n\n    if (!node || is.und(to)) {\n      return resolve(getFinishedResult(this, true));\n    }\n\n    const reset = is.und(props.reset) ? hasFromProp && !props.default : !is.und(from) && matchProp(props.reset, key);\n    const value = reset ? from : this.get();\n    const goal = computeGoal(to);\n    const isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal);\n    const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));\n\n    if (hasToChanged) {\n      const nodeType = getAnimatedType(to);\n\n      if (nodeType !== node.constructor) {\n        if (immediate) {\n          node = this._set(goal);\n        } else throw Error(`Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the \"to\" prop suggests`);\n      }\n    }\n\n    const goalType = node.constructor;\n    let started = hasFluidValue(to);\n    let finished = false;\n\n    if (!started) {\n      const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;\n\n      if (hasToChanged || hasValueChanged) {\n        finished = isEqual(computeGoal(value), goal);\n        started = !finished;\n      }\n\n      if (!isEqual(config.decay, decay) || !isEqual(config.velocity, velocity)) {\n        started = true;\n      }\n    }\n\n    if (finished && isAnimating(this)) {\n      if (anim.changed && !reset) {\n        started = true;\n      } else if (!started) {\n        this._stop(prevTo);\n      }\n    }\n\n    if (!hasAsyncTo) {\n      if (started || hasFluidValue(prevTo)) {\n        anim.values = node.getPayload();\n        anim.toValues = hasFluidValue(to) ? null : goalType == AnimatedString ? [1] : toArray(goal);\n      }\n\n      if (anim.immediate != immediate) {\n        anim.immediate = immediate;\n\n        if (!immediate && !reset) {\n          this._set(prevTo);\n        }\n      }\n\n      if (started) {\n        const {\n          onRest\n        } = anim;\n        each(ACTIVE_EVENTS, type => mergeActiveFn(this, props, type));\n        const result = getFinishedResult(this, checkFinished(this, prevTo));\n        flushCalls(this._pendingCalls, result);\n\n        this._pendingCalls.add(resolve);\n\n        if (anim.changed) raf.batchedUpdates(() => {\n          var _a;\n\n          anim.changed = !reset;\n          onRest == null ? void 0 : onRest(result, this);\n\n          if (reset) {\n            callProp(defaultProps.onRest, result);\n          } else {\n            (_a = anim.onStart) == null ? void 0 : _a.call(anim, result, this);\n          }\n        });\n      }\n    }\n\n    if (reset) {\n      this._set(value);\n    }\n\n    if (hasAsyncTo) {\n      resolve(runAsync(props.to, props, this._state, this));\n    } else if (started) {\n      this._start();\n    } else if (isAnimating(this) && !hasToChanged) {\n      this._pendingCalls.add(resolve);\n    } else {\n      resolve(getNoopResult(value));\n    }\n  }\n\n  _focus(value) {\n    const anim = this.animation;\n\n    if (value !== anim.to) {\n      if (getFluidObservers(this)) {\n        this._detach();\n      }\n\n      anim.to = value;\n\n      if (getFluidObservers(this)) {\n        this._attach();\n      }\n    }\n  }\n\n  _attach() {\n    let priority = 0;\n    const {\n      to\n    } = this.animation;\n\n    if (hasFluidValue(to)) {\n      addFluidObserver(to, this);\n\n      if (isFrameValue(to)) {\n        priority = to.priority + 1;\n      }\n    }\n\n    this.priority = priority;\n  }\n\n  _detach() {\n    const {\n      to\n    } = this.animation;\n\n    if (hasFluidValue(to)) {\n      removeFluidObserver(to, this);\n    }\n  }\n\n  _set(arg) {\n    let idle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const value = getFluidValue(arg);\n\n    if (!is.und(value)) {\n      const oldNode = getAnimated(this);\n\n      if (!oldNode || !isEqual(value, oldNode.getValue())) {\n        const nodeType = getAnimatedType(value);\n\n        if (!oldNode || oldNode.constructor != nodeType) {\n          setAnimated(this, nodeType.create(value));\n        } else {\n          oldNode.setValue(value);\n        }\n\n        if (oldNode) {\n          raf.batchedUpdates(() => {\n            this._onChange(value, idle);\n          });\n        }\n      }\n    }\n\n    return getAnimated(this);\n  }\n\n  _onStart() {\n    const anim = this.animation;\n\n    if (!anim.changed) {\n      anim.changed = true;\n      sendEvent(this, \"onStart\", getFinishedResult(this, checkFinished(this, anim.to)), this);\n    }\n  }\n\n  _onChange(value, idle) {\n    if (!idle) {\n      this._onStart();\n\n      callProp(this.animation.onChange, value, this);\n    }\n\n    callProp(this.defaultProps.onChange, value, this);\n\n    super._onChange(value, idle);\n  }\n\n  _start() {\n    const anim = this.animation;\n    getAnimated(this).reset(getFluidValue(anim.to));\n\n    if (!anim.immediate) {\n      anim.fromValues = anim.values.map(node => node.lastPosition);\n    }\n\n    if (!isAnimating(this)) {\n      setActiveBit(this, true);\n\n      if (!isPaused(this)) {\n        this._resume();\n      }\n    }\n  }\n\n  _resume() {\n    if (Globals.skipAnimation) {\n      this.finish();\n    } else {\n      frameLoop.start(this);\n    }\n  }\n\n  _stop(goal, cancel) {\n    if (isAnimating(this)) {\n      setActiveBit(this, false);\n      const anim = this.animation;\n      each(anim.values, node => {\n        node.done = true;\n      });\n\n      if (anim.toValues) {\n        anim.onChange = anim.onPause = anim.onResume = void 0;\n      }\n\n      callFluidObservers(this, {\n        type: \"idle\",\n        parent: this\n      });\n      const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal != null ? goal : anim.to));\n      flushCalls(this._pendingCalls, result);\n\n      if (anim.changed) {\n        anim.changed = false;\n        sendEvent(this, \"onRest\", result, this);\n      }\n    }\n  }\n\n}\n\nfunction checkFinished(target, to) {\n  const goal = computeGoal(to);\n  const value = computeGoal(target.get());\n  return isEqual(value, goal);\n}\n\nfunction createLoopUpdate(props) {\n  let loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : props.loop;\n  let to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : props.to;\n  let loopRet = callProp(loop);\n\n  if (loopRet) {\n    const overrides = loopRet !== true && inferTo(loopRet);\n    const reverse = (overrides || props).reverse;\n    const reset = !overrides || overrides.reset;\n    return createUpdate({ ...props,\n      loop,\n      default: false,\n      pause: void 0,\n      to: !reverse || isAsyncTo(to) ? to : void 0,\n      from: reset ? props.from : void 0,\n      reset,\n      ...overrides\n    });\n  }\n}\n\nfunction createUpdate(props) {\n  const {\n    to,\n    from\n  } = props = inferTo(props);\n  const keys = new Set();\n  if (is.obj(to)) findDefined(to, keys);\n  if (is.obj(from)) findDefined(from, keys);\n  props.keys = keys.size ? Array.from(keys) : null;\n  return props;\n}\n\nfunction declareUpdate(props) {\n  const update = createUpdate(props);\n\n  if (is.und(update.default)) {\n    update.default = getDefaultProps(update);\n  }\n\n  return update;\n}\n\nfunction findDefined(values, keys) {\n  eachProp(values, (value, key) => value != null && keys.add(key));\n}\n\nconst ACTIVE_EVENTS = [\"onStart\", \"onRest\", \"onChange\", \"onPause\", \"onResume\"];\n\nfunction mergeActiveFn(target, props, type) {\n  target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;\n}\n\nfunction sendEvent(target, type) {\n  var _a, _b, _c, _d;\n\n  for (var _len4 = arguments.length, args = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n    args[_key4 - 2] = arguments[_key4];\n  }\n\n  (_b = (_a = target.animation)[type]) == null ? void 0 : _b.call(_a, ...args);\n  (_d = (_c = target.defaultProps)[type]) == null ? void 0 : _d.call(_c, ...args);\n}\n\nconst BATCHED_EVENTS = [\"onStart\", \"onChange\", \"onRest\"];\nlet nextId$1 = 1;\n\nclass Controller {\n  constructor(props, flush2) {\n    this.id = nextId$1++;\n    this.springs = {};\n    this.queue = [];\n    this._lastAsyncId = 0;\n    this._active = new Set();\n    this._changed = new Set();\n    this._started = false;\n    this._state = {\n      paused: false,\n      pauseQueue: new Set(),\n      resumeQueue: new Set(),\n      timeouts: new Set()\n    };\n    this._events = {\n      onStart: new Map(),\n      onChange: new Map(),\n      onRest: new Map()\n    };\n    this._onFrame = this._onFrame.bind(this);\n\n    if (flush2) {\n      this._flush = flush2;\n    }\n\n    if (props) {\n      this.start({\n        default: true,\n        ...props\n      });\n    }\n  }\n\n  get idle() {\n    return !this._state.asyncTo && Object.values(this.springs).every(spring => spring.idle);\n  }\n\n  get item() {\n    return this._item;\n  }\n\n  set item(item) {\n    this._item = item;\n  }\n\n  get() {\n    const values = {};\n    this.each((spring, key) => values[key] = spring.get());\n    return values;\n  }\n\n  set(values) {\n    for (const key in values) {\n      const value = values[key];\n\n      if (!is.und(value)) {\n        this.springs[key].set(value);\n      }\n    }\n  }\n\n  update(props) {\n    if (props) {\n      this.queue.push(createUpdate(props));\n    }\n\n    return this;\n  }\n\n  start(props) {\n    let {\n      queue\n    } = this;\n\n    if (props) {\n      queue = toArray(props).map(createUpdate);\n    } else {\n      this.queue = [];\n    }\n\n    if (this._flush) {\n      return this._flush(this, queue);\n    }\n\n    prepareKeys(this, queue);\n    return flushUpdateQueue(this, queue);\n  }\n\n  stop(arg, keys) {\n    if (arg !== !!arg) {\n      keys = arg;\n    }\n\n    if (keys) {\n      const springs = this.springs;\n      each(toArray(keys), key => springs[key].stop(!!arg));\n    } else {\n      stopAsync(this._state, this._lastAsyncId);\n      this.each(spring => spring.stop(!!arg));\n    }\n\n    return this;\n  }\n\n  pause(keys) {\n    if (is.und(keys)) {\n      this.start({\n        pause: true\n      });\n    } else {\n      const springs = this.springs;\n      each(toArray(keys), key => springs[key].pause());\n    }\n\n    return this;\n  }\n\n  resume(keys) {\n    if (is.und(keys)) {\n      this.start({\n        pause: false\n      });\n    } else {\n      const springs = this.springs;\n      each(toArray(keys), key => springs[key].resume());\n    }\n\n    return this;\n  }\n\n  each(iterator) {\n    eachProp(this.springs, iterator);\n  }\n\n  _onFrame() {\n    const {\n      onStart,\n      onChange,\n      onRest\n    } = this._events;\n    const active = this._active.size > 0;\n    const changed = this._changed.size > 0;\n\n    if (active && !this._started || changed && !this._started) {\n      this._started = true;\n      flush(onStart, _ref3 => {\n        let [onStart2, result] = _ref3;\n        result.value = this.get();\n        onStart2(result, this, this._item);\n      });\n    }\n\n    const idle = !active && this._started;\n    const values = changed || idle && onRest.size ? this.get() : null;\n\n    if (changed && onChange.size) {\n      flush(onChange, _ref4 => {\n        let [onChange2, result] = _ref4;\n        result.value = values;\n        onChange2(result, this, this._item);\n      });\n    }\n\n    if (idle) {\n      this._started = false;\n      flush(onRest, _ref5 => {\n        let [onRest2, result] = _ref5;\n        result.value = values;\n        onRest2(result, this, this._item);\n      });\n    }\n  }\n\n  eventObserved(event) {\n    if (event.type == \"change\") {\n      this._changed.add(event.parent);\n\n      if (!event.idle) {\n        this._active.add(event.parent);\n      }\n    } else if (event.type == \"idle\") {\n      this._active.delete(event.parent);\n    } else return;\n\n    raf.onFrame(this._onFrame);\n  }\n\n}\n\nfunction flushUpdateQueue(ctrl, queue) {\n  return Promise.all(queue.map(props => flushUpdate(ctrl, props))).then(results => getCombinedResult(ctrl, results));\n}\n\nasync function flushUpdate(ctrl, props, isLoop) {\n  const {\n    keys,\n    to,\n    from,\n    loop,\n    onRest,\n    onResolve\n  } = props;\n  const defaults = is.obj(props.default) && props.default;\n\n  if (loop) {\n    props.loop = false;\n  }\n\n  if (to === false) props.to = null;\n  if (from === false) props.from = null;\n  const asyncTo = is.arr(to) || is.fun(to) ? to : void 0;\n\n  if (asyncTo) {\n    props.to = void 0;\n    props.onRest = void 0;\n\n    if (defaults) {\n      defaults.onRest = void 0;\n    }\n  } else {\n    each(BATCHED_EVENTS, key => {\n      const handler = props[key];\n\n      if (is.fun(handler)) {\n        const queue = ctrl[\"_events\"][key];\n\n        props[key] = _ref6 => {\n          let {\n            finished,\n            cancelled\n          } = _ref6;\n          const result2 = queue.get(handler);\n\n          if (result2) {\n            if (!finished) result2.finished = false;\n            if (cancelled) result2.cancelled = true;\n          } else {\n            queue.set(handler, {\n              value: null,\n              finished: finished || false,\n              cancelled: cancelled || false\n            });\n          }\n        };\n\n        if (defaults) {\n          defaults[key] = props[key];\n        }\n      }\n    });\n  }\n\n  const state = ctrl[\"_state\"];\n\n  if (props.pause === !state.paused) {\n    state.paused = props.pause;\n    flushCalls(props.pause ? state.pauseQueue : state.resumeQueue);\n  } else if (state.paused) {\n    props.pause = true;\n  }\n\n  const promises = (keys || Object.keys(ctrl.springs)).map(key => ctrl.springs[key].start(props));\n  const cancel = props.cancel === true || getDefaultProp(props, \"cancel\") === true;\n\n  if (asyncTo || cancel && state.asyncId) {\n    promises.push(scheduleProps(++ctrl[\"_lastAsyncId\"], {\n      props,\n      state,\n      actions: {\n        pause: noop,\n        resume: noop,\n\n        start(props2, resolve) {\n          if (cancel) {\n            stopAsync(state, ctrl[\"_lastAsyncId\"]);\n            resolve(getCancelledResult(ctrl));\n          } else {\n            props2.onRest = onRest;\n            resolve(runAsync(asyncTo, props2, state, ctrl));\n          }\n        }\n\n      }\n    }));\n  }\n\n  if (state.paused) {\n    await new Promise(resume => {\n      state.resumeQueue.add(resume);\n    });\n  }\n\n  const result = getCombinedResult(ctrl, await Promise.all(promises));\n\n  if (loop && result.finished && !(isLoop && result.noop)) {\n    const nextProps = createLoopUpdate(props, loop, to);\n\n    if (nextProps) {\n      prepareKeys(ctrl, [nextProps]);\n      return flushUpdate(ctrl, nextProps, true);\n    }\n  }\n\n  if (onResolve) {\n    raf.batchedUpdates(() => onResolve(result, ctrl, ctrl.item));\n  }\n\n  return result;\n}\n\nfunction getSprings(ctrl, props) {\n  const springs = { ...ctrl.springs\n  };\n\n  if (props) {\n    each(toArray(props), props2 => {\n      if (is.und(props2.keys)) {\n        props2 = createUpdate(props2);\n      }\n\n      if (!is.obj(props2.to)) {\n        props2 = { ...props2,\n          to: void 0\n        };\n      }\n\n      prepareSprings(springs, props2, key => {\n        return createSpring(key);\n      });\n    });\n  }\n\n  return springs;\n}\n\nfunction setSprings(ctrl, springs) {\n  eachProp(springs, (spring, key) => {\n    if (!ctrl.springs[key]) {\n      ctrl.springs[key] = spring;\n      addFluidObserver(spring, ctrl);\n    }\n  });\n}\n\nfunction createSpring(key, observer) {\n  const spring = new SpringValue();\n  spring.key = key;\n\n  if (observer) {\n    addFluidObserver(spring, observer);\n  }\n\n  return spring;\n}\n\nfunction prepareSprings(springs, props, create) {\n  if (props.keys) {\n    each(props.keys, key => {\n      const spring = springs[key] || (springs[key] = create(key));\n      spring[\"_prepareNode\"](props);\n    });\n  }\n}\n\nfunction prepareKeys(ctrl, queue) {\n  each(queue, props => {\n    prepareSprings(ctrl.springs, props, key => {\n      return createSpring(key, ctrl);\n    });\n  });\n}\n\nconst SpringContext = _ref7 => {\n  let {\n    children,\n    ...props\n  } = _ref7;\n  const inherited = useContext(ctx);\n  const pause = props.pause || !!inherited.pause,\n        immediate = props.immediate || !!inherited.immediate;\n  props = useMemoOne(() => ({\n    pause,\n    immediate\n  }), [pause, immediate]);\n  const {\n    Provider\n  } = ctx;\n  return /* @__PURE__ */createElement(Provider, {\n    value: props\n  }, children);\n};\n\nconst ctx = makeContext(SpringContext, {});\nSpringContext.Provider = ctx.Provider;\nSpringContext.Consumer = ctx.Consumer;\n\nfunction makeContext(target, init) {\n  Object.assign(target, createContext(init));\n  target.Provider._context = target;\n  target.Consumer._context = target;\n  return target;\n}\n\nclass SpringRef extends Function {\n  constructor() {\n    super(\"return arguments.callee._call.apply(arguments.callee, arguments)\");\n    this.current = [];\n  }\n\n  _call(props) {\n    deprecateDirectCall();\n    this.start(props);\n  }\n\n  set(values) {\n    each(this.current, ctrl => ctrl.set(values));\n  }\n\n  start(props) {\n    const results = [];\n    each(this.current, (ctrl, i) => {\n      if (is.und(props)) {\n        results.push(ctrl.start());\n      } else {\n        const update = this._getProps(props, ctrl, i);\n\n        if (update) {\n          results.push(ctrl.start(update));\n        }\n      }\n    });\n    return results;\n  }\n\n  update(props) {\n    each(this.current, (ctrl, i) => ctrl.update(this._getProps(props, ctrl, i)));\n    return this;\n  }\n\n  add(ctrl) {\n    if (!this.current.includes(ctrl)) {\n      this.current.push(ctrl);\n    }\n  }\n\n  delete(ctrl) {\n    const i = this.current.indexOf(ctrl);\n    if (~i) this.current.splice(i, 1);\n  }\n\n  _getProps(arg, ctrl, index) {\n    return is.fun(arg) ? arg(index, ctrl) : arg;\n  }\n\n}\n\neach([\"stop\", \"pause\", \"resume\"], key => {\n  SpringRef.prototype[key] = function () {\n    each(this.current, ctrl => ctrl[key](...arguments));\n    return this;\n  };\n});\n\nfunction useSprings(length, props, deps) {\n  const propsFn = is.fun(props) && props;\n  if (propsFn && !deps) deps = [];\n  const ref = useMemo(() => propsFn || arguments.length == 3 ? new SpringRef() : void 0, []);\n  const layoutId = useRef(0);\n  const forceUpdate = useForceUpdate();\n  const state = useMemo(() => ({\n    ctrls: [],\n    queue: [],\n\n    flush(ctrl, updates2) {\n      const springs2 = getSprings(ctrl, updates2);\n      const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some(key => !ctrl.springs[key]);\n      return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise(resolve => {\n        setSprings(ctrl, springs2);\n        state.queue.push(() => {\n          resolve(flushUpdateQueue(ctrl, updates2));\n        });\n        forceUpdate();\n      });\n    }\n\n  }), []);\n  const ctrls = [...state.ctrls];\n  const updates = [];\n  const prevLength = usePrev(length) || 0;\n  const oldCtrls = ctrls.slice(length, prevLength);\n  useMemo(() => {\n    ctrls.length = length;\n    declareUpdates(prevLength, length);\n  }, [length]);\n  useMemo(() => {\n    declareUpdates(0, Math.min(prevLength, length));\n  }, deps);\n\n  function declareUpdates(startIndex, endIndex) {\n    for (let i = startIndex; i < endIndex; i++) {\n      const ctrl = ctrls[i] || (ctrls[i] = new Controller(null, state.flush));\n      const update = propsFn ? propsFn(i, ctrl) : props[i];\n\n      if (update) {\n        updates[i] = declareUpdate(update);\n      }\n    }\n  }\n\n  const springs = ctrls.map((ctrl, i) => getSprings(ctrl, updates[i]));\n  const context = useContext(SpringContext);\n  const prevContext = usePrev(context);\n  const hasContext = context !== prevContext && hasProps(context);\n  useLayoutEffect(() => {\n    layoutId.current++;\n    state.ctrls = ctrls;\n    const {\n      queue\n    } = state;\n\n    if (queue.length) {\n      state.queue = [];\n      each(queue, cb => cb());\n    }\n\n    each(oldCtrls, ctrl => {\n      detachRefs(ctrl, ref);\n      ctrl.stop(true);\n    });\n    each(ctrls, (ctrl, i) => {\n      const values2 = springs[i];\n      setSprings(ctrl, values2);\n      ref == null ? void 0 : ref.add(ctrl);\n\n      if (hasContext) {\n        ctrl.start({\n          default: context\n        });\n      }\n\n      const update = updates[i];\n\n      if (update) {\n        replaceRef(ctrl, update.ref);\n\n        if (ctrl.ref) {\n          ctrl.queue.push(update);\n        } else {\n          ctrl.start(update);\n        }\n      }\n    });\n  });\n  useOnce(() => () => {\n    each(state.ctrls, ctrl => ctrl.stop(true));\n  });\n  const values = springs.map(x => ({ ...x\n  }));\n  return ref ? [values, ref] : values;\n}\n\nfunction useSpring(props, deps) {\n  const isFn = is.fun(props);\n  const [[values], ref] = useSprings(1, isFn ? props : [props], isFn ? deps || [] : deps);\n  return isFn || arguments.length == 2 ? [values, ref] : values;\n}\n\nconst initSpringRef = () => new SpringRef();\n\nconst useSpringRef = () => useState(initSpringRef)[0];\n\nfunction useTrail(length, propsArg, deps) {\n  const propsFn = is.fun(propsArg) && propsArg;\n  if (propsFn && !deps) deps = [];\n  let reverse = true;\n  const result = useSprings(length, (i, ctrl) => {\n    const props = propsFn ? propsFn(i, ctrl) : propsArg;\n    reverse = reverse && props.reverse;\n    return props;\n  }, deps || [{}]);\n  const ref = result[1];\n  useLayoutEffect(() => {\n    each(ref.current, (ctrl, i) => {\n      const parent = ref.current[i + (reverse ? 1 : -1)];\n      if (parent) ctrl.start({\n        to: parent.springs\n      });\n    });\n  }, deps);\n\n  if (propsFn || arguments.length == 3) {\n    ref[\"_getProps\"] = (propsArg2, ctrl, i) => {\n      const props = is.fun(propsArg2) ? propsArg2(i, ctrl) : propsArg2;\n\n      if (props) {\n        const parent = ref.current[i + (props.reverse ? 1 : -1)];\n        if (parent) props.to = parent.springs;\n        return props;\n      }\n    };\n\n    return result;\n  }\n\n  return result[0];\n}\n\nconst MOUNT = \"mount\";\nconst ENTER = \"enter\";\nconst UPDATE = \"update\";\nconst LEAVE = \"leave\";\n\nfunction useTransition(data, props, deps) {\n  const {\n    reset,\n    sort,\n    trail = 0,\n    expires = true,\n    onDestroyed\n  } = props;\n  const ref = useMemo(() => arguments.length == 3 ? new SpringRef() : void 0, []);\n  const items = toArray(data);\n  const transitions = [];\n  const usedTransitions = useRef(null);\n  const prevTransitions = reset ? null : usedTransitions.current;\n  useLayoutEffect(() => {\n    usedTransitions.current = transitions;\n  });\n  useOnce(() => () => each(usedTransitions.current, t => {\n    if (t.expired) {\n      clearTimeout(t.expirationId);\n    }\n\n    detachRefs(t.ctrl, ref);\n    t.ctrl.stop(true);\n  }));\n  const keys = getKeys(items, props, prevTransitions);\n  const expired = reset && usedTransitions.current || [];\n  useLayoutEffect(() => each(expired, _ref8 => {\n    let {\n      ctrl,\n      item,\n      key\n    } = _ref8;\n    detachRefs(ctrl, ref);\n    callProp(onDestroyed, item, key);\n  }));\n  const reused = [];\n  if (prevTransitions) each(prevTransitions, (t, i) => {\n    if (t.expired) {\n      clearTimeout(t.expirationId);\n      expired.push(t);\n    } else {\n      i = reused[i] = keys.indexOf(t.key);\n      if (~i) transitions[i] = t;\n    }\n  });\n  each(items, (item, i) => {\n    if (!transitions[i]) {\n      transitions[i] = {\n        key: keys[i],\n        item,\n        phase: MOUNT,\n        ctrl: new Controller()\n      };\n      transitions[i].ctrl.item = item;\n    }\n  });\n\n  if (reused.length) {\n    let i = -1;\n    each(reused, (keyIndex, prevIndex) => {\n      const t = prevTransitions[prevIndex];\n\n      if (~keyIndex) {\n        i = transitions.indexOf(t);\n        transitions[i] = { ...t,\n          item: items[keyIndex]\n        };\n      } else if (props.leave) {\n        transitions.splice(++i, 0, t);\n      }\n    });\n  }\n\n  if (is.fun(sort)) {\n    transitions.sort((a, b) => sort(a.item, b.item));\n  }\n\n  let delay = -trail;\n  const forceUpdate = useForceUpdate();\n  const defaultProps = getDefaultProps(props);\n  const changes = new Map();\n  each(transitions, (t, i) => {\n    const key = t.key;\n    const prevPhase = t.phase;\n    let to;\n    let phase;\n\n    if (prevPhase == MOUNT) {\n      to = props.enter;\n      phase = ENTER;\n    } else {\n      const isLeave = keys.indexOf(key) < 0;\n\n      if (prevPhase != LEAVE) {\n        if (isLeave) {\n          to = props.leave;\n          phase = LEAVE;\n        } else if (to = props.update) {\n          phase = UPDATE;\n        } else return;\n      } else if (!isLeave) {\n        to = props.enter;\n        phase = ENTER;\n      } else return;\n    }\n\n    to = callProp(to, t.item, i);\n    to = is.obj(to) ? inferTo(to) : {\n      to\n    };\n\n    if (!to.config) {\n      const config = props.config || defaultProps.config;\n      to.config = callProp(config, t.item, i, phase);\n    }\n\n    const payload = { ...defaultProps,\n      delay: delay += trail,\n      reset: false,\n      ...to\n    };\n\n    if (phase == ENTER && is.und(payload.from)) {\n      const from = is.und(props.initial) || prevTransitions ? props.from : props.initial;\n      payload.from = callProp(from, t.item, i);\n    }\n\n    const {\n      onResolve\n    } = payload;\n\n    payload.onResolve = result => {\n      callProp(onResolve, result);\n      const transitions2 = usedTransitions.current;\n      const t2 = transitions2.find(t3 => t3.key === key);\n      if (!t2) return;\n\n      if (result.cancelled && t2.phase != UPDATE) {\n        return;\n      }\n\n      if (t2.ctrl.idle) {\n        const idle = transitions2.every(t3 => t3.ctrl.idle);\n\n        if (t2.phase == LEAVE) {\n          const expiry = callProp(expires, t2.item);\n\n          if (expiry !== false) {\n            const expiryMs = expiry === true ? 0 : expiry;\n            t2.expired = true;\n\n            if (!idle && expiryMs > 0) {\n              if (expiryMs <= 2147483647) t2.expirationId = setTimeout(forceUpdate, expiryMs);\n              return;\n            }\n          }\n        }\n\n        if (idle && transitions2.some(t3 => t3.expired)) {\n          forceUpdate();\n        }\n      }\n    };\n\n    const springs = getSprings(t.ctrl, payload);\n    changes.set(t, {\n      phase,\n      springs,\n      payload\n    });\n  });\n  const context = useContext(SpringContext);\n  const prevContext = usePrev(context);\n  const hasContext = context !== prevContext && hasProps(context);\n  useLayoutEffect(() => {\n    if (hasContext) each(transitions, t => {\n      t.ctrl.start({\n        default: context\n      });\n    });\n  }, [context]);\n  useLayoutEffect(() => {\n    each(changes, (_ref9, t) => {\n      let {\n        phase,\n        springs,\n        payload\n      } = _ref9;\n      const {\n        ctrl\n      } = t;\n      t.phase = phase;\n      ref == null ? void 0 : ref.add(ctrl);\n      replaceRef(ctrl, payload.ref);\n      setSprings(ctrl, springs);\n\n      if (hasContext && phase == ENTER) {\n        ctrl.start({\n          default: context\n        });\n      }\n\n      ctrl[ctrl.ref ? \"update\" : \"start\"](payload);\n    });\n  }, reset ? void 0 : deps);\n\n  const renderTransitions = render => /* @__PURE__ */createElement(Fragment, null, transitions.map((t, i) => {\n    const {\n      springs\n    } = changes.get(t) || t.ctrl;\n    const elem = render({ ...springs\n    }, t.item, t, i);\n    return elem && elem.type ? /* @__PURE__ */createElement(elem.type, { ...elem.props,\n      key: is.str(t.key) || is.num(t.key) ? t.key : t.ctrl.id,\n      ref: elem.ref\n    }) : elem;\n  }));\n\n  return ref ? [renderTransitions, ref] : renderTransitions;\n}\n\nlet nextKey = 1;\n\nfunction getKeys(items, _ref10, prevTransitions) {\n  let {\n    key,\n    keys = key\n  } = _ref10;\n\n  if (keys === null) {\n    const reused = new Set();\n    return items.map(item => {\n      const t = prevTransitions && prevTransitions.find(t2 => t2.item === item && t2.phase !== LEAVE && !reused.has(t2));\n\n      if (t) {\n        reused.add(t);\n        return t.key;\n      }\n\n      return nextKey++;\n    });\n  }\n\n  return is.und(keys) ? items : is.fun(keys) ? items.map(keys) : toArray(keys);\n}\n\nfunction Spring(_ref11) {\n  let {\n    children,\n    ...props\n  } = _ref11;\n  return children(useSpring(props));\n}\n\nfunction Trail(_ref12) {\n  let {\n    items,\n    children,\n    ...props\n  } = _ref12;\n  const trails = useTrail(items.length, props);\n  return items.map((item, index) => {\n    const result = children(item, index);\n    return is.fun(result) ? result(trails[index]) : result;\n  });\n}\n\nfunction Transition(_ref13) {\n  let {\n    items,\n    children,\n    ...props\n  } = _ref13;\n  return useTransition(items, props)(children);\n}\n\nclass Interpolation extends FrameValue {\n  constructor(source, args) {\n    super();\n    this.source = source;\n    this.idle = true;\n    this._active = new Set();\n    this.calc = createInterpolator(...args);\n\n    const value = this._get();\n\n    const nodeType = getAnimatedType(value);\n    setAnimated(this, nodeType.create(value));\n  }\n\n  advance(_dt) {\n    const value = this._get();\n\n    const oldValue = this.get();\n\n    if (!isEqual(value, oldValue)) {\n      getAnimated(this).setValue(value);\n\n      this._onChange(value, this.idle);\n    }\n\n    if (!this.idle && checkIdle(this._active)) {\n      becomeIdle(this);\n    }\n  }\n\n  _get() {\n    const inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray(getFluidValue(this.source));\n    return this.calc(...inputs);\n  }\n\n  _start() {\n    if (this.idle && !checkIdle(this._active)) {\n      this.idle = false;\n      each(getPayload(this), node => {\n        node.done = false;\n      });\n\n      if (Globals.skipAnimation) {\n        raf.batchedUpdates(() => this.advance());\n        becomeIdle(this);\n      } else {\n        frameLoop.start(this);\n      }\n    }\n  }\n\n  _attach() {\n    let priority = 1;\n    each(toArray(this.source), source => {\n      if (hasFluidValue(source)) {\n        addFluidObserver(source, this);\n      }\n\n      if (isFrameValue(source)) {\n        if (!source.idle) {\n          this._active.add(source);\n        }\n\n        priority = Math.max(priority, source.priority + 1);\n      }\n    });\n    this.priority = priority;\n\n    this._start();\n  }\n\n  _detach() {\n    each(toArray(this.source), source => {\n      if (hasFluidValue(source)) {\n        removeFluidObserver(source, this);\n      }\n    });\n\n    this._active.clear();\n\n    becomeIdle(this);\n  }\n\n  eventObserved(event) {\n    if (event.type == \"change\") {\n      if (event.idle) {\n        this.advance();\n      } else {\n        this._active.add(event.parent);\n\n        this._start();\n      }\n    } else if (event.type == \"idle\") {\n      this._active.delete(event.parent);\n    } else if (event.type == \"priority\") {\n      this.priority = toArray(this.source).reduce((highest, parent) => Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1), 0);\n    }\n  }\n\n}\n\nfunction isIdle(source) {\n  return source.idle !== false;\n}\n\nfunction checkIdle(active) {\n  return !active.size || Array.from(active).every(isIdle);\n}\n\nfunction becomeIdle(self) {\n  if (!self.idle) {\n    self.idle = true;\n    each(getPayload(self), node => {\n      node.done = true;\n    });\n    callFluidObservers(self, {\n      type: \"idle\",\n      parent: self\n    });\n  }\n}\n\nconst to = function (source) {\n  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n    args[_key5 - 1] = arguments[_key5];\n  }\n\n  return new Interpolation(source, args);\n};\n\nconst interpolate = function (source) {\n  for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    args[_key6 - 1] = arguments[_key6];\n  }\n\n  return deprecateInterpolate(), new Interpolation(source, args);\n};\n\nGlobals.assign({\n  createStringInterpolator,\n  to: (source, args) => new Interpolation(source, args)\n});\nconst update = frameLoop.advance;\nexport { BailSignal, Controller, FrameValue, Interpolation, Spring, SpringContext, SpringRef, SpringValue, Trail, Transition, config, inferTo, interpolate, to, update, useChain, useSpring, useSpringRef, useSprings, useTrail, useTransition };","map":{"version":3,"mappings":"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","names":["value","args","is","fun","key","toArray","includes","obj","prop","props","default","transform","DEFAULT_PROPS","keys","Object","und","defaults","config","from","to","ref","loop","reset","pause","cancel","reverse","immediate","delay","onProps","onStart","onChange","onPause","onResume","onRest","onResolve","items","trail","sort","expires","initial","enter","update","leave","children","onDestroyed","callId","parentId","eachProp","RESERVED_PROPS","forward","count","getForwardProps","out","val","getFluidValue","arr","map","computeGoal","isAnimatedString","G","createStringInterpolator","range","output","delete","ctrl","add","refs","timeFrame","useLayoutEffect","timeSteps","each","current","controllers","length","i","isNaN","prevDelay","queue","callProp","memoizedDelayProp","start","Promise","resolve","q","p","then","queues","push","tension","friction","gentle","wobbly","stiff","slow","molasses","linear","t","configs","mass","damping","easing","clamp","constructor","assign","defaultConfig","sanitizeConfig","newConfig","frequency","Math","pow","PI","decay","duration","isTensionConfig","emptyArray","AnimationConfig2","defaultProps","state","actions","matchProp","paused","resumeQueue","resume","timeouts","timeout","time","raf","now","setTimeout","pauseQueue","cancelId","reject","err","getCombinedResult","results","some","result","cancelled","getCancelledResult","target","get","every","noop","getNoopResult","getFinishedResult","finished","asyncTo","promise","prevTo","prevPromise","asyncId","getDefaultProps","bail","bailSignal","bailResult","BailSignal","SkipAniamtionSignal","skipAnimation","stopAsync","skipAnimationSignal","bailIfEnded","arg1","arg2","props2","result2","animating","animate","stop","bind","all","preventBail","bailPromise","batchedUpdates","item","flush","clear","Error","isFrameValue","FrameValue","FluidValue","nextId","_priority","priority","_onPriorityChange","getAnimated","node","getValue","interpolate","deprecateInterpolate","toJSON","observerAdded","_attach","observerRemoved","_detach","_onChange","idle","callFluidObservers","type","parent","frameLoop","$P","Symbol","for","HAS_ANIMATED","IS_ANIMATING","IS_PAUSED","active","FrameValue2","Animation2","Set","_state","isPaused","animation","AnimatedValue","lastVelocity","getPayload","node2","hasAnimated","isAnimating","advance","toValues","anim","payload","hasFluidValue","values","forEach","done","AnimatedString","lastPosition","position","elapsedTime","dt","fromValues","v0","velocity","_memoizedDuration","durationProgress","elapsed","progress","exp","e","abs","precision","min","restVelocity","bounce","bounceFactor","ceil","step","n","numSteps","isMoving","canBounce","isBouncing","isGrowing","dampingForce","acceleration","Number","console","warn","setValue","round","changed","_stop","set","_focus","_set","_update","finish","_onStart","_lastCallId","eventObserved","event","_start","_prepareNode","isAsyncTo","test","resolveProp","mergeActiveFn","sendEvent","isFrozen","scheduleProps2","setPausedBit","flushCalls","checkFinished","_resume","_merge","createLoopUpdate","nextProps","hasToProp","hasFromProp","_lastToId","prevFrom","isEqual","hasFromChanged","hasToChanged","hasAsyncTo","mergeConfig","num","goal","isAnimatable","getAnimatedType","nodeType","name","started","hasValueChanged","goalType","ACTIVE_EVENTS","_pendingCalls","runAsync2","getFluidObservers","addFluidObserver","removeFluidObserver","arg","oldNode","setAnimated","create","setActiveBit","loopRet","inferTo","overrides","createUpdate","findDefined","size","Array","getDefaultProp","BATCHED_EVENTS","Map","_onFrame","flush2","_flush","springs","spring","_item","prepareKeys","flushUpdateQueue","_lastAsyncId","iterator","_events","_active","_changed","_started","onStart2","onChange2","onRest2","onFrame","flushUpdate","handler","promises","prepareSprings","createSpring","SpringValue2","observer","SpringContext","useContext","ctx","inherited","useMemoOne","Provider","makeContext","Consumer","React.createContext","init","_context","Function","_call","deprecateDirectCall","_getProps","indexOf","splice","index","SpringRef","prototype","arguments","propsFn","deps","useMemo","SpringRef2","useRef","useForceUpdate","ctrls","getSprings","updates2","layoutId","springs2","canFlushSync","setSprings","forceUpdate","usePrev","slice","prevLength","declareUpdates","startIndex","endIndex","Controller2","updates","declareUpdate","SpringContext2","context","prevContext","hasProps","cb","oldCtrls","detachRefs","values2","hasContext","replaceRef","useOnce","x","useSprings2","isFn","initSpringRef","useState","propsArg","propsArg2","MOUNT","data","usedTransitions","transitions","expired","clearTimeout","expirationId","getKeys","prevTransitions","reused","phase","prevIndex","keyIndex","a","b","prevPhase","ENTER","LEAVE","isLeave","UPDATE","transitions2","find","t3","t2","expiry","expiryMs","changes","render","elem","str","id","renderTransitions","has","nextKey","useSpring2","useTrail2","trails","useTransition","source","calc","createInterpolator","_get","oldValue","checkIdle","becomeIdle","inputs","max","reduce","highest","isIdle","self","Interpolation2","Globals"],"sources":["D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\helpers.ts","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\hooks\\useChain.ts","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\constants.ts","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\AnimationConfig.ts","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\Animation.ts","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\scheduleProps.ts","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\AnimationResult.ts","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\runAsync.ts","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\FrameValue.ts","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\SpringPhase.ts","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\SpringValue.ts","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\Controller.ts","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\SpringContext.tsx","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\SpringRef.ts","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\hooks\\useSprings.ts","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\hooks\\useSpring.ts","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\hooks\\useSpringRef.ts","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\hooks\\useTrail.ts","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\TransitionPhase.ts","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\hooks\\useTransition.tsx","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\components\\Spring.tsx","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\components\\Trail.tsx","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\components\\Transition.tsx","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\Interpolation.ts","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\interpolate.ts","D:\\Kltn\\test\\social-media\\node_modules\\@react-spring\\core\\src\\globals.ts"],"sourcesContent":["import {\n  is,\n  toArray,\n  eachProp,\n  getFluidValue,\n  isAnimatedString,\n  FluidValue,\n  Globals as G,\n} from '@react-spring/shared'\nimport { AnyFn, OneOrMore, Lookup } from '@react-spring/types'\nimport { ReservedProps, ForwardProps, InferTo } from './types'\nimport type { Controller } from './Controller'\nimport type { SpringRef } from './SpringRef'\n\nexport function callProp<T>(\n  value: T,\n  ...args: T extends AnyFn ? Parameters<T> : unknown[]\n): T extends AnyFn<any, infer U> ? U : T {\n  return is.fun(value) ? value(...args) : value\n}\n\n/** Try to coerce the given value into a boolean using the given key */\nexport const matchProp = (\n  value: boolean | OneOrMore<string> | ((key: any) => boolean) | undefined,\n  key: string | undefined\n) =>\n  value === true ||\n  !!(\n    key &&\n    value &&\n    (is.fun(value) ? value(key) : toArray(value).includes(key))\n  )\n\nexport const resolveProp = <T>(\n  prop: T | Lookup<T> | undefined,\n  key: string | undefined\n) => (is.obj(prop) ? key && (prop as any)[key] : prop)\n\nexport const concatFn = <T extends AnyFn>(first: T | undefined, last: T) =>\n  first ? (...args: Parameters<T>) => (first(...args), last(...args)) : last\n\n/** Returns `true` if the given prop is having its default value set. */\nexport const hasDefaultProp = <T extends Lookup>(props: T, key: keyof T) =>\n  !is.und(getDefaultProp(props, key))\n\n/** Get the default value being set for the given `key` */\nexport const getDefaultProp = <T extends Lookup, P extends keyof T>(\n  props: T,\n  key: P\n): T[P] =>\n  props.default === true\n    ? props[key]\n    : props.default\n    ? props.default[key]\n    : undefined\n\nconst noopTransform = (value: any) => value\n\n/**\n * Extract the default props from an update.\n *\n * When the `default` prop is falsy, this function still behaves as if\n * `default: true` was used. The `default` prop is always respected when\n * truthy.\n */\nexport const getDefaultProps = <T extends Lookup>(\n  props: Lookup,\n  transform: (value: any, key: string) => any = noopTransform\n): T => {\n  let keys: readonly string[] = DEFAULT_PROPS\n  if (props.default && props.default !== true) {\n    props = props.default\n    keys = Object.keys(props)\n  }\n  const defaults: any = {}\n  for (const key of keys) {\n    const value = transform(props[key], key)\n    if (!is.und(value)) {\n      defaults[key] = value\n    }\n  }\n  return defaults\n}\n\n/**\n * These props are implicitly used as defaults when defined in a\n * declarative update (eg: render-based) or any update with `default: true`.\n *\n * Use `default: {}` or `default: false` to opt-out of these implicit defaults\n * for any given update.\n *\n * Note: These are not the only props with default values. For example, the\n * `pause`, `cancel`, and `immediate` props. But those must be updated with\n * the object syntax (eg: `default: { immediate: true }`).\n */\nexport const DEFAULT_PROPS = [\n  'config',\n  'onProps',\n  'onStart',\n  'onChange',\n  'onPause',\n  'onResume',\n  'onRest',\n] as const\n\nconst RESERVED_PROPS: {\n  [key: string]: 1 | undefined\n} = {\n  config: 1,\n  from: 1,\n  to: 1,\n  ref: 1,\n  loop: 1,\n  reset: 1,\n  pause: 1,\n  cancel: 1,\n  reverse: 1,\n  immediate: 1,\n  default: 1,\n  delay: 1,\n  onProps: 1,\n  onStart: 1,\n  onChange: 1,\n  onPause: 1,\n  onResume: 1,\n  onRest: 1,\n  onResolve: 1,\n\n  // Transition props\n  items: 1,\n  trail: 1,\n  sort: 1,\n  expires: 1,\n  initial: 1,\n  enter: 1,\n  update: 1,\n  leave: 1,\n  children: 1,\n  onDestroyed: 1,\n\n  // Internal props\n  keys: 1,\n  callId: 1,\n  parentId: 1,\n}\n\n/**\n * Extract any properties whose keys are *not* reserved for customizing your\n * animations. All hooks use this function, which means `useTransition` props\n * are reserved for `useSpring` calls, etc.\n */\nfunction getForwardProps<Props extends ReservedProps>(\n  props: Props\n): ForwardProps<Props> | undefined {\n  const forward: any = {}\n\n  let count = 0\n  eachProp(props, (value, prop) => {\n    if (!RESERVED_PROPS[prop]) {\n      forward[prop] = value\n      count++\n    }\n  })\n\n  if (count) {\n    return forward\n  }\n}\n\n/**\n * Clone the given `props` and move all non-reserved props\n * into the `to` prop.\n */\nexport function inferTo<T extends object>(props: T): InferTo<T> {\n  const to = getForwardProps(props)\n  if (to) {\n    const out: any = { to }\n    eachProp(props, (val, key) => key in to || (out[key] = val))\n    return out\n  }\n  return { ...props } as any\n}\n\n// Compute the goal value, converting \"red\" to \"rgba(255, 0, 0, 1)\" in the process\nexport function computeGoal<T>(value: T | FluidValue<T>): T {\n  value = getFluidValue(value)\n  return is.arr(value)\n    ? value.map(computeGoal)\n    : isAnimatedString(value)\n    ? (G.createStringInterpolator({\n        range: [0, 1],\n        output: [value, value] as any,\n      })(1) as any)\n    : value\n}\n\nexport function hasProps(props: object) {\n  for (const _ in props) return true\n  return false\n}\n\nexport function isAsyncTo(to: any) {\n  return is.fun(to) || (is.arr(to) && is.obj(to[0]))\n}\n\n/** Detach `ctrl` from `ctrl.ref` and (optionally) the given `ref` */\nexport function detachRefs(ctrl: Controller, ref?: SpringRef) {\n  ctrl.ref?.delete(ctrl)\n  ref?.delete(ctrl)\n}\n\n/** Replace `ctrl.ref` with the given `ref` (if defined) */\nexport function replaceRef(ctrl: Controller, ref?: SpringRef) {\n  if (ref && ctrl.ref !== ref) {\n    ctrl.ref?.delete(ctrl)\n    ref.add(ctrl)\n    ctrl.ref = ref\n  }\n}\n","import { each, useLayoutEffect } from '@react-spring/shared'\nimport { SpringRef } from '../SpringRef'\nimport { callProp } from '../helpers'\n\nexport function useChain(\n  refs: ReadonlyArray<SpringRef>,\n  timeSteps?: number[],\n  timeFrame = 1000\n) {\n  useLayoutEffect(() => {\n    if (timeSteps) {\n      let prevDelay = 0\n      each(refs, (ref, i) => {\n        const controllers = ref.current\n        if (controllers.length) {\n          let delay = timeFrame * timeSteps[i]\n\n          // Use the previous delay if none exists.\n          if (isNaN(delay)) delay = prevDelay\n          else prevDelay = delay\n\n          each(controllers, ctrl => {\n            each(ctrl.queue, props => {\n              // memoizing stops recursion #1367\n              const memoizedDelayProp = props.delay\n              props.delay = key => delay + callProp(memoizedDelayProp || 0, key)\n            })\n            ctrl.start()\n          })\n        }\n      })\n    } else {\n      let p: Promise<any> = Promise.resolve()\n      each(refs, ref => {\n        const controllers = ref.current\n        if (controllers.length) {\n          // Take the queue of each controller\n          const queues = controllers.map(ctrl => {\n            const q = ctrl.queue\n            ctrl.queue = []\n            return q\n          })\n\n          // Apply the queue when the previous ref stops animating\n          p = p.then(() => {\n            each(controllers, (ctrl, i) =>\n              each(queues[i] || [], update => ctrl.queue.push(update))\n            )\n            return ref.start()\n          })\n        }\n      })\n    }\n  })\n}\n","// The `mass` prop defaults to 1\nexport const config = {\n  default: { tension: 170, friction: 26 },\n  gentle: { tension: 120, friction: 14 },\n  wobbly: { tension: 180, friction: 12 },\n  stiff: { tension: 210, friction: 20 },\n  slow: { tension: 280, friction: 60 },\n  molasses: { tension: 280, friction: 120 },\n} as const\n","import { is } from '@react-spring/shared'\nimport { config as configs } from './constants'\n\nconst linear = (t: number) => t\nconst defaults: any = {\n  ...configs.default,\n  mass: 1,\n  damping: 1,\n  easing: linear,\n  clamp: false,\n}\n\nexport class AnimationConfig {\n  /**\n   * With higher tension, the spring will resist bouncing and try harder to stop at its end value.\n   *\n   * When tension is zero, no animation occurs.\n   */\n  tension!: number\n\n  /**\n   * The damping ratio coefficient, or just the damping ratio when `speed` is defined.\n   *\n   * When `speed` is defined, this value should be between 0 and 1.\n   *\n   * Higher friction means the spring will slow down faster.\n   */\n  friction!: number\n\n  /**\n   * The natural frequency (in seconds), which dictates the number of bounces\n   * per second when no damping exists.\n   *\n   * When defined, `tension` is derived from this, and `friction` is derived\n   * from `tension` and `damping`.\n   */\n  frequency?: number\n\n  /**\n   * The damping ratio, which dictates how the spring slows down.\n   *\n   * Set to `0` to never slow down. Set to `1` to slow down without bouncing.\n   * Between `0` and `1` is for you to explore.\n   *\n   * Only works when `frequency` is defined.\n   *\n   * Defaults to 1\n   */\n  damping!: number\n\n  /**\n   * Higher mass means more friction is required to slow down.\n   *\n   * Defaults to 1, which works fine most of the time.\n   */\n  mass!: number\n\n  /**\n   * The initial velocity of one or more values.\n   */\n  velocity: number | number[] = 0\n\n  /**\n   * The smallest velocity before the animation is considered \"not moving\".\n   *\n   * When undefined, `precision` is used instead.\n   */\n  restVelocity?: number\n\n  /**\n   * The smallest distance from a value before that distance is essentially zero.\n   *\n   * This helps in deciding when a spring is \"at rest\". The spring must be within\n   * this distance from its final value, and its velocity must be lower than this\n   * value too (unless `restVelocity` is defined).\n   */\n  precision?: number\n\n  /**\n   * For `duration` animations only. Note: The `duration` is not affected\n   * by this property.\n   *\n   * Defaults to `0`, which means \"start from the beginning\".\n   *\n   * Setting to `1+` makes an immediate animation.\n   *\n   * Setting to `0.5` means \"start from the middle of the easing function\".\n   *\n   * Any number `>= 0` and `<= 1` makes sense here.\n   */\n  progress?: number\n\n  /**\n   * Animation length in number of milliseconds.\n   */\n  duration?: number\n\n  /**\n   * The animation curve. Only used when `duration` is defined.\n   *\n   * Defaults to quadratic ease-in-out.\n   */\n  easing!: (t: number) => number\n\n  /**\n   * Avoid overshooting by ending abruptly at the goal value.\n   */\n  clamp!: boolean\n\n  /**\n   * When above zero, the spring will bounce instead of overshooting when\n   * exceeding its goal value. Its velocity is multiplied by `-1 + bounce`\n   * whenever its current value equals or exceeds its goal. For example,\n   * setting `bounce` to `0.5` chops the velocity in half on each bounce,\n   * in addition to any friction.\n   */\n  bounce?: number\n\n  /**\n   * \"Decay animations\" decelerate without an explicit goal value.\n   * Useful for scrolling animations.\n   *\n   * Use `true` for the default exponential decay factor (`0.998`).\n   *\n   * When a `number` between `0` and `1` is given, a lower number makes the\n   * animation slow down faster. And setting to `1` would make an unending\n   * animation.\n   */\n  decay?: boolean | number\n\n  /**\n   * While animating, round to the nearest multiple of this number.\n   * The `from` and `to` values are never rounded, as well as any value\n   * passed to the `set` method of an animated value.\n   */\n  round?: number\n\n  constructor() {\n    Object.assign(this, defaults)\n  }\n}\n\nexport function mergeConfig(\n  config: AnimationConfig,\n  newConfig: Partial<AnimationConfig>,\n  defaultConfig?: Partial<AnimationConfig>\n): typeof config\n\nexport function mergeConfig(\n  config: any,\n  newConfig: object,\n  defaultConfig?: object\n) {\n  if (defaultConfig) {\n    defaultConfig = { ...defaultConfig }\n    sanitizeConfig(defaultConfig, newConfig)\n    newConfig = { ...defaultConfig, ...newConfig }\n  }\n\n  sanitizeConfig(config, newConfig)\n  Object.assign(config, newConfig)\n\n  for (const key in defaults) {\n    if (config[key] == null) {\n      config[key] = defaults[key]\n    }\n  }\n\n  let { mass, frequency, damping } = config\n  if (!is.und(frequency)) {\n    if (frequency < 0.01) frequency = 0.01\n    if (damping < 0) damping = 0\n    config.tension = Math.pow((2 * Math.PI) / frequency, 2) * mass\n    config.friction = (4 * Math.PI * damping * mass) / frequency\n  }\n\n  return config\n}\n\n// Prevent a config from accidentally overriding new props.\n// This depends on which \"config\" props take precedence when defined.\nfunction sanitizeConfig(\n  config: Partial<AnimationConfig>,\n  props: Partial<AnimationConfig>\n) {\n  if (!is.und(props.decay)) {\n    config.duration = undefined\n  } else {\n    const isTensionConfig = !is.und(props.tension) || !is.und(props.friction)\n    if (\n      isTensionConfig ||\n      !is.und(props.frequency) ||\n      !is.und(props.damping) ||\n      !is.und(props.mass)\n    ) {\n      config.duration = undefined\n      config.decay = undefined\n    }\n    if (isTensionConfig) {\n      config.frequency = undefined\n    }\n  }\n}\n","import { AnimatedValue } from '@react-spring/animated'\nimport { FluidValue } from '@react-spring/shared'\nimport { AnimationConfig } from './AnimationConfig'\nimport { PickEventFns } from './types/internal'\nimport { SpringProps } from './types'\n\nconst emptyArray: readonly any[] = []\n\n/** An animation being executed by the frameloop */\nexport class Animation<T = any> {\n  changed = false\n  values: readonly AnimatedValue[] = emptyArray\n  toValues: readonly number[] | null = null\n  fromValues: readonly number[] = emptyArray\n\n  to!: T | FluidValue<T>\n  from!: T | FluidValue<T>\n  config = new AnimationConfig()\n  immediate = false\n}\n\nexport interface Animation<T> extends PickEventFns<SpringProps<T>> {}\n","import { Timeout, is, raf } from '@react-spring/shared'\nimport { matchProp, callProp } from './helpers'\nimport { AsyncResult, MatchProp } from './types'\nimport { RunAsyncState, RunAsyncProps } from './runAsync'\nimport {\n  AnimationResolver,\n  AnimationTarget,\n  InferProps,\n  InferState,\n} from './types/internal'\n\n// The `scheduleProps` function only handles these defaults.\ntype DefaultProps<T> = { cancel?: MatchProp<T>; pause?: MatchProp<T> }\n\ninterface ScheduledProps<T extends AnimationTarget> {\n  key?: string\n  props: InferProps<T>\n  defaultProps?: DefaultProps<InferState<T>>\n  state: RunAsyncState<T>\n  actions: {\n    pause: () => void\n    resume: () => void\n    start: (props: RunAsyncProps<T>, resolve: AnimationResolver<T>) => void\n  }\n}\n\n/**\n * This function sets a timeout if both the `delay` prop exists and\n * the `cancel` prop is not `true`.\n *\n * The `actions.start` function must handle the `cancel` prop itself,\n * but the `pause` prop is taken care of.\n */\nexport function scheduleProps<T extends AnimationTarget>(\n  callId: number,\n  { key, props, defaultProps, state, actions }: ScheduledProps<T>\n): AsyncResult<T> {\n  return new Promise((resolve, reject) => {\n    let delay: number\n    let timeout: Timeout\n\n    let cancel = matchProp(props.cancel ?? defaultProps?.cancel, key)\n    if (cancel) {\n      onStart()\n    } else {\n      // The `pause` prop updates the paused flag.\n      if (!is.und(props.pause)) {\n        state.paused = matchProp(props.pause, key)\n      }\n      // The default `pause` takes precedence when true,\n      // which allows `SpringContext` to work as expected.\n      let pause = defaultProps?.pause\n      if (pause !== true) {\n        pause = state.paused || matchProp(pause, key)\n      }\n\n      delay = callProp(props.delay || 0, key)\n      if (pause) {\n        state.resumeQueue.add(onResume)\n        actions.pause()\n      } else {\n        actions.resume()\n        onResume()\n      }\n    }\n\n    function onPause() {\n      state.resumeQueue.add(onResume)\n      state.timeouts.delete(timeout)\n      timeout.cancel()\n      // Cache the remaining delay.\n      delay = timeout.time - raf.now()\n    }\n\n    function onResume() {\n      if (delay > 0) {\n        timeout = raf.setTimeout(onStart, delay)\n        state.pauseQueue.add(onPause)\n        state.timeouts.add(timeout)\n      } else {\n        onStart()\n      }\n    }\n\n    function onStart() {\n      state.pauseQueue.delete(onPause)\n      state.timeouts.delete(timeout)\n\n      // Maybe cancelled during its delay.\n      if (callId <= (state.cancelId || 0)) {\n        cancel = true\n      }\n\n      try {\n        actions.start({ ...props, callId, cancel }, resolve)\n      } catch (err) {\n        reject(err)\n      }\n    }\n  })\n}\n","import { AnimationResult } from './types'\nimport { Readable } from './types/internal'\n\n/** @internal */\nexport const getCombinedResult = <T extends Readable>(\n  target: T,\n  results: AnimationResult<T>[]\n): AnimationResult<T> =>\n  results.length == 1\n    ? results[0]\n    : results.some(result => result.cancelled)\n    ? getCancelledResult(target.get())\n    : results.every(result => result.noop)\n    ? getNoopResult(target.get())\n    : getFinishedResult(\n        target.get(),\n        results.every(result => result.finished)\n      )\n\n/** No-op results are for updates that never start an animation. */\nexport const getNoopResult = (value: any) => ({\n  value,\n  noop: true,\n  finished: true,\n  cancelled: false,\n})\n\nexport const getFinishedResult = (\n  value: any,\n  finished: boolean,\n  cancelled: boolean = false\n) => ({\n  value,\n  finished,\n  cancelled,\n})\n\nexport const getCancelledResult = (value: any) => ({\n  value,\n  cancelled: true,\n  finished: false,\n})\n","import {\n  is,\n  raf,\n  flush,\n  eachProp,\n  Timeout,\n  Globals as G,\n} from '@react-spring/shared'\nimport { Falsy } from '@react-spring/types'\n\nimport { getDefaultProps } from './helpers'\nimport { AnimationTarget, InferState, InferProps } from './types/internal'\nimport { AnimationResult, AsyncResult, SpringChain, SpringToFn } from './types'\nimport { getCancelledResult, getFinishedResult } from './AnimationResult'\n\ntype AsyncTo<T> = SpringChain<T> | SpringToFn<T>\n\n/** @internal */\nexport type RunAsyncProps<T extends AnimationTarget = any> = InferProps<T> & {\n  callId: number\n  parentId?: number\n  cancel: boolean\n  to?: any\n}\n\n/** @internal */\nexport interface RunAsyncState<T extends AnimationTarget = any> {\n  paused: boolean\n  pauseQueue: Set<() => void>\n  resumeQueue: Set<() => void>\n  timeouts: Set<Timeout>\n  asyncId?: number\n  asyncTo?: AsyncTo<InferState<T>>\n  promise?: AsyncResult<T>\n  cancelId?: number\n}\n\n/**\n * Start an async chain or an async script.\n *\n * Always call `runAsync` in the action callback of a `scheduleProps` call.\n *\n * The `T` parameter can be a set of animated values (as an object type)\n * or a primitive type for a single animated value.\n */\nexport function runAsync<T extends AnimationTarget>(\n  to: AsyncTo<InferState<T>>,\n  props: RunAsyncProps<T>,\n  state: RunAsyncState<T>,\n  target: T\n): AsyncResult<T> {\n  const { callId, parentId, onRest } = props\n  const { asyncTo: prevTo, promise: prevPromise } = state\n\n  if (!parentId && to === prevTo && !props.reset) {\n    return prevPromise!\n  }\n\n  return (state.promise = (async () => {\n    state.asyncId = callId\n    state.asyncTo = to\n\n    // The default props of any `animate` calls.\n    const defaultProps = getDefaultProps<InferProps<T>>(props, (value, key) =>\n      // The `onRest` prop is only called when the `runAsync` promise is resolved.\n      key === 'onRest' ? undefined : value\n    )\n\n    let preventBail!: () => void\n    let bail: (error: any) => void\n\n    // This promise is rejected when the animation is interrupted.\n    const bailPromise = new Promise<void>(\n      (resolve, reject) => ((preventBail = resolve), (bail = reject))\n    )\n\n    const bailIfEnded = (bailSignal: BailSignal) => {\n      const bailResult =\n        // The `cancel` prop or `stop` method was used.\n        (callId <= (state.cancelId || 0) && getCancelledResult(target)) ||\n        // The async `to` prop was replaced.\n        (callId !== state.asyncId && getFinishedResult(target, false))\n\n      if (bailResult) {\n        bailSignal.result = bailResult\n\n        // Reject the `bailPromise` to ensure the `runAsync` promise\n        // is not relying on the caller to rethrow the error for us.\n        bail(bailSignal)\n        throw bailSignal\n      }\n    }\n\n    const animate: any = (arg1: any, arg2?: any) => {\n      // Create the bail signal outside the returned promise,\n      // so the generated stack trace is relevant.\n      const bailSignal = new BailSignal()\n      const skipAnimationSignal = new SkipAniamtionSignal()\n\n      return (async () => {\n        if (G.skipAnimation) {\n          /**\n           * We need to stop animations if `skipAnimation`\n           * is set in the Globals\n           *\n           */\n          stopAsync(state)\n\n          // create the rejection error that's handled gracefully\n          skipAnimationSignal.result = getFinishedResult(target, false)\n          bail(skipAnimationSignal)\n          throw skipAnimationSignal\n        }\n\n        bailIfEnded(bailSignal)\n\n        const props: any = is.obj(arg1) ? { ...arg1 } : { ...arg2, to: arg1 }\n        props.parentId = callId\n\n        eachProp(defaultProps, (value, key) => {\n          if (is.und(props[key])) {\n            props[key] = value\n          }\n        })\n\n        const result = await target.start(props)\n        bailIfEnded(bailSignal)\n\n        if (state.paused) {\n          await new Promise<void>(resume => {\n            state.resumeQueue.add(resume)\n          })\n        }\n\n        return result\n      })()\n    }\n\n    let result!: AnimationResult<T>\n\n    if (G.skipAnimation) {\n      /**\n       * We need to stop animations if `skipAnimation`\n       * is set in the Globals\n       */\n      stopAsync(state)\n      return getFinishedResult(target, false)\n    }\n\n    try {\n      let animating!: Promise<void>\n\n      // Async sequence\n      if (is.arr(to)) {\n        animating = (async (queue: any[]) => {\n          for (const props of queue) {\n            await animate(props)\n          }\n        })(to)\n      }\n\n      // Async script\n      else {\n        animating = Promise.resolve(to(animate, target.stop.bind(target)))\n      }\n\n      await Promise.all([animating.then(preventBail), bailPromise])\n      result = getFinishedResult(target.get(), true, false)\n\n      // Bail handling\n    } catch (err) {\n      if (err instanceof BailSignal) {\n        result = err.result\n      } else if (err instanceof SkipAniamtionSignal) {\n        result = err.result\n      } else {\n        throw err\n      }\n\n      // Reset the async state.\n    } finally {\n      if (callId == state.asyncId) {\n        state.asyncId = parentId\n        state.asyncTo = parentId ? prevTo : undefined\n        state.promise = parentId ? prevPromise : undefined\n      }\n    }\n\n    if (is.fun(onRest)) {\n      raf.batchedUpdates(() => {\n        onRest(result, target, target.item)\n      })\n    }\n\n    return result\n  })())\n}\n\n/** Stop the current `runAsync` call with `finished: false` (or with `cancelled: true` when `cancelId` is defined) */\nexport function stopAsync(state: RunAsyncState, cancelId?: number | Falsy) {\n  flush(state.timeouts, t => t.cancel())\n  state.pauseQueue.clear()\n  state.resumeQueue.clear()\n  state.asyncId = state.asyncTo = state.promise = undefined\n  if (cancelId) state.cancelId = cancelId\n}\n\n/** This error is thrown to signal an interrupted async animation. */\nexport class BailSignal extends Error {\n  result!: AnimationResult\n  constructor() {\n    super(\n      'An async animation has been interrupted. You see this error because you ' +\n        'forgot to use `await` or `.catch(...)` on its returned promise.'\n    )\n  }\n}\n\nexport class SkipAniamtionSignal extends Error {\n  result!: AnimationResult\n\n  constructor() {\n    super('SkipAnimationSignal')\n  }\n}\n","import {\n  deprecateInterpolate,\n  frameLoop,\n  FluidValue,\n  Globals as G,\n  callFluidObservers,\n} from '@react-spring/shared'\nimport { InterpolatorArgs } from '@react-spring/types'\nimport { getAnimated } from '@react-spring/animated'\n\nimport { Interpolation } from './Interpolation'\n\nexport const isFrameValue = (value: any): value is FrameValue =>\n  value instanceof FrameValue\n\nlet nextId = 1\n\n/**\n * A kind of `FluidValue` that manages an `AnimatedValue` node.\n *\n * Its underlying value can be accessed and even observed.\n */\nexport abstract class FrameValue<T = any> extends FluidValue<\n  T,\n  FrameValue.Event<T>\n> {\n  readonly id = nextId++\n\n  abstract key?: string\n  abstract get idle(): boolean\n\n  protected _priority = 0\n\n  get priority() {\n    return this._priority\n  }\n  set priority(priority: number) {\n    if (this._priority != priority) {\n      this._priority = priority\n      this._onPriorityChange(priority)\n    }\n  }\n\n  /** Get the current value */\n  get(): T {\n    const node = getAnimated(this)\n    return node && node.getValue()\n  }\n\n  /** Create a spring that maps our value to another value */\n  to<Out>(...args: InterpolatorArgs<T, Out>) {\n    return G.to(this, args) as Interpolation<T, Out>\n  }\n\n  /** @deprecated Use the `to` method instead. */\n  interpolate<Out>(...args: InterpolatorArgs<T, Out>) {\n    deprecateInterpolate()\n    return G.to(this, args) as Interpolation<T, Out>\n  }\n\n  toJSON() {\n    return this.get()\n  }\n\n  protected observerAdded(count: number) {\n    if (count == 1) this._attach()\n  }\n\n  protected observerRemoved(count: number) {\n    if (count == 0) this._detach()\n  }\n\n  /** @internal */\n  abstract advance(dt: number): void\n\n  /** @internal */\n  abstract eventObserved(_event: FrameValue.Event): void\n\n  /** Called when the first child is added. */\n  protected _attach() {}\n\n  /** Called when the last child is removed. */\n  protected _detach() {}\n\n  /** Tell our children about our new value */\n  protected _onChange(value: T, idle = false) {\n    callFluidObservers(this, {\n      type: 'change',\n      parent: this,\n      value,\n      idle,\n    })\n  }\n\n  /** Tell our children about our new priority */\n  protected _onPriorityChange(priority: number) {\n    if (!this.idle) {\n      frameLoop.sort(this)\n    }\n    callFluidObservers(this, {\n      type: 'priority',\n      parent: this,\n      priority,\n    })\n  }\n}\n\nexport declare namespace FrameValue {\n  /** A parent changed its value */\n  interface ChangeEvent<T = any> {\n    parent: FrameValue<T>\n    type: 'change'\n    value: T\n    idle: boolean\n  }\n\n  /** A parent changed its priority */\n  interface PriorityEvent<T = any> {\n    parent: FrameValue<T>\n    type: 'priority'\n    priority: number\n  }\n\n  /** A parent is done animating */\n  interface IdleEvent<T = any> {\n    parent: FrameValue<T>\n    type: 'idle'\n  }\n\n  /** Events sent to children of `FrameValue` objects */\n  export type Event<T = any> = ChangeEvent<T> | PriorityEvent<T> | IdleEvent<T>\n}\n","/** The property symbol of the current animation phase. */\nconst $P = Symbol.for('SpringPhase')\n\nconst HAS_ANIMATED = 1\nconst IS_ANIMATING = 2\nconst IS_PAUSED = 4\n\n/** Returns true if the `target` has ever animated. */\nexport const hasAnimated = (target: any) => (target[$P] & HAS_ANIMATED) > 0\n\n/** Returns true if the `target` is animating (even if paused). */\nexport const isAnimating = (target: any) => (target[$P] & IS_ANIMATING) > 0\n\n/** Returns true if the `target` is paused (even if idle). */\nexport const isPaused = (target: any) => (target[$P] & IS_PAUSED) > 0\n\n/** Set the active bit of the `target` phase. */\nexport const setActiveBit = (target: any, active: boolean) =>\n  active\n    ? (target[$P] |= IS_ANIMATING | HAS_ANIMATED)\n    : (target[$P] &= ~IS_ANIMATING)\n\nexport const setPausedBit = (target: any, paused: boolean) =>\n  paused ? (target[$P] |= IS_PAUSED) : (target[$P] &= ~IS_PAUSED)\n","import {\n  is,\n  raf,\n  each,\n  isEqual,\n  toArray,\n  eachProp,\n  frameLoop,\n  flushCalls,\n  getFluidValue,\n  isAnimatedString,\n  FluidValue,\n  Globals as G,\n  callFluidObservers,\n  hasFluidValue,\n  addFluidObserver,\n  removeFluidObserver,\n  getFluidObservers,\n} from '@react-spring/shared'\nimport {\n  Animated,\n  AnimatedValue,\n  AnimatedString,\n  getPayload,\n  getAnimated,\n  setAnimated,\n  getAnimatedType,\n} from '@react-spring/animated'\nimport { Lookup } from '@react-spring/types'\n\nimport { Animation } from './Animation'\nimport { mergeConfig } from './AnimationConfig'\nimport { scheduleProps } from './scheduleProps'\nimport { runAsync, RunAsyncState, RunAsyncProps, stopAsync } from './runAsync'\nimport {\n  callProp,\n  computeGoal,\n  matchProp,\n  inferTo,\n  getDefaultProps,\n  getDefaultProp,\n  isAsyncTo,\n  resolveProp,\n} from './helpers'\nimport { FrameValue, isFrameValue } from './FrameValue'\nimport {\n  isAnimating,\n  isPaused,\n  setPausedBit,\n  hasAnimated,\n  setActiveBit,\n} from './SpringPhase'\nimport {\n  AnimationRange,\n  AnimationResolver,\n  EventKey,\n  PickEventFns,\n} from './types/internal'\nimport { AsyncResult, SpringUpdate, VelocityProp, SpringProps } from './types'\nimport {\n  getCombinedResult,\n  getCancelledResult,\n  getFinishedResult,\n  getNoopResult,\n} from './AnimationResult'\n\ndeclare const console: any\n\ninterface DefaultSpringProps<T>\n  extends Pick<SpringProps<T>, 'pause' | 'cancel' | 'immediate' | 'config'>,\n    PickEventFns<SpringProps<T>> {}\n\n/**\n * Only numbers, strings, and arrays of numbers/strings are supported.\n * Non-animatable strings are also supported.\n */\nexport class SpringValue<T = any> extends FrameValue<T> {\n  /** The property name used when `to` or `from` is an object. Useful when debugging too. */\n  key?: string\n\n  /** The animation state */\n  animation = new Animation<T>()\n\n  /** The queue of pending props */\n  queue?: SpringUpdate<T>[]\n\n  /** Some props have customizable default values */\n  defaultProps: DefaultSpringProps<T> = {}\n\n  /** The state for `runAsync` calls */\n  protected _state: RunAsyncState<SpringValue<T>> = {\n    paused: false,\n    pauseQueue: new Set(),\n    resumeQueue: new Set(),\n    timeouts: new Set(),\n  }\n\n  /** The promise resolvers of pending `start` calls */\n  protected _pendingCalls = new Set<AnimationResolver<this>>()\n\n  /** The counter for tracking `scheduleProps` calls */\n  protected _lastCallId = 0\n\n  /** The last `scheduleProps` call that changed the `to` prop */\n  protected _lastToId = 0\n\n  protected _memoizedDuration = 0\n\n  constructor(from: Exclude<T, object>, props?: SpringUpdate<T>)\n  constructor(props?: SpringUpdate<T>)\n  constructor(arg1?: any, arg2?: any) {\n    super()\n    if (!is.und(arg1) || !is.und(arg2)) {\n      const props = is.obj(arg1) ? { ...arg1 } : { ...arg2, from: arg1 }\n      if (is.und(props.default)) {\n        props.default = true\n      }\n      this.start(props)\n    }\n  }\n\n  /** Equals true when not advancing on each frame. */\n  get idle() {\n    return !(isAnimating(this) || this._state.asyncTo) || isPaused(this)\n  }\n\n  get goal() {\n    return getFluidValue(this.animation.to) as T\n  }\n\n  get velocity(): VelocityProp<T> {\n    const node = getAnimated(this)!\n    return (node instanceof AnimatedValue\n      ? node.lastVelocity || 0\n      : node.getPayload().map(node => node.lastVelocity || 0)) as any\n  }\n\n  /**\n   * When true, this value has been animated at least once.\n   */\n  get hasAnimated() {\n    return hasAnimated(this)\n  }\n\n  /**\n   * When true, this value has an unfinished animation,\n   * which is either active or paused.\n   */\n  get isAnimating() {\n    return isAnimating(this)\n  }\n\n  /**\n   * When true, all current and future animations are paused.\n   */\n  get isPaused() {\n    return isPaused(this)\n  }\n\n  /** Advance the current animation by a number of milliseconds */\n  advance(dt: number) {\n    let idle = true\n    let changed = false\n\n    const anim = this.animation\n    let { config, toValues } = anim\n\n    const payload = getPayload(anim.to)\n    if (!payload && hasFluidValue(anim.to)) {\n      toValues = toArray(getFluidValue(anim.to)) as any\n    }\n\n    anim.values.forEach((node, i) => {\n      if (node.done) return\n\n      const to =\n        // Animated strings always go from 0 to 1.\n        node.constructor == AnimatedString\n          ? 1\n          : payload\n          ? payload[i].lastPosition\n          : toValues![i]\n\n      let finished = anim.immediate\n      let position = to\n\n      if (!finished) {\n        position = node.lastPosition\n\n        // Loose springs never move.\n        if (config.tension <= 0) {\n          node.done = true\n          return\n        }\n\n        let elapsed = (node.elapsedTime += dt)\n        const from = anim.fromValues[i]\n\n        const v0 =\n          node.v0 != null\n            ? node.v0\n            : (node.v0 = is.arr(config.velocity)\n                ? config.velocity[i]\n                : config.velocity)\n\n        let velocity: number\n\n        // Duration easing\n        if (!is.und(config.duration)) {\n          let p = 1\n          if (config.duration > 0) {\n            /**\n             * Here we check if the duration has changed in the config\n             * and if so update the elapsed time to the percentage\n             * of completition so there is no jank in the animation\n             * https://github.com/pmndrs/react-spring/issues/1163\n             */\n            if (this._memoizedDuration !== config.duration) {\n              // update the memoized version to the new duration\n              this._memoizedDuration = config.duration\n\n              // if the value has started animating we need to update it\n              if (node.durationProgress > 0) {\n                // set elapsed time to be the same percentage of progress as the previous duration\n                node.elapsedTime = config.duration * node.durationProgress\n                // add the delta so the below updates work as expected\n                elapsed = node.elapsedTime += dt\n              }\n            }\n\n            // calculate the new progress\n            p = (config.progress || 0) + elapsed / this._memoizedDuration\n            // p is clamped between 0-1\n            p = p > 1 ? 1 : p < 0 ? 0 : p\n            // store our new progress\n            node.durationProgress = p\n          }\n\n          position = from + config.easing(p) * (to - from)\n          velocity = (position - node.lastPosition) / dt\n\n          finished = p == 1\n        }\n\n        // Decay easing\n        else if (config.decay) {\n          const decay = config.decay === true ? 0.998 : config.decay\n          const e = Math.exp(-(1 - decay) * elapsed)\n\n          position = from + (v0 / (1 - decay)) * (1 - e)\n          finished = Math.abs(node.lastPosition - position) < 0.1\n\n          // derivative of position\n          velocity = v0 * e\n        }\n\n        // Spring easing\n        else {\n          velocity = node.lastVelocity == null ? v0 : node.lastVelocity\n\n          /** The smallest distance from a value before being treated like said value. */\n          const precision =\n            config.precision ||\n            (from == to ? 0.005 : Math.min(1, Math.abs(to - from) * 0.001))\n\n          /** The velocity at which movement is essentially none */\n          const restVelocity = config.restVelocity || precision / 10\n\n          // Bouncing is opt-in (not to be confused with overshooting)\n          const bounceFactor = config.clamp ? 0 : config.bounce!\n          const canBounce = !is.und(bounceFactor)\n\n          /** When `true`, the value is increasing over time */\n          const isGrowing = from == to ? node.v0 > 0 : from < to\n\n          /** When `true`, the velocity is considered moving */\n          let isMoving!: boolean\n\n          /** When `true`, the velocity is being deflected or clamped */\n          let isBouncing = false\n\n          const step = 1 // 1ms\n          const numSteps = Math.ceil(dt / step)\n          for (let n = 0; n < numSteps; ++n) {\n            isMoving = Math.abs(velocity) > restVelocity\n\n            if (!isMoving) {\n              finished = Math.abs(to - position) <= precision\n              if (finished) {\n                break\n              }\n            }\n\n            if (canBounce) {\n              isBouncing = position == to || position > to == isGrowing\n\n              // Invert the velocity with a magnitude, or clamp it.\n              if (isBouncing) {\n                velocity = -velocity * bounceFactor\n                position = to\n              }\n            }\n\n            const springForce = -config.tension * 0.000001 * (position - to)\n            const dampingForce = -config.friction * 0.001 * velocity\n            const acceleration = (springForce + dampingForce) / config.mass // pt/ms^2\n\n            velocity = velocity + acceleration * step // pt/ms\n            position = position + velocity * step\n          }\n        }\n\n        node.lastVelocity = velocity\n\n        if (Number.isNaN(position)) {\n          console.warn(`Got NaN while animating:`, this)\n          finished = true\n        }\n      }\n\n      // Parent springs must finish before their children can.\n      if (payload && !payload[i].done) {\n        finished = false\n      }\n\n      if (finished) {\n        node.done = true\n      } else {\n        idle = false\n      }\n\n      if (node.setValue(position, config.round)) {\n        changed = true\n      }\n    })\n\n    const node = getAnimated(this)!\n    if (idle) {\n      const value = getFluidValue(anim.to)\n      if (node.setValue(value) || changed) {\n        this._onChange(value)\n      }\n      this._stop()\n    } else if (changed) {\n      this._onChange(node.getValue())\n    }\n  }\n\n  /** Set the current value, while stopping the current animation */\n  set(value: T | FluidValue<T>) {\n    raf.batchedUpdates(() => {\n      this._stop()\n\n      // These override the current value and goal value that may have\n      // been updated by `onRest` handlers in the `_stop` call above.\n      this._focus(value)\n      this._set(value)\n    })\n    return this\n  }\n\n  /**\n   * Freeze the active animation in time, as well as any updates merged\n   * before `resume` is called.\n   */\n  pause() {\n    this._update({ pause: true })\n  }\n\n  /** Resume the animation if paused. */\n  resume() {\n    this._update({ pause: false })\n  }\n\n  /** Skip to the end of the current animation. */\n  finish() {\n    if (isAnimating(this)) {\n      const { to, config } = this.animation\n      raf.batchedUpdates(() => {\n        // Ensure the \"onStart\" and \"onRest\" props are called.\n        this._onStart()\n\n        // Jump to the goal value, except for decay animations\n        // which have an undefined goal value.\n        if (!config.decay) {\n          this._set(to, false)\n        }\n\n        this._stop()\n      })\n    }\n    return this\n  }\n\n  /** Push props into the pending queue. */\n  update(props: SpringUpdate<T>) {\n    const queue = this.queue || (this.queue = [])\n    queue.push(props)\n    return this\n  }\n\n  /**\n   * Update this value's animation using the queue of pending props,\n   * and unpause the current animation (if one is frozen).\n   *\n   * When arguments are passed, a new animation is created, and the\n   * queued animations are left alone.\n   */\n  start(): AsyncResult<this>\n\n  start(props: SpringUpdate<T>): AsyncResult<this>\n\n  start(to: T, props?: SpringProps<T>): AsyncResult<this>\n\n  start(to?: T | SpringUpdate<T>, arg2?: SpringProps<T>) {\n    let queue: SpringUpdate<T>[]\n    if (!is.und(to)) {\n      queue = [is.obj(to) ? to : { ...arg2, to }]\n    } else {\n      queue = this.queue || []\n      this.queue = []\n    }\n\n    return Promise.all(queue.map(props => this._update(props))).then(results =>\n      getCombinedResult(this, results)\n    )\n  }\n\n  /**\n   * Stop the current animation, and cancel any delayed updates.\n   *\n   * Pass `true` to call `onRest` with `cancelled: true`.\n   */\n  stop(cancel?: boolean) {\n    const { to } = this.animation\n\n    // The current value becomes the goal value.\n    this._focus(this.get())\n\n    stopAsync(this._state, cancel && this._lastCallId)\n    raf.batchedUpdates(() => this._stop(to, cancel))\n\n    return this\n  }\n\n  /** Restart the animation. */\n  reset() {\n    this._update({ reset: true })\n  }\n\n  /** @internal */\n  eventObserved(event: FrameValue.Event) {\n    if (event.type == 'change') {\n      this._start()\n    } else if (event.type == 'priority') {\n      this.priority = event.priority + 1\n    }\n  }\n\n  /**\n   * Parse the `to` and `from` range from the given `props` object.\n   *\n   * This also ensures the initial value is available to animated components\n   * during the render phase.\n   */\n  protected _prepareNode(props: {\n    to?: any\n    from?: any\n    reverse?: boolean\n    default?: any\n  }) {\n    const key = this.key || ''\n\n    let { to, from } = props\n\n    to = is.obj(to) ? to[key] : to\n    if (to == null || isAsyncTo(to)) {\n      to = undefined\n    }\n\n    from = is.obj(from) ? from[key] : from\n    if (from == null) {\n      from = undefined\n    }\n\n    // Create the range now to avoid \"reverse\" logic.\n    const range = { to, from }\n\n    // Before ever animating, this method ensures an `Animated` node\n    // exists and keeps its value in sync with the \"from\" prop.\n    if (!hasAnimated(this)) {\n      if (props.reverse) [to, from] = [from, to]\n\n      from = getFluidValue(from)\n      if (!is.und(from)) {\n        this._set(from)\n      }\n      // Use the \"to\" value if our node is undefined.\n      else if (!getAnimated(this)) {\n        this._set(to)\n      }\n    }\n\n    return range\n  }\n\n  /** Every update is processed by this method before merging. */\n  protected _update(\n    { ...props }: SpringProps<T>,\n    isLoop?: boolean\n  ): AsyncResult<SpringValue<T>> {\n    const { key, defaultProps } = this\n\n    // Update the default props immediately.\n    if (props.default)\n      Object.assign(\n        defaultProps,\n        getDefaultProps(props, (value, prop) =>\n          /^on/.test(prop) ? resolveProp(value, key) : value\n        )\n      )\n\n    mergeActiveFn(this, props, 'onProps')\n    sendEvent(this, 'onProps', props, this)\n\n    // Ensure the initial value can be accessed by animated components.\n    const range = this._prepareNode(props)\n\n    if (Object.isFrozen(this)) {\n      throw Error(\n        'Cannot animate a `SpringValue` object that is frozen. ' +\n          'Did you forget to pass your component to `animated(...)` before animating its props?'\n      )\n    }\n\n    const state = this._state\n    return scheduleProps(++this._lastCallId, {\n      key,\n      props,\n      defaultProps,\n      state,\n      actions: {\n        pause: () => {\n          if (!isPaused(this)) {\n            setPausedBit(this, true)\n            flushCalls(state.pauseQueue)\n            sendEvent(\n              this,\n              'onPause',\n              getFinishedResult(this, checkFinished(this, this.animation.to)),\n              this\n            )\n          }\n        },\n        resume: () => {\n          if (isPaused(this)) {\n            setPausedBit(this, false)\n            if (isAnimating(this)) {\n              this._resume()\n            }\n            flushCalls(state.resumeQueue)\n            sendEvent(\n              this,\n              'onResume',\n              getFinishedResult(this, checkFinished(this, this.animation.to)),\n              this\n            )\n          }\n        },\n        start: this._merge.bind(this, range),\n      },\n    }).then(result => {\n      if (props.loop && result.finished && !(isLoop && result.noop)) {\n        const nextProps = createLoopUpdate(props)\n        if (nextProps) {\n          return this._update(nextProps, true)\n        }\n      }\n      return result\n    })\n  }\n\n  /** Merge props into the current animation */\n  protected _merge(\n    range: AnimationRange<T>,\n    props: RunAsyncProps<SpringValue<T>>,\n    resolve: AnimationResolver<SpringValue<T>>\n  ): void {\n    // The \"cancel\" prop cancels all pending delays and it forces the\n    // active animation to stop where it is.\n    if (props.cancel) {\n      this.stop(true)\n      return resolve(getCancelledResult(this))\n    }\n\n    /** The \"to\" prop is defined. */\n    const hasToProp = !is.und(range.to)\n\n    /** The \"from\" prop is defined. */\n    const hasFromProp = !is.und(range.from)\n\n    // Avoid merging other props if implicitly prevented, except\n    // when both the \"to\" and \"from\" props are undefined.\n    if (hasToProp || hasFromProp) {\n      if (props.callId > this._lastToId) {\n        this._lastToId = props.callId\n      } else {\n        return resolve(getCancelledResult(this))\n      }\n    }\n\n    const { key, defaultProps, animation: anim } = this\n    const { to: prevTo, from: prevFrom } = anim\n    let { to = prevTo, from = prevFrom } = range\n\n    // Focus the \"from\" value if changing without a \"to\" value.\n    // For default updates, do this only if no \"to\" value exists.\n    if (hasFromProp && !hasToProp && (!props.default || is.und(to))) {\n      to = from\n    }\n\n    // Flip the current range if \"reverse\" is true.\n    if (props.reverse) [to, from] = [from, to]\n\n    /** The \"from\" value is changing. */\n    const hasFromChanged = !isEqual(from, prevFrom)\n\n    if (hasFromChanged) {\n      anim.from = from\n    }\n\n    // Coerce \"from\" into a static value.\n    from = getFluidValue(from)\n\n    /** The \"to\" value is changing. */\n    const hasToChanged = !isEqual(to, prevTo)\n\n    if (hasToChanged) {\n      this._focus(to)\n    }\n\n    /** The \"to\" prop is async. */\n    const hasAsyncTo = isAsyncTo(props.to)\n\n    const { config } = anim\n    const { decay, velocity } = config\n\n    // Reset to default velocity when goal values are defined.\n    if (hasToProp || hasFromProp) {\n      config.velocity = 0\n    }\n\n    // The \"runAsync\" function treats the \"config\" prop as a default,\n    // so we must avoid merging it when the \"to\" prop is async.\n    if (props.config && !hasAsyncTo) {\n      mergeConfig(\n        config,\n        callProp(props.config, key!),\n        // Avoid calling the same \"config\" prop twice.\n        props.config !== defaultProps.config\n          ? callProp(defaultProps.config, key!)\n          : void 0\n      )\n    }\n\n    // This instance might not have its Animated node yet. For example,\n    // the constructor can be given props without a \"to\" or \"from\" value.\n    let node = getAnimated(this)\n    if (!node || is.und(to)) {\n      return resolve(getFinishedResult(this, true))\n    }\n\n    /** When true, start at the \"from\" value. */\n    const reset =\n      // When `reset` is undefined, the `from` prop implies `reset: true`,\n      // except for declarative updates. When `reset` is defined, there\n      // must exist a value to animate from.\n      is.und(props.reset)\n        ? hasFromProp && !props.default\n        : !is.und(from) && matchProp(props.reset, key)\n\n    // The current value, where the animation starts from.\n    const value = reset ? (from as T) : this.get()\n\n    // The animation ends at this value, unless \"to\" is fluid.\n    const goal = computeGoal<any>(to)\n\n    // Only specific types can be animated to/from.\n    const isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal)\n\n    // When true, the value changes instantly on the next frame.\n    const immediate =\n      !hasAsyncTo &&\n      (!isAnimatable ||\n        matchProp(defaultProps.immediate || props.immediate, key))\n\n    if (hasToChanged) {\n      const nodeType = getAnimatedType(to)\n      if (nodeType !== node.constructor) {\n        if (immediate) {\n          node = this._set(goal)!\n        } else\n          throw Error(\n            `Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the \"to\" prop suggests`\n          )\n      }\n    }\n\n    // The type of Animated node for the goal value.\n    const goalType = node.constructor\n\n    // When the goal value is fluid, we don't know if its value\n    // will change before the next animation frame, so it always\n    // starts the animation to be safe.\n    let started = hasFluidValue(to)\n    let finished = false\n\n    if (!started) {\n      // When true, the current value has probably changed.\n      const hasValueChanged = reset || (!hasAnimated(this) && hasFromChanged)\n\n      // When the \"to\" value or current value are changed,\n      // start animating if not already finished.\n      if (hasToChanged || hasValueChanged) {\n        finished = isEqual(computeGoal(value), goal)\n        started = !finished\n      }\n\n      // Changing \"decay\" or \"velocity\" starts the animation.\n      if (\n        !isEqual(config.decay, decay) ||\n        !isEqual(config.velocity, velocity)\n      ) {\n        started = true\n      }\n    }\n\n    // Was the goal value set to the current value while animating?\n    if (finished && isAnimating(this)) {\n      // If the first frame has passed, allow the animation to\n      // overshoot instead of stopping abruptly.\n      if (anim.changed && !reset) {\n        started = true\n      }\n      // Stop the animation before its first frame.\n      else if (!started) {\n        this._stop(prevTo)\n      }\n    }\n\n    if (!hasAsyncTo) {\n      // Make sure our \"toValues\" are updated even if our previous\n      // \"to\" prop is a fluid value whose current value is also ours.\n      if (started || hasFluidValue(prevTo)) {\n        anim.values = node.getPayload()\n        anim.toValues = hasFluidValue(to)\n          ? null\n          : goalType == AnimatedString\n          ? [1]\n          : toArray(goal)\n      }\n\n      if (anim.immediate != immediate) {\n        anim.immediate = immediate\n\n        // Ensure the immediate goal is used as from value.\n        if (!immediate && !reset) {\n          this._set(prevTo)\n        }\n      }\n\n      if (started) {\n        const { onRest } = anim\n\n        // Set the active handlers when an animation starts.\n        each(ACTIVE_EVENTS, type => mergeActiveFn(this, props, type))\n\n        const result = getFinishedResult(this, checkFinished(this, prevTo))\n        flushCalls(this._pendingCalls, result)\n        this._pendingCalls.add(resolve)\n\n        if (anim.changed)\n          raf.batchedUpdates(() => {\n            // Ensure `onStart` can be called after a reset.\n            anim.changed = !reset\n\n            // Call the active `onRest` handler from the interrupted animation.\n            onRest?.(result, this)\n\n            // Notify the default `onRest` of the reset, but wait for the\n            // first frame to pass before sending an `onStart` event.\n            if (reset) {\n              callProp(defaultProps.onRest, result)\n            }\n            // Call the active `onStart` handler here since the first frame\n            // has already passed, which means this is a goal update and not\n            // an entirely new animation.\n            else {\n              anim.onStart?.(result, this)\n            }\n          })\n      }\n    }\n\n    if (reset) {\n      this._set(value)\n    }\n\n    if (hasAsyncTo) {\n      resolve(runAsync(props.to, props, this._state, this))\n    }\n\n    // Start an animation\n    else if (started) {\n      this._start()\n    }\n\n    // Postpone promise resolution until the animation is finished,\n    // so that no-op updates still resolve at the expected time.\n    else if (isAnimating(this) && !hasToChanged) {\n      this._pendingCalls.add(resolve)\n    }\n\n    // Resolve our promise immediately.\n    else {\n      resolve(getNoopResult(value))\n    }\n  }\n\n  /** Update the `animation.to` value, which might be a `FluidValue` */\n  protected _focus(value: T | FluidValue<T>) {\n    const anim = this.animation\n    if (value !== anim.to) {\n      if (getFluidObservers(this)) {\n        this._detach()\n      }\n      anim.to = value\n      if (getFluidObservers(this)) {\n        this._attach()\n      }\n    }\n  }\n\n  protected _attach() {\n    let priority = 0\n\n    const { to } = this.animation\n    if (hasFluidValue(to)) {\n      addFluidObserver(to, this)\n      if (isFrameValue(to)) {\n        priority = to.priority + 1\n      }\n    }\n\n    this.priority = priority\n  }\n\n  protected _detach() {\n    const { to } = this.animation\n    if (hasFluidValue(to)) {\n      removeFluidObserver(to, this)\n    }\n  }\n\n  /**\n   * Update the current value from outside the frameloop,\n   * and return the `Animated` node.\n   */\n  protected _set(arg: T | FluidValue<T>, idle = true): Animated | undefined {\n    const value = getFluidValue(arg)\n    if (!is.und(value)) {\n      const oldNode = getAnimated(this)\n      if (!oldNode || !isEqual(value, oldNode.getValue())) {\n        // Create a new node or update the existing node.\n        const nodeType = getAnimatedType(value)\n        if (!oldNode || oldNode.constructor != nodeType) {\n          setAnimated(this, nodeType.create(value))\n        } else {\n          oldNode.setValue(value)\n        }\n        // Never emit a \"change\" event for the initial value.\n        if (oldNode) {\n          raf.batchedUpdates(() => {\n            this._onChange(value, idle)\n          })\n        }\n      }\n    }\n    return getAnimated(this)\n  }\n\n  protected _onStart() {\n    const anim = this.animation\n    if (!anim.changed) {\n      anim.changed = true\n      sendEvent(\n        this,\n        'onStart',\n        getFinishedResult(this, checkFinished(this, anim.to)),\n        this\n      )\n    }\n  }\n\n  protected _onChange(value: T, idle?: boolean) {\n    if (!idle) {\n      this._onStart()\n      callProp(this.animation.onChange, value, this)\n    }\n    callProp(this.defaultProps.onChange, value, this)\n    super._onChange(value, idle)\n  }\n\n  // This method resets the animation state (even if already animating) to\n  // ensure the latest from/to range is used, and it also ensures this spring\n  // is added to the frameloop.\n  protected _start() {\n    const anim = this.animation\n\n    // Reset the state of each Animated node.\n    getAnimated(this)!.reset(getFluidValue(anim.to))\n\n    // Use the current values as the from values.\n    if (!anim.immediate) {\n      anim.fromValues = anim.values.map(node => node.lastPosition)\n    }\n\n    if (!isAnimating(this)) {\n      setActiveBit(this, true)\n      if (!isPaused(this)) {\n        this._resume()\n      }\n    }\n  }\n\n  protected _resume() {\n    // The \"skipAnimation\" global avoids the frameloop.\n    if (G.skipAnimation) {\n      this.finish()\n    } else {\n      frameLoop.start(this)\n    }\n  }\n\n  /**\n   * Exit the frameloop and notify `onRest` listeners.\n   *\n   * Always wrap `_stop` calls with `batchedUpdates`.\n   */\n  protected _stop(goal?: any, cancel?: boolean) {\n    if (isAnimating(this)) {\n      setActiveBit(this, false)\n\n      const anim = this.animation\n      each(anim.values, node => {\n        node.done = true\n      })\n\n      // These active handlers must be reset to undefined or else\n      // they could be called while idle. But keep them defined\n      // when the goal value is dynamic.\n      if (anim.toValues) {\n        anim.onChange = anim.onPause = anim.onResume = undefined\n      }\n\n      callFluidObservers(this, {\n        type: 'idle',\n        parent: this,\n      })\n\n      const result = cancel\n        ? getCancelledResult(this.get())\n        : getFinishedResult(this.get(), checkFinished(this, goal ?? anim.to))\n\n      flushCalls(this._pendingCalls, result)\n      if (anim.changed) {\n        anim.changed = false\n        sendEvent(this, 'onRest', result, this)\n      }\n    }\n  }\n}\n\n/** Returns true when the current value and goal value are equal. */\nfunction checkFinished<T>(target: SpringValue<T>, to: T | FluidValue<T>) {\n  const goal = computeGoal(to)\n  const value = computeGoal(target.get())\n  return isEqual(value, goal)\n}\n\nexport function createLoopUpdate<T>(\n  props: T & { loop?: any; to?: any; from?: any; reverse?: any },\n  loop = props.loop,\n  to = props.to\n): T | undefined {\n  let loopRet = callProp(loop)\n  if (loopRet) {\n    const overrides = loopRet !== true && inferTo(loopRet)\n    const reverse = (overrides || props).reverse\n    const reset = !overrides || overrides.reset\n    return createUpdate({\n      ...props,\n      loop,\n\n      // Avoid updating default props when looping.\n      default: false,\n\n      // Never loop the `pause` prop.\n      pause: undefined,\n\n      // For the \"reverse\" prop to loop as expected, the \"to\" prop\n      // must be undefined. The \"reverse\" prop is ignored when the\n      // \"to\" prop is an array or function.\n      to: !reverse || isAsyncTo(to) ? to : undefined,\n\n      // Ignore the \"from\" prop except on reset.\n      from: reset ? props.from : undefined,\n      reset,\n\n      // The \"loop\" prop can return a \"useSpring\" props object to\n      // override any of the original props.\n      ...overrides,\n    })\n  }\n}\n\n/**\n * Return a new object based on the given `props`.\n *\n * - All non-reserved props are moved into the `to` prop object.\n * - The `keys` prop is set to an array of affected keys,\n *   or `null` if all keys are affected.\n */\nexport function createUpdate(props: any) {\n  const { to, from } = (props = inferTo(props))\n\n  // Collect the keys affected by this update.\n  const keys = new Set<string>()\n\n  if (is.obj(to)) findDefined(to, keys)\n  if (is.obj(from)) findDefined(from, keys)\n\n  // The \"keys\" prop helps in applying updates to affected keys only.\n  props.keys = keys.size ? Array.from(keys) : null\n\n  return props\n}\n\n/**\n * A modified version of `createUpdate` meant for declarative APIs.\n */\nexport function declareUpdate(props: any) {\n  const update = createUpdate(props)\n  if (is.und(update.default)) {\n    update.default = getDefaultProps(update)\n  }\n  return update\n}\n\n/** Find keys with defined values */\nfunction findDefined(values: Lookup, keys: Set<string>) {\n  eachProp(values, (value, key) => value != null && keys.add(key as any))\n}\n\n/** Event props with \"active handler\" support */\nconst ACTIVE_EVENTS = [\n  'onStart',\n  'onRest',\n  'onChange',\n  'onPause',\n  'onResume',\n] as const\n\nfunction mergeActiveFn<T, P extends EventKey>(\n  target: SpringValue<T>,\n  props: SpringProps<T>,\n  type: P\n) {\n  target.animation[type] =\n    props[type] !== getDefaultProp(props, type)\n      ? resolveProp<any>(props[type], target.key)\n      : undefined\n}\n\ntype EventArgs<T, P extends EventKey> = Parameters<\n  Extract<SpringProps<T>[P], Function>\n>\n\n/** Call the active handler first, then the default handler. */\nfunction sendEvent<T, P extends EventKey>(\n  target: SpringValue<T>,\n  type: P,\n  ...args: EventArgs<T, P>\n) {\n  target.animation[type]?.(...(args as [any, any]))\n  target.defaultProps[type]?.(...(args as [any, any]))\n}\n","import { OneOrMore, UnknownProps, Lookup, Falsy } from '@react-spring/types'\nimport {\n  is,\n  raf,\n  each,\n  noop,\n  flush,\n  toArray,\n  eachProp,\n  flushCalls,\n  addFluidObserver,\n  FluidObserver,\n} from '@react-spring/shared'\n\nimport { getDefaultProp } from './helpers'\nimport { FrameValue } from './FrameValue'\nimport { SpringRef } from './SpringRef'\nimport { SpringValue, createLoopUpdate, createUpdate } from './SpringValue'\nimport { getCancelledResult, getCombinedResult } from './AnimationResult'\nimport { runAsync, RunAsyncState, stopAsync } from './runAsync'\nimport { scheduleProps } from './scheduleProps'\nimport {\n  AnimationResult,\n  AsyncResult,\n  ControllerFlushFn,\n  ControllerUpdate,\n  OnChange,\n  OnRest,\n  OnStart,\n  SpringValues,\n} from './types'\n\n/** Events batched by the `Controller` class */\nconst BATCHED_EVENTS = ['onStart', 'onChange', 'onRest'] as const\n\nlet nextId = 1\n\n/** Queue of pending updates for a `Controller` instance. */\nexport interface ControllerQueue<State extends Lookup = Lookup>\n  extends Array<\n    ControllerUpdate<State, any> & {\n      /** The keys affected by this update. When null, all keys are affected. */\n      keys: string[] | null\n    }\n  > {}\n\nexport class Controller<State extends Lookup = Lookup> {\n  readonly id = nextId++\n\n  /** The animated values */\n  springs: SpringValues<State> = {} as any\n\n  /** The queue of props passed to the `update` method. */\n  queue: ControllerQueue<State> = []\n\n  /**\n   * The injected ref. When defined, render-based updates are pushed\n   * onto the `queue` instead of being auto-started.\n   */\n  ref?: SpringRef<State>\n\n  /** Custom handler for flushing update queues */\n  protected _flush?: ControllerFlushFn<this>\n\n  /** These props are used by all future spring values */\n  protected _initialProps?: Lookup\n\n  /** The counter for tracking `scheduleProps` calls */\n  protected _lastAsyncId = 0\n\n  /** The values currently being animated */\n  protected _active = new Set<FrameValue>()\n\n  /** The values that changed recently */\n  protected _changed = new Set<FrameValue>()\n\n  /** Equals false when `onStart` listeners can be called */\n  protected _started = false\n\n  private _item?: any\n\n  /** State used by the `runAsync` function */\n  protected _state: RunAsyncState<this> = {\n    paused: false,\n    pauseQueue: new Set(),\n    resumeQueue: new Set(),\n    timeouts: new Set(),\n  }\n\n  /** The event queues that are flushed once per frame maximum */\n  protected _events = {\n    onStart: new Map<\n      OnStart<SpringValue<State>, Controller<State>, any>,\n      AnimationResult\n    >(),\n    onChange: new Map<\n      OnChange<SpringValue<State>, Controller<State>, any>,\n      AnimationResult\n    >(),\n    onRest: new Map<\n      OnRest<SpringValue<State>, Controller<State>, any>,\n      AnimationResult\n    >(),\n  }\n\n  constructor(\n    props?: ControllerUpdate<State> | null,\n    flush?: ControllerFlushFn<any>\n  ) {\n    this._onFrame = this._onFrame.bind(this)\n    if (flush) {\n      this._flush = flush\n    }\n    if (props) {\n      this.start({ default: true, ...props })\n    }\n  }\n\n  /**\n   * Equals `true` when no spring values are in the frameloop, and\n   * no async animation is currently active.\n   */\n  get idle() {\n    return (\n      !this._state.asyncTo &&\n      Object.values(this.springs as Lookup<SpringValue>).every(\n        spring => spring.idle\n      )\n    )\n  }\n\n  get item() {\n    return this._item\n  }\n\n  set item(item) {\n    this._item = item\n  }\n\n  /** Get the current values of our springs */\n  get(): State & UnknownProps {\n    const values: any = {}\n    this.each((spring, key) => (values[key] = spring.get()))\n    return values\n  }\n\n  /** Set the current values without animating. */\n  set(values: Partial<State>) {\n    for (const key in values) {\n      const value = values[key]\n      if (!is.und(value)) {\n        this.springs[key].set(value)\n      }\n    }\n  }\n\n  /** Push an update onto the queue of each value. */\n  update(props: ControllerUpdate<State> | Falsy) {\n    if (props) {\n      this.queue.push(createUpdate(props))\n    }\n    return this\n  }\n\n  /**\n   * Start the queued animations for every spring, and resolve the returned\n   * promise once all queued animations have finished or been cancelled.\n   *\n   * When you pass a queue (instead of nothing), that queue is used instead of\n   * the queued animations added with the `update` method, which are left alone.\n   */\n  start(props?: OneOrMore<ControllerUpdate<State>> | null): AsyncResult<this> {\n    let { queue } = this as any\n    if (props) {\n      queue = toArray<any>(props).map(createUpdate)\n    } else {\n      this.queue = []\n    }\n\n    if (this._flush) {\n      return this._flush(this, queue)\n    }\n\n    prepareKeys(this, queue)\n    return flushUpdateQueue(this, queue)\n  }\n\n  /** Stop all animations. */\n  stop(): this\n  /** Stop animations for the given keys. */\n  stop(keys: OneOrMore<string>): this\n  /** Cancel all animations. */\n  stop(cancel: boolean): this\n  /** Cancel animations for the given keys. */\n  stop(cancel: boolean, keys: OneOrMore<string>): this\n  /** Stop some or all animations. */\n  stop(keys?: OneOrMore<string>): this\n  /** Cancel some or all animations. */\n  stop(cancel: boolean, keys?: OneOrMore<string>): this\n  /** @internal */\n  stop(arg?: boolean | OneOrMore<string>, keys?: OneOrMore<string>) {\n    if (arg !== !!arg) {\n      keys = arg as OneOrMore<string>\n    }\n    if (keys) {\n      const springs = this.springs as Lookup<SpringValue>\n      each(toArray(keys), key => springs[key].stop(!!arg))\n    } else {\n      stopAsync(this._state, this._lastAsyncId)\n      this.each(spring => spring.stop(!!arg))\n    }\n    return this\n  }\n\n  /** Freeze the active animation in time */\n  pause(keys?: OneOrMore<string>) {\n    if (is.und(keys)) {\n      this.start({ pause: true })\n    } else {\n      const springs = this.springs as Lookup<SpringValue>\n      each(toArray(keys), key => springs[key].pause())\n    }\n    return this\n  }\n\n  /** Resume the animation if paused. */\n  resume(keys?: OneOrMore<string>) {\n    if (is.und(keys)) {\n      this.start({ pause: false })\n    } else {\n      const springs = this.springs as Lookup<SpringValue>\n      each(toArray(keys), key => springs[key].resume())\n    }\n    return this\n  }\n\n  /** Call a function once per spring value */\n  each(iterator: (spring: SpringValue, key: string) => void) {\n    eachProp(this.springs, iterator as any)\n  }\n\n  /** @internal Called at the end of every animation frame */\n  protected _onFrame() {\n    const { onStart, onChange, onRest } = this._events\n\n    const active = this._active.size > 0\n    const changed = this._changed.size > 0\n\n    if ((active && !this._started) || (changed && !this._started)) {\n      this._started = true\n      flush(onStart, ([onStart, result]) => {\n        result.value = this.get()\n        onStart(result, this, this._item)\n      })\n    }\n\n    const idle = !active && this._started\n    const values = changed || (idle && onRest.size) ? this.get() : null\n\n    if (changed && onChange.size) {\n      flush(onChange, ([onChange, result]) => {\n        result.value = values\n        onChange(result, this, this._item)\n      })\n    }\n\n    // The \"onRest\" queue is only flushed when all springs are idle.\n    if (idle) {\n      this._started = false\n      flush(onRest, ([onRest, result]) => {\n        result.value = values\n        onRest(result, this, this._item)\n      })\n    }\n  }\n\n  /** @internal */\n  eventObserved(event: FrameValue.Event) {\n    if (event.type == 'change') {\n      this._changed.add(event.parent)\n      if (!event.idle) {\n        this._active.add(event.parent)\n      }\n    } else if (event.type == 'idle') {\n      this._active.delete(event.parent)\n    }\n    // The `onFrame` handler runs when a parent is changed or idle.\n    else return\n    raf.onFrame(this._onFrame)\n  }\n}\n\n/**\n * Warning: Props might be mutated.\n */\nexport function flushUpdateQueue(\n  ctrl: Controller<any>,\n  queue: ControllerQueue\n) {\n  return Promise.all(\n    queue.map(props => flushUpdate(ctrl, props))\n  ).then(results => getCombinedResult(ctrl, results))\n}\n\n/**\n * Warning: Props might be mutated.\n *\n * Process a single set of props using the given controller.\n *\n * The returned promise resolves to `true` once the update is\n * applied and any animations it starts are finished without being\n * stopped or cancelled.\n */\nexport async function flushUpdate(\n  ctrl: Controller<any>,\n  props: ControllerQueue[number],\n  isLoop?: boolean\n): AsyncResult {\n  const { keys, to, from, loop, onRest, onResolve } = props\n  const defaults = is.obj(props.default) && props.default\n\n  // Looping must be handled in this function, or else the values\n  // would end up looping out-of-sync in many common cases.\n  if (loop) {\n    props.loop = false\n  }\n\n  // Treat false like null, which gets ignored.\n  if (to === false) props.to = null\n  if (from === false) props.from = null\n\n  const asyncTo = is.arr(to) || is.fun(to) ? to : undefined\n  if (asyncTo) {\n    props.to = undefined\n    props.onRest = undefined\n    if (defaults) {\n      defaults.onRest = undefined\n    }\n  }\n  // For certain events, use batching to prevent multiple calls per frame.\n  // However, batching is avoided when the `to` prop is async, because any\n  // event props are used as default props instead.\n  else {\n    each(BATCHED_EVENTS, key => {\n      const handler: any = props[key]\n      if (is.fun(handler)) {\n        const queue = ctrl['_events'][key]\n        props[key] = (({ finished, cancelled }: AnimationResult) => {\n          const result = queue.get(handler)\n          if (result) {\n            if (!finished) result.finished = false\n            if (cancelled) result.cancelled = true\n          } else {\n            // The \"value\" is set before the \"handler\" is called.\n            queue.set(handler, {\n              value: null,\n              finished: finished || false,\n              cancelled: cancelled || false,\n            })\n          }\n        }) as any\n\n        // Avoid using a batched `handler` as a default prop.\n        if (defaults) {\n          defaults[key] = props[key] as any\n        }\n      }\n    })\n  }\n\n  const state = ctrl['_state']\n\n  // Pause/resume the `asyncTo` when `props.pause` is true/false.\n  if (props.pause === !state.paused) {\n    state.paused = props.pause\n    flushCalls(props.pause ? state.pauseQueue : state.resumeQueue)\n  }\n  // When a controller is paused, its values are also paused.\n  else if (state.paused) {\n    props.pause = true\n  }\n\n  const promises: AsyncResult[] = (keys || Object.keys(ctrl.springs)).map(key =>\n    ctrl.springs[key]!.start(props as any)\n  )\n\n  const cancel =\n    props.cancel === true || getDefaultProp(props, 'cancel') === true\n\n  if (asyncTo || (cancel && state.asyncId)) {\n    promises.push(\n      scheduleProps(++ctrl['_lastAsyncId'], {\n        props,\n        state,\n        actions: {\n          pause: noop,\n          resume: noop,\n          start(props, resolve) {\n            if (cancel) {\n              stopAsync(state, ctrl['_lastAsyncId'])\n              resolve(getCancelledResult(ctrl))\n            } else {\n              props.onRest = onRest\n              resolve(runAsync(asyncTo!, props, state, ctrl))\n            }\n          },\n        },\n      })\n    )\n  }\n\n  // Pause after updating each spring, so they can be resumed separately\n  // and so their default `pause` and `cancel` props are updated.\n  if (state.paused) {\n    // Ensure `this` must be resumed before the returned promise\n    // is resolved and before starting the next `loop` repetition.\n    await new Promise<void>(resume => {\n      state.resumeQueue.add(resume)\n    })\n  }\n\n  const result = getCombinedResult<any>(ctrl, await Promise.all(promises))\n  if (loop && result.finished && !(isLoop && result.noop)) {\n    const nextProps = createLoopUpdate(props, loop, to)\n    if (nextProps) {\n      prepareKeys(ctrl, [nextProps])\n      return flushUpdate(ctrl, nextProps, true)\n    }\n  }\n  if (onResolve) {\n    raf.batchedUpdates(() => onResolve(result, ctrl, ctrl.item))\n  }\n  return result\n}\n\n/**\n * From an array of updates, get the map of `SpringValue` objects\n * by their keys. Springs are created when any update wants to\n * animate a new key.\n *\n * Springs created by `getSprings` are neither cached nor observed\n * until they're given to `setSprings`.\n */\nexport function getSprings<State extends Lookup>(\n  ctrl: Controller<State>,\n  props?: OneOrMore<ControllerUpdate<State>>\n) {\n  const springs = { ...ctrl.springs }\n  if (props) {\n    each(toArray(props), (props: any) => {\n      if (is.und(props.keys)) {\n        props = createUpdate(props)\n      }\n      if (!is.obj(props.to)) {\n        // Avoid passing array/function to each spring.\n        props = { ...props, to: undefined }\n      }\n      prepareSprings(springs as any, props, key => {\n        return createSpring(key)\n      })\n    })\n  }\n  return springs\n}\n\n/**\n * Tell a controller to manage the given `SpringValue` objects\n * whose key is not already in use.\n */\nexport function setSprings(\n  ctrl: Controller,\n  springs: SpringValues<UnknownProps>\n) {\n  eachProp(springs, (spring, key) => {\n    if (!ctrl.springs[key]) {\n      ctrl.springs[key] = spring\n      addFluidObserver(spring, ctrl)\n    }\n  })\n}\n\nfunction createSpring(key: string, observer?: FluidObserver<FrameValue.Event>) {\n  const spring = new SpringValue()\n  spring.key = key\n  if (observer) {\n    addFluidObserver(spring, observer)\n  }\n  return spring\n}\n\n/**\n * Ensure spring objects exist for each defined key.\n *\n * Using the `props`, the `Animated` node of each `SpringValue` may\n * be created or updated.\n */\nfunction prepareSprings(\n  springs: SpringValues,\n  props: ControllerQueue[number],\n  create: (key: string) => SpringValue\n) {\n  if (props.keys) {\n    each(props.keys, key => {\n      const spring = springs[key] || (springs[key] = create(key))\n      spring['_prepareNode'](props)\n    })\n  }\n}\n\n/**\n * Ensure spring objects exist for each defined key, and attach the\n * `ctrl` to them for observation.\n *\n * The queue is expected to contain `createUpdate` results.\n */\nfunction prepareKeys(ctrl: Controller<any>, queue: ControllerQueue[number][]) {\n  each(queue, props => {\n    prepareSprings(ctrl.springs, props, key => {\n      return createSpring(key, ctrl)\n    })\n  })\n}\n","import * as React from 'react'\nimport { useContext, PropsWithChildren } from 'react'\nimport { useMemoOne } from '@react-spring/shared'\n\n/**\n * This context affects all new and existing `SpringValue` objects\n * created with the hook API or the renderprops API.\n */\nexport interface SpringContext {\n  /** Pause all new and existing animations. */\n  pause?: boolean\n  /** Force all new and existing animations to be immediate. */\n  immediate?: boolean\n}\n\nexport const SpringContext = ({\n  children,\n  ...props\n}: PropsWithChildren<SpringContext>) => {\n  const inherited = useContext(ctx)\n\n  // Inherited values are dominant when truthy.\n  const pause = props.pause || !!inherited.pause,\n    immediate = props.immediate || !!inherited.immediate\n\n  // Memoize the context to avoid unwanted renders.\n  props = useMemoOne(() => ({ pause, immediate }), [pause, immediate])\n\n  const { Provider } = ctx\n  return <Provider value={props}>{children}</Provider>\n}\n\nconst ctx = makeContext(SpringContext, {} as SpringContext)\n\n// Allow `useContext(SpringContext)` in TypeScript.\nSpringContext.Provider = ctx.Provider\nSpringContext.Consumer = ctx.Consumer\n\n/** Make the `target` compatible with `useContext` */\nfunction makeContext<T>(target: any, init: T): React.Context<T> {\n  Object.assign(target, React.createContext(init))\n  target.Provider._context = target\n  target.Consumer._context = target\n  return target\n}\n","import { each, is, deprecateDirectCall } from '@react-spring/shared'\nimport { Lookup, Falsy, OneOrMore } from '@react-spring/types'\nimport { AsyncResult, ControllerUpdate } from './types'\nimport { Controller } from './Controller'\n\ninterface ControllerUpdateFn<State extends Lookup = Lookup> {\n  (i: number, ctrl: Controller<State>): ControllerUpdate<State> | Falsy\n}\n\n/**\n * Extending from function allows SpringRef instances to be callable.\n * https://hackernoon.com/creating-callable-objects-in-javascript-d21l3te1\n *\n * ```js\n * const [springs, api] = useSpring(() => ({x: 0}))\n * api.start({x: 3}) // this works\n * api({x: 3}) // this also works (non breaking from 9rc3)\n * ```\n */\nexport class SpringRef<State extends Lookup = Lookup> extends Function {\n  readonly current: Controller<State>[] = []\n\n  constructor() {\n    super('return arguments.callee._call.apply(arguments.callee, arguments)')\n  }\n\n  /** @deprecated use the property 'start' instead */\n  _call(props?: ControllerUpdate<State> | ControllerUpdateFn<State>) {\n    deprecateDirectCall()\n    this.start(props)\n  }\n\n  /** Update the state of each controller without animating. */\n  set(values: Partial<State>) {\n    each(this.current, ctrl => ctrl.set(values))\n  }\n\n  /** Start the queued animations of each controller. */\n  start(): AsyncResult<Controller<State>>[]\n  /** Update every controller with the same props. */\n  start(props: ControllerUpdate<State>): AsyncResult<Controller<State>>[]\n  /** Update controllers based on their state. */\n  start(props: ControllerUpdateFn<State>): AsyncResult<Controller<State>>[]\n  /** Start animating each controller. */\n  start(\n    props?: ControllerUpdate<State> | ControllerUpdateFn<State>\n  ): AsyncResult<Controller<State>>[]\n  /** @internal */\n  start(props?: object | ControllerUpdateFn<State>) {\n    const results: AsyncResult[] = []\n\n    each(this.current, (ctrl, i) => {\n      if (is.und(props)) {\n        results.push(ctrl.start())\n      } else {\n        const update = this._getProps(props, ctrl, i)\n        if (update) {\n          results.push(ctrl.start(update))\n        }\n      }\n    })\n\n    return results\n  }\n\n  /** Add the same props to each controller's update queue. */\n  update(props: ControllerUpdate<State>): this\n  /** Generate separate props for each controller's update queue. */\n  update(props: ControllerUpdateFn<State>): this\n  /** Add props to each controller's update queue. */\n  update(props: ControllerUpdate<State> | ControllerUpdateFn<State>): this\n  /** @internal */\n  update(props: object | ControllerUpdateFn<State>) {\n    each(this.current, (ctrl, i) => ctrl.update(this._getProps(props, ctrl, i)))\n    return this\n  }\n\n  /** Add a controller to this ref */\n  add(ctrl: Controller<State>) {\n    if (!this.current.includes(ctrl)) {\n      this.current.push(ctrl)\n    }\n  }\n\n  /** Remove a controller from this ref */\n  delete(ctrl: Controller<State>) {\n    const i = this.current.indexOf(ctrl)\n    if (~i) this.current.splice(i, 1)\n  }\n\n  /** Overridden by `useTrail` to manipulate props */\n  protected _getProps(\n    arg: ControllerUpdate<State> | ControllerUpdateFn<State>,\n    ctrl: Controller<State>,\n    index: number\n  ): ControllerUpdate<State> | Falsy {\n    return is.fun(arg) ? arg(index, ctrl) : arg\n  }\n}\n\nexport interface SpringRef<State extends Lookup> {\n  (props?: ControllerUpdate<State> | ControllerUpdateFn<State>): AsyncResult<\n    Controller<State>\n  >[]\n  /** Stop all animations. */\n  stop(): this\n  /** Stop animations for the given keys. */\n  stop(keys: OneOrMore<string>): this\n  /** Cancel all animations. */\n  stop(cancel: boolean): this\n  /** Cancel animations for the given keys. */\n  stop(cancel: boolean, keys: OneOrMore<string>): this\n  /** Stop some or all animations. */\n  stop(keys?: OneOrMore<string>): this\n  /** Cancel some or all animations. */\n  stop(cancel: boolean, keys?: OneOrMore<string>): this\n\n  /** Pause all animations. */\n  pause(): this\n  /** Pause animations for the given keys. */\n  pause(keys: OneOrMore<string>): this\n  /** Pause some or all animations. */\n  pause(keys?: OneOrMore<string>): this\n\n  /** Resume all animations. */\n  resume(): this\n  /** Resume animations for the given keys. */\n  resume(keys: OneOrMore<string>): this\n  /** Resume some or all animations. */\n  resume(keys?: OneOrMore<string>): this\n}\n\neach(['stop', 'pause', 'resume'] as const, key => {\n  SpringRef.prototype[key] = function (this: SpringRef) {\n    each(this.current, ctrl => ctrl[key](...arguments))\n    return this\n  } as any\n})\n","import { useContext, useMemo, useRef } from 'react'\nimport { Lookup } from '@react-spring/types'\nimport {\n  is,\n  each,\n  usePrev,\n  useOnce,\n  useForceUpdate,\n  useLayoutEffect,\n} from '@react-spring/shared'\n\nimport {\n  ControllerFlushFn,\n  ControllerUpdate,\n  PickAnimated,\n  SpringValues,\n} from '../types'\nimport { UseSpringProps } from './useSpring'\nimport { declareUpdate } from '../SpringValue'\nimport {\n  Controller,\n  getSprings,\n  flushUpdateQueue,\n  setSprings,\n} from '../Controller'\nimport { hasProps, detachRefs, replaceRef } from '../helpers'\nimport { SpringContext } from '../SpringContext'\nimport { SpringRef } from '../SpringRef'\n\nexport type UseSpringsProps<State extends Lookup = Lookup> = unknown &\n  ControllerUpdate<State> & {\n    ref?: SpringRef<State>\n  }\n\n/**\n * When the `deps` argument exists, the `props` function is called whenever\n * the `deps` change on re-render.\n *\n * Without the `deps` argument, the `props` function is only called once.\n */\nexport function useSprings<Props extends UseSpringProps>(\n  length: number,\n  props: (i: number, ctrl: Controller) => Props,\n  deps?: readonly any[]\n): PickAnimated<Props> extends infer State\n  ? [SpringValues<State>[], SpringRef<State>]\n  : never\n\n/**\n * Animations are updated on re-render.\n */\nexport function useSprings<Props extends UseSpringsProps>(\n  length: number,\n  props: Props[] & UseSpringsProps<PickAnimated<Props>>[]\n): SpringValues<PickAnimated<Props>>[]\n\n/**\n * When the `deps` argument exists, you get the `update` and `stop` function.\n */\nexport function useSprings<Props extends UseSpringsProps>(\n  length: number,\n  props: Props[] & UseSpringsProps<PickAnimated<Props>>[],\n  deps: readonly any[] | undefined\n): PickAnimated<Props> extends infer State\n  ? [SpringValues<State>[], SpringRef<State>]\n  : never\n\n/** @internal */\nexport function useSprings(\n  length: number,\n  props: any[] | ((i: number, ctrl: Controller) => any),\n  deps?: readonly any[]\n): any {\n  const propsFn = is.fun(props) && props\n  if (propsFn && !deps) deps = []\n\n  // Create a local ref if a props function or deps array is ever passed.\n  const ref = useMemo(\n    () => (propsFn || arguments.length == 3 ? new SpringRef() : void 0),\n    []\n  )\n\n  interface State {\n    // The controllers used for applying updates.\n    ctrls: Controller[]\n    // The queue of changes to make on commit.\n    queue: Array<() => void>\n    // The flush function used by controllers.\n    flush: ControllerFlushFn\n  }\n\n  // Set to 0 to prevent sync flush.\n  const layoutId = useRef(0)\n  const forceUpdate = useForceUpdate()\n\n  // State is updated on commit.\n  const state = useMemo(\n    (): State => ({\n      ctrls: [],\n      queue: [],\n      flush(ctrl, updates) {\n        const springs = getSprings(ctrl, updates)\n\n        // Flushing is postponed until the component's commit phase\n        // if a spring was created since the last commit.\n        const canFlushSync =\n          layoutId.current > 0 &&\n          !state.queue.length &&\n          !Object.keys(springs).some(key => !ctrl.springs[key])\n\n        return canFlushSync\n          ? flushUpdateQueue(ctrl, updates)\n          : new Promise<any>(resolve => {\n              setSprings(ctrl, springs)\n              state.queue.push(() => {\n                resolve(flushUpdateQueue(ctrl, updates))\n              })\n              forceUpdate()\n            })\n      },\n    }),\n    []\n  )\n\n  const ctrls = [...state.ctrls]\n  const updates: any[] = []\n\n  // Cache old controllers to dispose in the commit phase.\n  const prevLength = usePrev(length) || 0\n  const oldCtrls = ctrls.slice(length, prevLength)\n\n  // Create new controllers when \"length\" increases, and destroy\n  // the affected controllers when \"length\" decreases.\n  useMemo(() => {\n    ctrls.length = length\n    declareUpdates(prevLength, length)\n  }, [length])\n\n  // Update existing controllers when \"deps\" are changed.\n  useMemo(() => {\n    declareUpdates(0, Math.min(prevLength, length))\n  }, deps)\n\n  /** Fill the `updates` array with declarative updates for the given index range. */\n  function declareUpdates(startIndex: number, endIndex: number) {\n    for (let i = startIndex; i < endIndex; i++) {\n      const ctrl = ctrls[i] || (ctrls[i] = new Controller(null, state.flush))\n\n      const update: UseSpringProps<any> = propsFn\n        ? propsFn(i, ctrl)\n        : (props as any)[i]\n\n      if (update) {\n        updates[i] = declareUpdate(update)\n      }\n    }\n  }\n\n  // New springs are created during render so users can pass them to\n  // their animated components, but new springs aren't cached until the\n  // commit phase (see the `useLayoutEffect` callback below).\n  const springs = ctrls.map((ctrl, i) => getSprings(ctrl, updates[i]))\n\n  const context = useContext(SpringContext)\n  const prevContext = usePrev(context)\n  const hasContext = context !== prevContext && hasProps(context)\n\n  useLayoutEffect(() => {\n    layoutId.current++\n\n    // Replace the cached controllers.\n    state.ctrls = ctrls\n\n    // Flush the commit queue.\n    const { queue } = state\n    if (queue.length) {\n      state.queue = []\n      each(queue, cb => cb())\n    }\n\n    // Clean up any unused controllers.\n    each(oldCtrls, ctrl => {\n      detachRefs(ctrl, ref)\n      ctrl.stop(true)\n    })\n\n    // Update existing controllers.\n    each(ctrls, (ctrl, i) => {\n      const values = springs[i]\n      setSprings(ctrl, values)\n\n      // Attach the controller to the local ref.\n      ref?.add(ctrl)\n\n      // Update the default props.\n      if (hasContext) {\n        ctrl.start({ default: context })\n      }\n\n      // Apply updates created during render.\n      const update = updates[i]\n      if (update) {\n        // Update the injected ref if needed.\n        replaceRef(ctrl, update.ref)\n\n        // When an injected ref exists, the update is postponed\n        // until the ref has its `start` method called.\n        if (ctrl.ref) {\n          ctrl.queue.push(update)\n        } else {\n          ctrl.start(update)\n        }\n      }\n    })\n  })\n\n  // Cancel the animations of all controllers on unmount.\n  useOnce(() => () => {\n    each(state.ctrls, ctrl => ctrl.stop(true))\n  })\n\n  // Return a deep copy of the `springs` array so the caller can\n  // safely mutate it during render.\n  const values = springs.map(x => ({ ...x }))\n\n  return ref ? [values, ref] : values\n}\n","import { Remap } from '@react-spring/types'\nimport { is } from '@react-spring/shared'\n\nimport { ControllerUpdate, PickAnimated, SpringValues } from '../types'\nimport { Valid } from '../types/common'\nimport { SpringRef } from '../SpringRef'\nimport { useSprings } from './useSprings'\n\n/**\n * The props that `useSpring` recognizes.\n */\nexport type UseSpringProps<Props extends object = any> = unknown &\n  PickAnimated<Props> extends infer State\n  ? Remap<\n      ControllerUpdate<State> & {\n        /**\n         * Used to access the imperative API.\n         *\n         * When defined, the render animation won't auto-start.\n         */\n        ref?: SpringRef<State>\n      }\n    >\n  : never\n\n/**\n * The `props` function is only called on the first render, unless\n * `deps` change (when defined). State is inferred from forward props.\n */\nexport function useSpring<Props extends object>(\n  props:\n    | Function\n    | (() => (Props & Valid<Props, UseSpringProps<Props>>) | UseSpringProps),\n  deps?: readonly any[] | undefined\n): PickAnimated<Props> extends infer State\n  ? [SpringValues<State>, SpringRef<State>]\n  : never\n\n/**\n * Updated on every render, with state inferred from forward props.\n */\nexport function useSpring<Props extends object>(\n  props: (Props & Valid<Props, UseSpringProps<Props>>) | UseSpringProps\n): SpringValues<PickAnimated<Props>>\n\n/**\n * Updated only when `deps` change, with state inferred from forward props.\n */\nexport function useSpring<Props extends object>(\n  props: (Props & Valid<Props, UseSpringProps<Props>>) | UseSpringProps,\n  deps: readonly any[] | undefined\n): PickAnimated<Props> extends infer State\n  ? [SpringValues<State>, SpringRef<State>]\n  : never\n\n/** @internal */\nexport function useSpring(props: any, deps?: readonly any[]) {\n  const isFn = is.fun(props)\n  const [[values], ref] = useSprings(\n    1,\n    isFn ? props : [props],\n    isFn ? deps || [] : deps\n  )\n  return isFn || arguments.length == 2 ? [values, ref] : values\n}\n","import { useState } from 'react'\nimport { Lookup } from '@react-spring/types'\nimport { SpringRef } from '../SpringRef'\n\nconst initSpringRef = () => new SpringRef<any>()\n\nexport const useSpringRef = <State extends Lookup = Lookup>() =>\n  useState(initSpringRef)[0] as SpringRef<State>\n","import { each, is, useLayoutEffect } from '@react-spring/shared'\n\nimport { Valid } from '../types/common'\nimport { PickAnimated, SpringValues } from '../types'\nimport { UseSpringProps } from './useSpring'\nimport { SpringRef } from '../SpringRef'\nimport { Controller } from '../Controller'\nimport { useSprings } from './useSprings'\n\nexport type UseTrailProps<Props extends object = any> = UseSpringProps<Props>\n\nexport function useTrail<Props extends object>(\n  length: number,\n  props: (\n    i: number,\n    ctrl: Controller\n  ) => UseTrailProps | (Props & Valid<Props, UseTrailProps<Props>>),\n  deps?: readonly any[]\n): PickAnimated<Props> extends infer State\n  ? [SpringValues<State>[], SpringRef<State>]\n  : never\n\nexport function useTrail<Props extends object>(\n  length: number,\n  props: UseTrailProps | (Props & Valid<Props, UseTrailProps<Props>>)\n): SpringValues<PickAnimated<Props>>[]\n\nexport function useTrail<Props extends object>(\n  length: number,\n  props: UseTrailProps | (Props & Valid<Props, UseTrailProps<Props>>),\n  deps: readonly any[]\n): PickAnimated<Props> extends infer State\n  ? [SpringValues<State>[], SpringRef<State>]\n  : never\n\nexport function useTrail(\n  length: number,\n  propsArg: unknown,\n  deps?: readonly any[]\n) {\n  const propsFn = is.fun(propsArg) && propsArg\n  if (propsFn && !deps) deps = []\n\n  // The trail is reversed when every render-based update is reversed.\n  let reverse = true\n\n  const result = useSprings(\n    length,\n    (i, ctrl) => {\n      const props = propsFn ? propsFn(i, ctrl) : propsArg\n      reverse = reverse && props.reverse\n      return props\n    },\n    // Ensure the props function is called when no deps exist.\n    // This works around the 3 argument rule.\n    deps || [{}]\n  )\n\n  const ref = result[1]\n\n  useLayoutEffect(() => {\n    each(ref.current, (ctrl, i) => {\n      const parent = ref.current[i + (reverse ? 1 : -1)]\n      if (parent) ctrl.start({ to: parent.springs })\n    })\n  }, deps)\n\n  if (propsFn || arguments.length == 3) {\n    ref['_getProps'] = (propsArg, ctrl, i) => {\n      const props = is.fun(propsArg) ? propsArg(i, ctrl) : propsArg\n      if (props) {\n        const parent = ref.current[i + (props.reverse ? 1 : -1)]\n        if (parent) props.to = parent.springs\n        return props\n      }\n    }\n    return result\n  }\n  return result[0]\n}\n","// TODO: convert to \"const enum\" once Babel supports it\nexport type TransitionPhase =\n  | typeof MOUNT\n  | typeof ENTER\n  | typeof UPDATE\n  | typeof LEAVE\n\n/** This transition is being mounted */\nexport const MOUNT = 'mount'\n\n/** This transition is entering or has entered */\nexport const ENTER = 'enter'\n\n/** This transition had its animations updated */\nexport const UPDATE = 'update'\n\n/** This transition will expire after animating */\nexport const LEAVE = 'leave'\n","import * as React from 'react'\nimport { useContext, useRef, useMemo } from 'react'\nimport { OneOrMore, UnknownProps } from '@react-spring/types'\nimport {\n  is,\n  toArray,\n  useForceUpdate,\n  useOnce,\n  usePrev,\n  each,\n  useLayoutEffect,\n} from '@react-spring/shared'\n\nimport {\n  Change,\n  ControllerUpdate,\n  ItemKeys,\n  PickAnimated,\n  TransitionFn,\n  TransitionState,\n  TransitionTo,\n  UseTransitionProps,\n} from '../types'\nimport { Valid } from '../types/common'\nimport {\n  callProp,\n  detachRefs,\n  getDefaultProps,\n  hasProps,\n  inferTo,\n  replaceRef,\n} from '../helpers'\nimport { Controller, getSprings, setSprings } from '../Controller'\nimport { SpringContext } from '../SpringContext'\nimport { SpringRef } from '../SpringRef'\nimport {\n  ENTER,\n  MOUNT,\n  LEAVE,\n  UPDATE,\n  TransitionPhase,\n} from '../TransitionPhase'\n\ndeclare function setTimeout(handler: Function, timeout?: number): number\ndeclare function clearTimeout(timeoutId: number): void\n\nexport function useTransition<Item, Props extends object>(\n  data: OneOrMore<Item>,\n  props:\n    | UseTransitionProps<Item>\n    | (Props & Valid<Props, UseTransitionProps<Item>>)\n): TransitionFn<Item, PickAnimated<Props>>\n\nexport function useTransition<Item, Props extends object>(\n  data: OneOrMore<Item>,\n  props:\n    | UseTransitionProps<Item>\n    | (Props & Valid<Props, UseTransitionProps<Item>>),\n  deps: any[] | undefined\n): PickAnimated<Props> extends infer State\n  ? [TransitionFn<Item, State>, SpringRef<State>]\n  : never\n\nexport function useTransition(\n  data: unknown,\n  props: UseTransitionProps,\n  deps?: any[]\n): any {\n  const { reset, sort, trail = 0, expires = true, onDestroyed } = props\n\n  // Return a `SpringRef` if a deps array was passed.\n  const ref = useMemo(\n    () => (arguments.length == 3 ? new SpringRef() : void 0),\n    []\n  )\n\n  // Every item has its own transition.\n  const items = toArray(data)\n  const transitions: TransitionState[] = []\n\n  // The \"onRest\" callbacks need a ref to the latest transitions.\n  const usedTransitions = useRef<TransitionState[] | null>(null)\n  const prevTransitions = reset ? null : usedTransitions.current\n  useLayoutEffect(() => {\n    usedTransitions.current = transitions\n  })\n\n  // Destroy all transitions on dismount.\n  useOnce(() => () =>\n    each(usedTransitions.current!, t => {\n      if (t.expired) {\n        clearTimeout(t.expirationId!)\n      }\n      detachRefs(t.ctrl, ref)\n      t.ctrl.stop(true)\n    })\n  )\n\n  // Keys help with reusing transitions between renders.\n  // The `key` prop can be undefined (which means the items themselves are used\n  // as keys), or a function (which maps each item to its key), or an array of\n  // keys (which are assigned to each item by index).\n  const keys = getKeys(items, props, prevTransitions)\n\n  // Expired transitions that need clean up.\n  const expired = (reset && usedTransitions.current) || []\n  useLayoutEffect(() =>\n    each(expired, ({ ctrl, item, key }) => {\n      detachRefs(ctrl, ref)\n      callProp(onDestroyed, item, key)\n    })\n  )\n\n  // Map old indices to new indices.\n  const reused: number[] = []\n  if (prevTransitions)\n    each(prevTransitions, (t, i) => {\n      // Expired transitions are not rendered.\n      if (t.expired) {\n        clearTimeout(t.expirationId!)\n        expired.push(t)\n      } else {\n        i = reused[i] = keys.indexOf(t.key)\n        if (~i) transitions[i] = t\n      }\n    })\n\n  // Mount new items with fresh transitions.\n  each(items, (item, i) => {\n    if (!transitions[i]) {\n      transitions[i] = {\n        key: keys[i],\n        item,\n        phase: MOUNT,\n        ctrl: new Controller(),\n      }\n\n      transitions[i].ctrl.item = item\n    }\n  })\n\n  // Update the item of any transition whose key still exists,\n  // and ensure leaving transitions are rendered until they finish.\n  if (reused.length) {\n    let i = -1\n    each(reused, (keyIndex, prevIndex) => {\n      const t = prevTransitions![prevIndex]\n      if (~keyIndex) {\n        i = transitions.indexOf(t)\n        transitions[i] = { ...t, item: items[keyIndex] }\n      } else if (props.leave) {\n        transitions.splice(++i, 0, t)\n      }\n    })\n  }\n\n  if (is.fun(sort)) {\n    transitions.sort((a, b) => sort(a.item, b.item))\n  }\n\n  // Track cumulative delay for the \"trail\" prop.\n  let delay = -trail\n\n  // Expired transitions use this to dismount.\n  const forceUpdate = useForceUpdate()\n\n  // These props are inherited by every phase change.\n  const defaultProps = getDefaultProps<UseTransitionProps>(props)\n  // Generate changes to apply in useEffect.\n  const changes = new Map<TransitionState, Change>()\n  each(transitions, (t, i) => {\n    const key = t.key\n    const prevPhase = t.phase\n\n    let to: TransitionTo<any>\n    let phase: TransitionPhase\n    if (prevPhase == MOUNT) {\n      to = props.enter\n      phase = ENTER\n    } else {\n      const isLeave = keys.indexOf(key) < 0\n      if (prevPhase != LEAVE) {\n        if (isLeave) {\n          to = props.leave\n          phase = LEAVE\n        } else if ((to = props.update)) {\n          phase = UPDATE\n        } else return\n      } else if (!isLeave) {\n        to = props.enter\n        phase = ENTER\n      } else return\n    }\n\n    // When \"to\" is a function, it can return (1) an array of \"useSpring\" props,\n    // (2) an async function, or (3) an object with any \"useSpring\" props.\n    to = callProp(to, t.item, i)\n    to = is.obj(to) ? inferTo(to) : { to }\n\n    if (!to.config) {\n      const config = props.config || defaultProps.config\n      to.config = callProp(config, t.item, i, phase)\n    }\n\n    // The payload is used to update the spring props once the current render is committed.\n    const payload: ControllerUpdate<UnknownProps> = {\n      ...defaultProps,\n      delay: (delay += trail),\n      // This prevents implied resets.\n      reset: false,\n      // Merge any phase-specific props.\n      ...(to as any),\n    }\n\n    if (phase == ENTER && is.und(payload.from)) {\n      // The `initial` prop is used on the first render of our parent component,\n      // as well as when `reset: true` is passed. It overrides the `from` prop\n      // when defined, and it makes `enter` instant when null.\n      const from =\n        is.und(props.initial) || prevTransitions ? props.from : props.initial\n\n      payload.from = callProp(from, t.item, i)\n    }\n\n    const { onResolve } = payload\n    payload.onResolve = result => {\n      callProp(onResolve, result)\n\n      const transitions = usedTransitions.current!\n      const t = transitions.find(t => t.key === key)\n      if (!t) return\n\n      if (result.cancelled && t.phase != UPDATE) {\n        /**\n         * @legacy Reset the phase of a cancelled enter/leave transition, so it can\n         * retry the animation on the next render.\n         *\n         * Note: leaving this here made the transitioned item respawn.\n         */\n        // t.phase = prevPhase\n        return\n      }\n\n      if (t.ctrl.idle) {\n        const idle = transitions.every(t => t.ctrl.idle)\n        if (t.phase == LEAVE) {\n          const expiry = callProp(expires, t.item)\n          if (expiry !== false) {\n            const expiryMs = expiry === true ? 0 : expiry\n            t.expired = true\n\n            // Force update once the expiration delay ends.\n            if (!idle && expiryMs > 0) {\n              // The maximum timeout is 2^31-1\n              if (expiryMs <= 0x7fffffff)\n                t.expirationId = setTimeout(forceUpdate, expiryMs)\n              return\n            }\n          }\n        }\n        // Force update once idle and expired items exist.\n        if (idle && transitions.some(t => t.expired)) {\n          forceUpdate()\n        }\n      }\n    }\n\n    const springs = getSprings(t.ctrl, payload)\n    changes.set(t, { phase, springs, payload })\n  })\n\n  // The prop overrides from an ancestor.\n  const context = useContext(SpringContext)\n  const prevContext = usePrev(context)\n  const hasContext = context !== prevContext && hasProps(context)\n\n  // Merge the context into each transition.\n  useLayoutEffect(() => {\n    if (hasContext)\n      each(transitions, t => {\n        t.ctrl.start({ default: context })\n      })\n  }, [context])\n\n  useLayoutEffect(\n    () => {\n      each(changes, ({ phase, springs, payload }, t) => {\n        const { ctrl } = t\n        t.phase = phase\n\n        // Attach the controller to our local ref.\n        ref?.add(ctrl)\n\n        // Update the injected ref if needed.\n        replaceRef(ctrl, payload.ref)\n\n        // Save any springs created this render.\n        setSprings(ctrl, springs)\n\n        // Merge the context into new items.\n        if (hasContext && phase == ENTER) {\n          ctrl.start({ default: context })\n        }\n\n        // Postpone the update if an injected ref exists.\n        ctrl[ctrl.ref ? 'update' : 'start'](payload)\n      })\n    },\n    reset ? void 0 : deps\n  )\n\n  const renderTransitions: TransitionFn = render => (\n    <>\n      {transitions.map((t, i) => {\n        const { springs } = changes.get(t) || t.ctrl\n        const elem: any = render({ ...springs }, t.item, t, i)\n        return elem && elem.type ? (\n          <elem.type\n            {...elem.props}\n            key={is.str(t.key) || is.num(t.key) ? t.key : t.ctrl.id}\n            ref={elem.ref}\n          />\n        ) : (\n          elem\n        )\n      })}\n    </>\n  )\n\n  return ref ? [renderTransitions, ref] : renderTransitions\n}\n\n/** Local state for auto-generated item keys */\nlet nextKey = 1\n\nfunction getKeys(\n  items: readonly any[],\n  { key, keys = key }: { key?: ItemKeys; keys?: ItemKeys },\n  prevTransitions: TransitionState[] | null\n): readonly any[] {\n  if (keys === null) {\n    const reused = new Set()\n    return items.map(item => {\n      const t =\n        prevTransitions &&\n        prevTransitions.find(\n          t => t.item === item && t.phase !== LEAVE && !reused.has(t)\n        )\n      if (t) {\n        reused.add(t)\n        return t.key\n      }\n      return nextKey++\n    })\n  }\n  return is.und(keys) ? items : is.fun(keys) ? items.map(keys) : toArray(keys)\n}\n","import { NoInfer, UnknownProps } from '@react-spring/types'\nimport { useSpring, UseSpringProps } from '../hooks/useSpring'\nimport { SpringValues, SpringToFn, SpringChain } from '../types'\n\nexport type SpringComponentProps<\n  State extends object = UnknownProps\n> = unknown &\n  UseSpringProps<State> & {\n    children: (values: SpringValues<State>) => JSX.Element | null\n  }\n\n// Infer state from \"from\" object prop.\nexport function Spring<State extends object>(\n  props: {\n    from: State\n    to?: SpringChain<NoInfer<State>> | SpringToFn<NoInfer<State>>\n  } & Omit<SpringComponentProps<NoInfer<State>>, 'from' | 'to'>\n): JSX.Element | null\n\n// Infer state from \"to\" object prop.\nexport function Spring<State extends object>(\n  props: { to: State } & Omit<SpringComponentProps<NoInfer<State>>, 'to'>\n): JSX.Element | null\n\nexport function Spring({ children, ...props }: any) {\n  return children(useSpring(props))\n}\n","import { ReactNode } from 'react'\nimport { NoInfer, Falsy } from '@react-spring/types'\nimport { is } from '@react-spring/shared'\n\nimport { Valid } from '../types/common'\nimport { PickAnimated, SpringValues } from '../types'\nimport { UseSpringProps } from '../hooks/useSpring'\nimport { useTrail } from '../hooks/useTrail'\n\nexport type TrailComponentProps<Item, Props extends object = any> = unknown &\n  UseSpringProps<Props> & {\n    items: readonly Item[]\n    children: (\n      item: NoInfer<Item>,\n      index: number\n    ) => ((values: SpringValues<PickAnimated<Props>>) => ReactNode) | Falsy\n  }\n\nexport function Trail<Item, Props extends TrailComponentProps<Item>>({\n  items,\n  children,\n  ...props\n}: Props & Valid<Props, TrailComponentProps<Item, Props>>) {\n  const trails: any[] = useTrail(items.length, props)\n  return items.map((item, index) => {\n    const result = children(item, index)\n    return is.fun(result) ? result(trails[index]) : result\n  })\n}\n","import { Valid } from '../types/common'\nimport { TransitionComponentProps } from '../types'\nimport { useTransition } from '../hooks'\n\nexport function Transition<\n  Item extends any,\n  Props extends TransitionComponentProps<Item>\n>(\n  props:\n    | TransitionComponentProps<Item>\n    | (Props & Valid<Props, TransitionComponentProps<Item, Props>>)\n): JSX.Element\n\nexport function Transition({\n  items,\n  children,\n  ...props\n}: TransitionComponentProps<any>) {\n  return useTransition(items, props)(children)\n}\n","import { Arrify, InterpolatorArgs, InterpolatorFn } from '@react-spring/types'\nimport {\n  is,\n  raf,\n  each,\n  isEqual,\n  toArray,\n  frameLoop,\n  FluidValue,\n  getFluidValue,\n  createInterpolator,\n  Globals as G,\n  callFluidObservers,\n  addFluidObserver,\n  removeFluidObserver,\n  hasFluidValue,\n} from '@react-spring/shared'\n\nimport { FrameValue, isFrameValue } from './FrameValue'\nimport {\n  getAnimated,\n  setAnimated,\n  getAnimatedType,\n  getPayload,\n} from '@react-spring/animated'\n\n/**\n * An `Interpolation` is a memoized value that's computed whenever one of its\n * `FluidValue` dependencies has its value changed.\n *\n * Other `FrameValue` objects can depend on this. For example, passing an\n * `Interpolation` as the `to` prop of a `useSpring` call will trigger an\n * animation toward the memoized value.\n */\nexport class Interpolation<In = any, Out = any> extends FrameValue<Out> {\n  /** Useful for debugging. */\n  key?: string\n\n  /** Equals false when in the frameloop */\n  idle = true\n\n  /** The function that maps inputs values to output */\n  readonly calc: InterpolatorFn<In, Out>\n\n  /** The inputs which are currently animating */\n  protected _active = new Set<FluidValue>()\n\n  constructor(\n    /** The source of input values */\n    readonly source: unknown,\n    args: InterpolatorArgs<In, Out>\n  ) {\n    super()\n    this.calc = createInterpolator(...args)\n\n    const value = this._get()\n    const nodeType = getAnimatedType(value)\n\n    // Assume the computed value never changes type.\n    setAnimated(this, nodeType.create(value))\n  }\n\n  advance(_dt?: number) {\n    const value = this._get()\n    const oldValue = this.get()\n    if (!isEqual(value, oldValue)) {\n      getAnimated(this)!.setValue(value)\n      this._onChange(value, this.idle)\n    }\n    // Become idle when all parents are idle or paused.\n    if (!this.idle && checkIdle(this._active)) {\n      becomeIdle(this)\n    }\n  }\n\n  protected _get() {\n    const inputs: Arrify<In> = is.arr(this.source)\n      ? this.source.map(getFluidValue)\n      : (toArray(getFluidValue(this.source)) as any)\n\n    return this.calc(...inputs)\n  }\n\n  protected _start() {\n    if (this.idle && !checkIdle(this._active)) {\n      this.idle = false\n\n      each(getPayload(this)!, node => {\n        node.done = false\n      })\n\n      if (G.skipAnimation) {\n        raf.batchedUpdates(() => this.advance())\n        becomeIdle(this)\n      } else {\n        frameLoop.start(this)\n      }\n    }\n  }\n\n  // Observe our sources only when we're observed.\n  protected _attach() {\n    let priority = 1\n    each(toArray(this.source), source => {\n      if (hasFluidValue(source)) {\n        addFluidObserver(source, this)\n      }\n      if (isFrameValue(source)) {\n        if (!source.idle) {\n          this._active.add(source)\n        }\n        priority = Math.max(priority, source.priority + 1)\n      }\n    })\n    this.priority = priority\n    this._start()\n  }\n\n  // Stop observing our sources once we have no observers.\n  protected _detach() {\n    each(toArray(this.source), source => {\n      if (hasFluidValue(source)) {\n        removeFluidObserver(source, this)\n      }\n    })\n    this._active.clear()\n    becomeIdle(this)\n  }\n\n  /** @internal */\n  eventObserved(event: FrameValue.Event) {\n    // Update our value when an idle parent is changed,\n    // and enter the frameloop when a parent is resumed.\n    if (event.type == 'change') {\n      if (event.idle) {\n        this.advance()\n      } else {\n        this._active.add(event.parent)\n        this._start()\n      }\n    }\n    // Once all parents are idle, the `advance` method runs one more time,\n    // so we should avoid updating the `idle` status here.\n    else if (event.type == 'idle') {\n      this._active.delete(event.parent)\n    }\n    // Ensure our priority is greater than all parents, which means\n    // our value won't be updated until our parents have updated.\n    else if (event.type == 'priority') {\n      this.priority = toArray(this.source).reduce(\n        (highest: number, parent) =>\n          Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1),\n        0\n      )\n    }\n  }\n}\n\n/** Returns true for an idle source. */\nfunction isIdle(source: any) {\n  return source.idle !== false\n}\n\n/** Return true if all values in the given set are idle or paused. */\nfunction checkIdle(active: Set<FluidValue>) {\n  // Parents can be active even when paused, so the `.every` check\n  // removes us from the frameloop if all active parents are paused.\n  return !active.size || Array.from(active).every(isIdle)\n}\n\n/** Become idle if not already idle. */\nfunction becomeIdle(self: Interpolation) {\n  if (!self.idle) {\n    self.idle = true\n\n    each(getPayload(self)!, node => {\n      node.done = true\n    })\n\n    callFluidObservers(self, {\n      type: 'idle',\n      parent: self,\n    })\n  }\n}\n","import { FluidValue, deprecateInterpolate } from '@react-spring/shared'\nimport {\n  Constrain,\n  OneOrMore,\n  Animatable,\n  ExtrapolateType,\n  InterpolatorConfig,\n  InterpolatorFn,\n} from '@react-spring/types'\nimport { Interpolation } from './Interpolation'\n\n/** Map the value of one or more dependencies */\nexport const to: Interpolator = (source: any, ...args: [any]) =>\n  new Interpolation(source, args)\n\n/** @deprecated Use the `to` export instead */\nexport const interpolate: Interpolator = (source: any, ...args: [any]) => (\n  deprecateInterpolate(), new Interpolation(source, args)\n)\n\n/** Extract the raw value types that are being interpolated */\nexport type Interpolated<T extends ReadonlyArray<any>> = {\n  [P in keyof T]: T[P] extends infer Element\n    ? Element extends FluidValue<infer U>\n      ? U\n      : Element\n    : never\n}\n\n/**\n * This interpolates one or more `FluidValue` objects.\n * The exported `interpolate` function uses this type.\n */\nexport interface Interpolator {\n  // Tuple of parent values\n  <In extends ReadonlyArray<any>, Out>(\n    parents: In,\n    interpolator: (...args: Interpolated<In>) => Out\n  ): Interpolation<Out>\n\n  // Single parent value\n  <In, Out>(\n    parent: FluidValue<In> | In,\n    interpolator: InterpolatorFn<In, Out>\n  ): Interpolation<Out>\n\n  // Interpolation config\n  <Out>(\n    parents: OneOrMore<FluidValue>,\n    config: InterpolatorConfig<Out>\n  ): Interpolation<Animatable<Out>>\n\n  // Range shortcuts\n  <Out>(\n    parents: OneOrMore<FluidValue<number>> | FluidValue<number[]>,\n    range: readonly number[],\n    output: readonly Constrain<Out, Animatable>[],\n    extrapolate?: ExtrapolateType\n  ): Interpolation<Animatable<Out>>\n}\n","import {\n  Globals,\n  frameLoop,\n  createStringInterpolator,\n} from '@react-spring/shared'\nimport { Interpolation } from './Interpolation'\n\n// Sane defaults\nGlobals.assign({\n  createStringInterpolator,\n  to: (source, args) => new Interpolation(source, args),\n})\n\nexport { Globals }\n\n/** Advance all animations by the given time */\nexport const update = frameLoop.advance\n"]},"metadata":{},"sourceType":"module"}