{"ast":null,"code":"import axios from 'axios';\nimport { USER_SERVER } from '../components/ultils/mise';\nimport { SEARCH_RESULT, LOAD_MORE_TAG, LOAD_MORE_USER } from './types';\nexport function search(keyword, skip, limit, prevState = []) {\n  console.log(keyword, skip, limit, prevState);\n\n  if (keyword == \"\") {\n    return {\n      type: SEARCH_RESULT,\n      payload: {\n        users: [],\n        tags: []\n      }\n    };\n  } else {\n    console.log(prevState);\n    let data = {\n      keyword,\n      skip,\n      limit\n    };\n    const request = axios.post(`${USER_SERVER}/search`, data).then(response => {\n      let newUsers = [...prevState.users, ...response.data.users];\n      let newTags = [...prevState.tags, ...response.data.tags];\n      return {\n        users: newUsers,\n        tags: newTags,\n        userSize: response.data.users.length,\n        tagSize: response.data.tags.length\n      };\n    });\n    return {\n      type: SEARCH_RESULT,\n      payload: request\n    };\n  }\n}\nexport function searchmess(keyword, skip, limit, prevState = []) {\n  console.log(keyword, skip, limit, prevState);\n\n  if (keyword == \"\") {\n    return {\n      type: SEARCH_RESULT,\n      payload: {\n        users: [],\n        tags: []\n      }\n    };\n  } else {\n    console.log(prevState);\n    let data = {\n      keyword,\n      skip,\n      limit\n    };\n    const request = axios.post(`${USER_SERVER}/searchmess`, data).then(response => {\n      let newUsers = [...prevState.users, ...response.data.users];\n      let newGroups = [...prevState.groups, ...response.data.groups];\n      return {\n        users: newUsers,\n        groups: newGroups,\n        userSize: response.data.users.length,\n        tagSize: response.data.groups.length\n      };\n    });\n    return {\n      type: SEARCH_RESULT,\n      payload: request\n    };\n  }\n}\nexport function loadmoreUser(keyword, skip, limit, prevState = []) {\n  console.log(keyword, skip, limit, prevState);\n\n  if (keyword == \"\") {\n    return {\n      type: LOAD_MORE_USER,\n      payload: {\n        users: [],\n        userSize: 0,\n        tagSize: 0,\n        tags: []\n      }\n    };\n  } else {\n    console.log(prevState);\n    let data = {\n      keyword,\n      skip,\n      limit\n    };\n    const request = axios.post(`${USER_SERVER}/searchUser`, data).then(response => {\n      let newUsers = [...prevState.users, ...response.data.users];\n      return {\n        users: newUsers,\n        userSize: response.data.users.length\n      };\n    });\n    return {\n      type: LOAD_MORE_USER,\n      payload: request\n    };\n  }\n}\nexport function loadmoreTag(keyword, skip, limit, prevState = []) {\n  console.log(keyword, skip, limit, prevState);\n\n  if (keyword == \"\") {\n    return {\n      type: LOAD_MORE_TAG,\n      payload: {\n        users: [],\n        userSize: 0,\n        tagSize: 0,\n        tags: []\n      }\n    };\n  } else {\n    console.log(prevState);\n    let data = {\n      keyword,\n      skip,\n      limit\n    };\n    const request = axios.post(`${USER_SERVER}/searchTag`, data).then(response => {\n      console.log(response.data.tags);\n      let newTags = [...prevState.tags, ...response.data.tags];\n      return {\n        tags: newTags,\n        tagSize: response.data.tags.length\n      };\n    });\n    return {\n      type: LOAD_MORE_TAG,\n      payload: request\n    };\n  }\n}","map":{"version":3,"sources":["D:/Kltn/test/social-media/client/src/actions/search_action.js"],"names":["axios","USER_SERVER","SEARCH_RESULT","LOAD_MORE_TAG","LOAD_MORE_USER","search","keyword","skip","limit","prevState","console","log","type","payload","users","tags","data","request","post","then","response","newUsers","newTags","userSize","length","tagSize","searchmess","newGroups","groups","loadmoreUser","loadmoreTag"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { USER_SERVER } from '../components/ultils/mise';\r\nimport {\r\n    SEARCH_RESULT,\r\n    LOAD_MORE_TAG,\r\n    LOAD_MORE_USER\r\n} from './types';\r\n\r\n\r\nexport function search(keyword,skip,limit,prevState=[]) {\r\n    console.log(keyword, skip, limit, prevState );\r\n    if(keyword==\"\"){\r\n        return {\r\n            type: SEARCH_RESULT,\r\n            payload: {\r\n                users: [],\r\n                tags: [],\r\n            }\r\n        }\r\n    }\r\n    else{\r\n        console.log(prevState);\r\n        let data = { keyword,skip, limit }\r\n        const request = axios.post(`${USER_SERVER}/search`, data)\r\n            .then(response => {\r\n                let newUsers = [\r\n                    ...prevState.users,\r\n                    ...response.data.users\r\n                ]\r\n                let newTags = [\r\n                    ...prevState.tags, \r\n                    ...response.data.tags\r\n                ]\r\n                return { \r\n                    users: newUsers,\r\n                    tags: newTags,\r\n                    userSize: response.data.users.length,\r\n                    tagSize: response.data.tags.length,\r\n                }\r\n            });\r\n\r\n        return {\r\n            type: SEARCH_RESULT,\r\n            payload: request\r\n        }\r\n    }\r\n}\r\n\r\nexport function searchmess(keyword,skip,limit,prevState=[]) {\r\n    console.log(keyword, skip, limit, prevState );\r\n    if(keyword==\"\"){\r\n        return {\r\n            type: SEARCH_RESULT,\r\n            payload: {\r\n                users: [],\r\n                tags: [],\r\n            }\r\n        }\r\n    }\r\n    else{\r\n        console.log(prevState);\r\n        let data = { keyword,skip, limit }\r\n        const request = axios.post(`${USER_SERVER}/searchmess`, data)\r\n            .then(response => {\r\n                let newUsers = [\r\n                    ...prevState.users,\r\n                    ...response.data.users\r\n                ]\r\n                let newGroups = [\r\n                    ...prevState.groups, \r\n                    ...response.data.groups\r\n                ]\r\n                return { \r\n                    users: newUsers,\r\n                    groups: newGroups,\r\n                    userSize: response.data.users.length,\r\n                    tagSize: response.data.groups.length,\r\n                }\r\n            });\r\n\r\n        return {\r\n            type: SEARCH_RESULT,\r\n            payload: request\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function loadmoreUser(keyword, skip, limit, prevState = []) {\r\n    console.log(keyword, skip, limit, prevState);\r\n    if (keyword == \"\") {\r\n        return {\r\n            type: LOAD_MORE_USER,\r\n            payload: {\r\n                users: [],\r\n                userSize: 0,\r\n                tagSize: 0,\r\n                tags: [],\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        console.log(prevState);\r\n        let data = { keyword, skip, limit }\r\n        const request = axios.post(`${USER_SERVER}/searchUser`, data)\r\n            .then(response => {\r\n                let newUsers = [\r\n                    ...prevState.users,\r\n                    ...response.data.users\r\n                ]\r\n                return {\r\n                    users: newUsers,\r\n                    userSize: response.data.users.length,\r\n                }\r\n            });\r\n\r\n        return {\r\n            type: LOAD_MORE_USER,\r\n            payload: request\r\n        }\r\n    }\r\n}\r\n\r\nexport function loadmoreTag(keyword, skip, limit, prevState = []) {\r\n\r\n    console.log(keyword, skip, limit, prevState);\r\n    if (keyword == \"\") {\r\n        return {\r\n            type: LOAD_MORE_TAG,\r\n            payload: {\r\n                users: [],\r\n                userSize: 0,\r\n                tagSize: 0,\r\n                tags: [],\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        console.log(prevState);\r\n        let data = { keyword, skip, limit }\r\n        const request = axios.post(`${USER_SERVER}/searchTag`, data)\r\n            .then(response => {\r\n                console.log(response.data.tags)\r\n                let newTags = [\r\n                    ...prevState.tags,\r\n                    ...response.data.tags\r\n                ]\r\n                return {\r\n                    tags: newTags,\r\n                    tagSize: response.data.tags.length,\r\n                }\r\n            });\r\n        return {\r\n            type: LOAD_MORE_TAG,\r\n            payload: request\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}