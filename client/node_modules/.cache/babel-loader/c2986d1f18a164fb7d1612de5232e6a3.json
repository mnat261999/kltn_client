{"ast":null,"code":"var _jsxFileName = \"D:\\\\Kltn\\\\test\\\\social-media\\\\client\\\\src\\\\components\\\\ultils\\\\Form\\\\FormField.js\";\nimport React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport faExclamation from '@fortawesome/fontawesome-free-solid/faExclamation';\nimport faSmile from '@fortawesome/fontawesome-free-solid/faSmile';\nimport TextInput from 'react-autocomplete-input';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\n\nclass FormField extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      emojiToggle: false,\n      selectedEmoji: ''\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        emojiToggle: !this.state.emojiToggle\n      });\n    };\n\n    this.addEmoji = e => {\n      const input = document.getElementById('description_textarea');\n      console.log(input.selectionStart);\n      const {\n        formData,\n        change,\n        id\n      } = this.props;\n      let event = e.native; //Copy icon \n\n      var textfield = document.createElement(\"input\");\n      textfield.type = \"text\";\n      textfield.value = event;\n      document.body.appendChild(textfield);\n      textfield.select();\n      textfield.setSelectionRange(0, 99999);\n      document.execCommand(\"copy\");\n      document.body.removeChild(textfield);\n    };\n\n    this.showError = () => {\n      const {\n        formData\n      } = this.props;\n\n      if (formData.validation && !formData.valid) {\n        if (formData.validationMessage) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n            icon: faExclamation,\n            style: {\n              marginRight: '10px'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 21\n            }\n          }), formData.validationMessage);\n        }\n      }\n    };\n\n    this.renderTemplate = () => {\n      const {\n        formData,\n        change,\n        id\n      } = this.props;\n      let formTemplate = null;\n\n      switch (formData.element) {\n        case 'input':\n          formTemplate = /*#__PURE__*/React.createElement(\"div\", {\n            className: \"formBlock\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 21\n            }\n          }, formData.showlabel ? /*#__PURE__*/React.createElement(\"div\", {\n            className: \"label_input\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 29\n            }\n          }, formData.config.label) : null, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, formData.config, {\n            value: formData.value //sự kiện onBlur được dùng để validate required\n            ,\n            onBlur: event => change({\n              event,\n              id,\n              blur: true\n            }) //sự kiện change được dùng để validate email/password có pass đc Regex không\n            ,\n            onChange: event => change({\n              event,\n              id,\n              blur: true\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 25\n            }\n          })), /*#__PURE__*/React.createElement(\"div\", {\n            className: \"error_label\",\n            style: {\n              height: '20px',\n              fontSize: '15px',\n              marginTop: '5px',\n              marginBottom: '5px',\n              color: 'red',\n              textTransform: 'capitalize'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 25\n            }\n          }, this.showError()));\n          break;\n\n        case 'datetime':\n          formTemplate = /*#__PURE__*/React.createElement(\"div\", {\n            className: \"formBlock\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 21\n            }\n          }, formData.showlabel ? /*#__PURE__*/React.createElement(\"div\", {\n            className: \"label_input\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 29\n            }\n          }, formData.config.label) : null, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, formData.config, {\n            value: formData.value //sự kiện onBlur được dùng để validate required\n            ,\n            onBlur: event => change({\n              event,\n              id,\n              blur: true\n            }) //sự kiện change được dùng để validate email/password có pass đc Regex không\n            ,\n            onChange: event => change({\n              event,\n              id,\n              blur: true\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 25\n            }\n          })), /*#__PURE__*/React.createElement(\"div\", {\n            className: \"error_label\",\n            style: {\n              height: '20px',\n              fontSize: '15px',\n              marginTop: '5px',\n              marginBottom: '5px',\n              color: 'red',\n              textTransform: 'capitalize'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 25\n            }\n          }, this.showError()));\n          break;\n\n        case 'password':\n          formTemplate = /*#__PURE__*/React.createElement(\"div\", {\n            className: \"formBlock\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, formData.config, {\n            value: formData.value,\n            onBlur: event => change({\n              event,\n              id,\n              blur: true\n            }),\n            onChange: event => change({\n              event,\n              id,\n              blur: true\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 25\n            }\n          })), /*#__PURE__*/React.createElement(\"div\", {\n            className: \"error_label\",\n            style: {\n              height: '20px',\n              fontSize: '15px',\n              marginTop: '5px',\n              marginBottom: '5px',\n              color: 'red',\n              textTransform: 'capitalize'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 25\n            }\n          }, this.showError()));\n          break;\n\n        case 'select':\n          formTemplate = /*#__PURE__*/React.createElement(\"div\", {\n            className: \"formBlock\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 21\n            }\n          }, formData.showlabel ? /*#__PURE__*/React.createElement(\"div\", {\n            className: \"label_input\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 29\n            }\n          }, formData.config.label) : null, /*#__PURE__*/React.createElement(\"select\", {\n            value: formData.value,\n            onBlur: event => change({\n              event,\n              id,\n              blur: true\n            }),\n            onChange: event => change({\n              event,\n              id\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"option\", {\n            value: \"\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 29\n            }\n          }, id == \"nationality\" ? \"Quốc tịch\" : \"Select one\"), formData.config.options.map(item => /*#__PURE__*/React.createElement(\"option\", {\n            key: item.key,\n            value: item.key,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 41\n            }\n          }, item.value))), /*#__PURE__*/React.createElement(\"div\", {\n            className: \"error_label\",\n            style: {\n              height: '20px',\n              fontSize: '15px',\n              marginTop: '5px',\n              marginBottom: '5px',\n              color: 'red',\n              textTransform: 'capitalize'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 26\n            }\n          }, this.showError()));\n          break;\n\n        case 'textarea':\n          formTemplate = /*#__PURE__*/React.createElement(\"div\", {\n            className: \"formBlock\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 21\n            }\n          }, formData.showlabel ? /*#__PURE__*/React.createElement(\"div\", {\n            className: \"label_input\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 29\n            }\n          }, formData.config.label) : null, /*#__PURE__*/React.createElement(\"textarea\", Object.assign({}, formData.config, {\n            value: formData.value,\n            onBlur: event => change({\n              event,\n              id,\n              blur: true\n            }),\n            onChange: event => change({\n              event,\n              id\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 25\n            }\n          })), this.showError());\n          break;\n\n        case 'description':\n          formTemplate = /*#__PURE__*/React.createElement(\"div\", {\n            className: \"formBlock\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            className: \"description_input\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(TextInput, {\n            id: \"description_textarea\",\n            className: \"description_textarea\",\n            placeholder: formData.config.placeholder,\n            options: formData.config.options,\n            defaultValue: formData.value,\n            trigger: \"#\",\n            onChange: event => {\n              console.log(event);\n              change({\n                event,\n                emojiInfo: {\n                  emoji: false\n                },\n                id\n              });\n            },\n            maxOptions: 7,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 29\n            }\n          }), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n            icon: faSmile,\n            class: \"emoji_button\",\n            onClick: this.handleChange,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 29\n            }\n          }), this.state.emojiToggle ? /*#__PURE__*/React.createElement(Picker, {\n            style: {\n              position: \"absolute\",\n              right: 0,\n              top: \"100%\"\n            },\n            onSelect: this.addEmoji,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 33\n            }\n          }) : null));\n          break;\n\n        case 'userTag':\n          formTemplate = /*#__PURE__*/React.createElement(\"div\", {\n            className: \"formBlock\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 21\n            }\n          }, formData.showlabel ? /*#__PURE__*/React.createElement(\"div\", {\n            className: \"label_input\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 33\n            }\n          }, formData.config.label) : null, /*#__PURE__*/React.createElement(TextInput, {\n            Component: \"input\",\n            placeholder: formData.config.placeholder,\n            options: formData.config.options,\n            trigger: \"@\",\n            defaultValue: formData.value // onChange={this.handleChange}\n            ,\n            onChange: event => {\n              console.log(event);\n              change({\n                event,\n                id\n              });\n            },\n            maxOptions: 7,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 25\n            }\n          }));\n          break;\n\n        case 'locationInput':\n          formTemplate = /*#__PURE__*/React.createElement(\"div\", {\n            className: \"formBlock\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 21\n            }\n          }, formData.showlabel ? /*#__PURE__*/React.createElement(\"div\", {\n            className: \"label_input\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 33\n            }\n          }, formData.config.label) : null, /*#__PURE__*/React.createElement(TextInput, {\n            Component: \"input\",\n            placeholder: formData.config.placeholder,\n            options: formData.config.options,\n            trigger: \"#\",\n            onChange: event => {\n              console.log(event);\n              change({\n                event,\n                id\n              });\n            },\n            maxOptions: 3,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 25\n            }\n          }));\n          break;\n\n        default:\n          formTemplate = null;\n      }\n\n      return formTemplate;\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"formField_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 13\n      }\n    }, this.renderTemplate());\n  }\n\n}\n\n;\nexport default FormField;","map":{"version":3,"sources":["D:/Kltn/test/social-media/client/src/components/ultils/Form/FormField.js"],"names":["React","Component","FontAwesomeIcon","faExclamation","faSmile","TextInput","Picker","FormField","state","emojiToggle","selectedEmoji","handleChange","e","setState","addEmoji","input","document","getElementById","console","log","selectionStart","formData","change","id","props","event","native","textfield","createElement","type","value","body","appendChild","select","setSelectionRange","execCommand","removeChild","showError","validation","valid","validationMessage","marginRight","renderTemplate","formTemplate","element","showlabel","config","label","blur","height","fontSize","marginTop","marginBottom","color","textTransform","options","map","item","key","placeholder","emojiInfo","emoji","position","right","top","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport faExclamation from '@fortawesome/fontawesome-free-solid/faExclamation';\r\nimport faSmile from '@fortawesome/fontawesome-free-solid/faSmile';\r\nimport TextInput from 'react-autocomplete-input';\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart'\r\n\r\nclass FormField extends Component{\r\n    \r\n    state={\r\n        emojiToggle: false,\r\n        selectedEmoji:'',\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({ emojiToggle: !this.state.emojiToggle })\r\n    }\r\n    addEmoji = e => {\r\n        const input = document.getElementById('description_textarea');\r\n        console.log(input.selectionStart);\r\n        const { formData, change, id } = this.props;\r\n        let event = e.native;\r\n        //Copy icon \r\n        var textfield = document.createElement(\"input\");\r\n        textfield.type=\"text\"\r\n        textfield.value = event;\r\n        document.body.appendChild(textfield);\r\n        textfield.select();\r\n        textfield.setSelectionRange(0, 99999)\r\n        document.execCommand(\"copy\");\r\n        document.body.removeChild(textfield);\r\n    };\r\n\r\n    showError = () => {\r\n        const {formData} = this.props;\r\n        if(formData.validation && !formData.valid)\r\n        {\r\n            if (formData.validationMessage){\r\n                return (\r\n                    <div>\r\n                    <FontAwesomeIcon icon={faExclamation} style={{marginRight: '10px'}}/>\r\n                        {formData.validationMessage}\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n   \r\n     renderTemplate = () => {\r\n        const { formData, change, id } = this.props;\r\n        let formTemplate =null;\r\n        switch(formData.element){\r\n            case ('input'):\r\n                formTemplate = (\r\n                    <div className=\"formBlock\" >\r\n                        {  formData.showlabel?\r\n                            <div className=\"label_input\">{formData.config.label}</div>\r\n                            :null\r\n                        }\r\n                        <input {...formData.config}\r\n                            value={formData.value}\r\n                            //sự kiện onBlur được dùng để validate required\r\n                            onBlur={(event) => change({event,id,blur:true})}\r\n                            //sự kiện change được dùng để validate email/password có pass đc Regex không\r\n                            onChange={(event) => change({ event, id, blur: true })}\r\n                        />\r\n                        <div className=\"error_label\" style={{ height: '20px', fontSize: '15px', marginTop: '5px', marginBottom: '5px', color: 'red', textTransform: 'capitalize' }}>\r\n                            {this.showError()}\r\n                        </div>\r\n                        \r\n                    </div>\r\n                )\r\n                break;\r\n            case ('datetime'):\r\n                formTemplate = (\r\n                    <div className=\"formBlock\" >\r\n                        {  formData.showlabel?\r\n                            <div className=\"label_input\">{formData.config.label}</div>\r\n                            :null\r\n                        }\r\n\r\n                        <input {...formData.config}\r\n                            value={formData.value}\r\n                            //sự kiện onBlur được dùng để validate required\r\n                            onBlur={(event) => change({event,id,blur:true})}\r\n                            //sự kiện change được dùng để validate email/password có pass đc Regex không\r\n                            onChange={(event) => change({ event, id, blur: true })}\r\n                        />\r\n\r\n                        <div className=\"error_label\" style={{ height: '20px', fontSize: '15px', marginTop: '5px', marginBottom: '5px', color: 'red', textTransform: 'capitalize' }}>\r\n                            {this.showError()}\r\n                        </div>\r\n                        \r\n                    </div>\r\n                )\r\n                break;\r\n            case ('password'):\r\n                formTemplate = (\r\n                    <div className=\"formBlock\" >\r\n                        <input {...formData.config}\r\n                            value={formData.value}\r\n                            onBlur={(event) => change({ event, id, blur: true })}\r\n                            onChange={(event) => change({ event, id, blur: true })}\r\n                        />\r\n                        <div className=\"error_label\" style={{ height: '20px', fontSize: '15px',marginTop: '5px', marginBottom: '5px', color: 'red', textTransform: 'capitalize' }}>\r\n                            {this.showError()}\r\n                        </div>\r\n                    </div>\r\n                    \r\n                )\r\n                break;\r\n            case('select'):\r\n                formTemplate = (\r\n                    <div className=\"formBlock\" >\r\n                        {  \r\n                            formData.showlabel ?\r\n                            <div className=\"label_input\">{formData.config.label}</div>\r\n                            : null\r\n                        }\r\n                        <select\r\n                            value={formData.value}\r\n                            onBlur={(event) => change({ event, id, blur: true })}\r\n                            onChange={(event) => change({ event, id })}\r\n                        >\r\n                            <option value=\"\">\r\n                                {\r\n                                    id == \"nationality\"? \"Quốc tịch\":\r\n                                    \"Select one\"\r\n                                }\r\n                            </option>\r\n                            {\r\n                                formData.config.options.map(item => (\r\n                                        <option \r\n                                            key={item.key}\r\n                                            value={item.key}\r\n                                        >\r\n                                            {item.value}\r\n                                        </option>\r\n                                   ))\r\n                            }\r\n                        </select>\r\n                         <div className=\"error_label\" style={{ height: '20px', fontSize: '15px', marginTop: '5px', marginBottom: '5px', color: 'red', textTransform: 'capitalize' }}>\r\n                            {this.showError()}\r\n                        </div> \r\n                    </div>\r\n                )\r\n            break;\r\n            case ('textarea'):\r\n                formTemplate = (\r\n                    <div className=\"formBlock\" >\r\n                        {  formData.showlabel ?\r\n                            <div className=\"label_input\">{formData.config.label}</div>\r\n                            : null\r\n                        }\r\n                        <textarea {...formData.config}\r\n                            value={formData.value}\r\n                            onBlur={(event) => change({ event, id, blur: true })}\r\n                            onChange={(event) => change({ event, id })}\r\n                        />\r\n                        {this.showError()}\r\n                    </div>\r\n                )\r\n                break; \r\n            case ('description'):\r\n                formTemplate = (\r\n                    <div className=\"formBlock\" >\r\n                        <div className=\"description_input\">\r\n                            <TextInput\r\n                                id=\"description_textarea\"\r\n                                className=\"description_textarea\"\r\n                                placeholder={formData.config.placeholder}\r\n                                options={formData.config.options}\r\n                                defaultValue={formData.value}\r\n                                trigger=\"#\"\r\n                                onChange={(event) => { \r\n                                    console.log(event);\r\n                                    change({ event, emojiInfo: { emoji: false } , id })\r\n                                }}\r\n                                maxOptions={7}\r\n                            /> \r\n                            <FontAwesomeIcon icon={faSmile} class=\"emoji_button\" onClick={this.handleChange}></FontAwesomeIcon>\r\n                            {\r\n                            this.state.emojiToggle ?\r\n                                <Picker style={{position: \"absolute\", right: 0,top: \"100%\",}} onSelect={this.addEmoji} />\r\n                            :null\r\n                            }\r\n                        </div>\r\n                    </div>);\r\n                break;\r\n            case ('userTag'):\r\n                formTemplate = (\r\n                    <div className=\"formBlock\" >\r\n                        {\r\n                            formData.showlabel ?\r\n                                <div className=\"label_input\">{formData.config.label}</div>\r\n                                : null\r\n                        }\r\n                        <TextInput\r\n                            Component=\"input\"\r\n                            placeholder={formData.config.placeholder}\r\n                            options={formData.config.options}\r\n                            trigger=\"@\"\r\n                            defaultValue={formData.value}\r\n                            // onChange={this.handleChange}\r\n                            onChange={(event) => {\r\n                                console.log(event);\r\n                                change({ event, id })\r\n                            }}\r\n                            maxOptions={7}\r\n                        />\r\n                    </div>);\r\n                break;\r\n            case ('locationInput'):\r\n                formTemplate = (\r\n                    <div className=\"formBlock\" >\r\n                        {\r\n                            formData.showlabel ?\r\n                                <div className=\"label_input\">{formData.config.label}</div>\r\n                                : null\r\n                        }\r\n                        <TextInput\r\n                            Component=\"input\"\r\n                            placeholder={formData.config.placeholder}\r\n                            options={formData.config.options}\r\n                            trigger=\"#\"\r\n                            onChange={(event) => {\r\n                                console.log(event);\r\n                                change({ event,id })\r\n                            }}\r\n                            maxOptions={3}\r\n                        />\r\n                    </div>);\r\n                break;\r\n            default:\r\n                formTemplate = null;\r\n\r\n        }\r\n        return formTemplate;\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <div class=\"formField_container\">\r\n                {this.renderTemplate()}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default FormField;"]},"metadata":{},"sourceType":"module"}