import { AnnotationDimensionsGetter, AnnotationMatcher, AnnotationPositionGetter, AnnotationSpec } from './types';
/**
 * Bind annotations to a dataset.
 */
export declare const useAnnotations: <Datum>({ data, annotations, getPosition, getDimensions, }: {
    data: Datum[];
    annotations: AnnotationMatcher<Datum>[];
    getPosition: AnnotationPositionGetter<Datum>;
    getDimensions: AnnotationDimensionsGetter<Datum>;
}) => import("./types").BoundAnnotation<Datum>[];
export declare const useComputedAnnotations: <Datum>({ annotations, }: {
    annotations: AnnotationSpec<Datum>[];
}) => ({
    computed: import("./types").AnnotationInstructions;
    x: number;
    y: number;
    note: import("./types").Note<Datum>;
    noteX: import("./types").RelativeOrAbsolutePosition;
    noteY: import("./types").RelativeOrAbsolutePosition;
    noteWidth: number;
    noteTextOffset: number;
    size: number;
    width?: number | undefined;
    height?: number | undefined;
    type: "circle";
    offset?: number | undefined;
} | {
    computed: import("./types").AnnotationInstructions;
    x: number;
    y: number;
    note: import("./types").Note<Datum>;
    noteX: import("./types").RelativeOrAbsolutePosition;
    noteY: import("./types").RelativeOrAbsolutePosition;
    noteWidth: number;
    noteTextOffset: number;
    size: number;
    width?: number | undefined;
    height?: number | undefined;
    type: "dot";
} | {
    computed: import("./types").AnnotationInstructions;
    x: number;
    y: number;
    note: import("./types").Note<Datum>;
    noteX: import("./types").RelativeOrAbsolutePosition;
    noteY: import("./types").RelativeOrAbsolutePosition;
    noteWidth: number;
    noteTextOffset: number;
    size?: number | undefined;
    width: number;
    height: number;
    type: "rect";
    offset?: number | undefined;
})[];
export declare const useComputedAnnotation: <Datum>(annotation: AnnotationSpec<Datum>) => import("./types").AnnotationInstructions;
//# sourceMappingURL=hooks.d.ts.map