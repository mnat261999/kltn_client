import { CompleteTheme } from '@nivo/core';
import { ReactElement } from 'react';
export declare type RelativeOrAbsolutePosition = number | {
    abs: number;
};
export declare type AnnotationPositionGetter<Datum> = (datum: Datum) => {
    x: number;
    y: number;
};
export declare type AnnotationDimensionsGetter<Datum> = (datum: Datum) => {
    size: number;
    width: number;
    height: number;
};
export declare type NoteComponent<Datum> = (props: {
    datum: Datum;
    x: number;
    y: number;
}) => JSX.Element;
export declare type NoteSvg<Datum> = string | ReactElement | NoteComponent<Datum>;
export declare type NoteCanvasRenderer<Datum> = (ctx: CanvasRenderingContext2D, props: {
    datum: Datum;
    x: number;
    y: number;
    theme: CompleteTheme;
}) => void;
export declare type NoteCanvas<Datum> = string | NoteCanvasRenderer<Datum>;
export declare type Note<Datum> = NoteSvg<Datum> | NoteCanvas<Datum>;
export declare const isSvgNote: <Datum>(note: Note<Datum>) => note is NoteSvg<Datum>;
export declare const isCanvasNote: <Datum>(note: Note<Datum>) => note is NoteCanvas<Datum>;
export interface BaseAnnotationSpec<Datum> {
    x: number;
    y: number;
    note: Note<Datum>;
    noteX: RelativeOrAbsolutePosition;
    noteY: RelativeOrAbsolutePosition;
    noteWidth: number;
    noteTextOffset: number;
    size?: number;
    width?: number;
    height?: number;
}
export declare type CircleAnnotationSpec<Datum> = BaseAnnotationSpec<Datum> & {
    type: 'circle';
    size: number;
    offset?: number;
};
export declare const isCircleAnnotation: <Datum>(annotationSpec: AnnotationSpec<Datum>) => annotationSpec is CircleAnnotationSpec<Datum>;
export declare type DotAnnotationSpec<Datum> = BaseAnnotationSpec<Datum> & {
    type: 'dot';
    size: number;
};
export declare const isDotAnnotation: <Datum>(annotationSpec: AnnotationSpec<Datum>) => annotationSpec is DotAnnotationSpec<Datum>;
export declare type RectAnnotationSpec<Datum> = BaseAnnotationSpec<Datum> & {
    type: 'rect';
    width: number;
    height: number;
    offset?: number;
};
export declare const isRectAnnotation: <Datum>(annotationSpec: AnnotationSpec<Datum>) => annotationSpec is RectAnnotationSpec<Datum>;
export declare type AnnotationSpec<Datum> = CircleAnnotationSpec<Datum> | DotAnnotationSpec<Datum> | RectAnnotationSpec<Datum>;
export declare type AnnotationType = AnnotationSpec<unknown>['type'];
export declare type AnnotationMatcher<Datum> = AnnotationSpec<Datum> & {
    match: (datum: Datum) => boolean;
    offset?: number;
};
export declare type BoundAnnotation<Datum> = AnnotationSpec<Datum> & {
    datum: Datum;
};
export declare type AnnotationInstructions = {
    points: [number, number][];
    text: [number, number];
    angle: number;
};
export declare type ComputedAnnotation<Datum> = BoundAnnotation<Datum> & {
    computed: AnnotationInstructions;
};
//# sourceMappingURL=types.d.ts.map